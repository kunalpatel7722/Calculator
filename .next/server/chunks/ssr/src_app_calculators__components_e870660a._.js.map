{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/calculators/_components/CompoundInterestCalculator.tsx"],"sourcesContent":["\n'use client';\n\nimport { useState } from 'react';\nimport { useForm, type SubmitHandler } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport * as z from 'zod';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, TooltipProps, PieChart, Pie, Cell, LegendProps } from 'recharts';\nimport { ChartConfig, ChartContainer, ChartTooltip, ChartTooltipContent, ChartLegend, ChartLegendContent } from \"@/components/ui/chart\"\nimport type { TooltipPayload } from 'recharts';\nimport { CurrencyToggle, AVAILABLE_CURRENCIES, type Currency } from '@/components/shared/CurrencyToggle';\n\nconst formSchema = z.object({\n  principal: z.coerce.number().min(0.01, \"Principal must be greater than 0\"),\n  rate: z.coerce.number().min(0.01, \"Interest rate must be greater than 0\").max(100, \"Interest rate must be 100 or less\"),\n  time: z.coerce.number().min(1, \"Time must be at least 1 year\").max(100, \"Time cannot exceed 100 years\"),\n  compoundingFrequency: z.enum(['1', '2', '4', '12']), // Annually, Semi-Annually, Quarterly, Monthly\n});\n\ntype FormData = z.infer<typeof formSchema>;\n\ninterface AnnualDataPoint {\n  year: number;\n  value: number;\n  interestEarned: number;\n  principalContribution: number; \n}\ninterface PieChartDataPoint {\n  name: string;\n  value: number;\n  fill: string;\n}\ninterface CalculationResult {\n  futureValue: number;\n  totalInterest: number;\n  annualBreakdown: AnnualDataPoint[];\n  pieChartData: PieChartDataPoint[];\n  pieChartConfig: ChartConfig;\n}\n\nexport function CompoundInterestCalculator() {\n  const [result, setResult] = useState<CalculationResult | null>(null);\n  const [currency, setCurrency] = useState<Currency>(AVAILABLE_CURRENCIES.find(c => c.value === 'USD') || AVAILABLE_CURRENCIES[0]);\n\n  const form = useForm<FormData>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      principal: 10000,\n      rate: 7,\n      time: 10,\n      compoundingFrequency: '1', \n    },\n  });\n\n  const calculateCompoundInterest = (data: FormData) => {\n    const { principal, rate, time, compoundingFrequency } = data;\n    const n = parseInt(compoundingFrequency);\n    const r = rate / 100;\n\n    const futureValue = principal * Math.pow((1 + r / n), n * time);\n    const totalInterest = futureValue - principal;\n\n    const annualBreakdown: CalculationResult['annualBreakdown'] = [];\n    let currentPrincipal = principal;\n    for (let year = 1; year <= time; year++) {\n      const valueAtYearEnd = currentPrincipal * Math.pow((1 + r / n), n * 1); \n      const interestEarnedThisYear = valueAtYearEnd - currentPrincipal;\n      annualBreakdown.push({\n        year,\n        value: parseFloat(valueAtYearEnd.toFixed(2)),\n        interestEarned: parseFloat(interestEarnedThisYear.toFixed(2)),\n        principalContribution: parseFloat(currentPrincipal.toFixed(2)), \n      });\n      currentPrincipal = valueAtYearEnd;\n    }\n    \n    const pieChartData: PieChartDataPoint[] = [\n      { name: 'Total Principal', value: parseFloat(principal.toFixed(2)), fill: 'hsl(var(--chart-1))' },\n      { name: 'Total Interest', value: parseFloat(totalInterest.toFixed(2)), fill: 'hsl(var(--chart-2))' },\n    ].filter(d => d.value > 0);\n\n    const pieChartConfig: ChartConfig = {\n      'Total Principal': { label: 'Total Principal', color: 'hsl(var(--chart-1))' },\n      'Total Interest': { label: 'Total Interest', color: 'hsl(var(--chart-2))' },\n    };\n    \n    setResult({\n      futureValue: parseFloat(futureValue.toFixed(2)),\n      totalInterest: parseFloat(totalInterest.toFixed(2)),\n      annualBreakdown,\n      pieChartData,\n      pieChartConfig,\n    });\n  };\n\n  const onSubmit: SubmitHandler<FormData> = (data) => {\n    calculateCompoundInterest(data);\n  };\n\n  const lineChartConfig = {\n    value: {\n      label: `Investment Value (${currency.symbol})`,\n      color: \"hsl(var(--chart-1))\",\n    },\n    interestEarned: {\n      label: `Interest Earned Yearly (${currency.symbol})`,\n      color: \"hsl(var(--chart-2))\",\n    },\n     principal: { \n      label: `Principal Base (${currency.symbol})`,\n      color: \"hsl(var(--muted))\",\n    }\n  } satisfies ChartConfig;\n\n  const CustomLineTooltip = ({ active, payload, label }: TooltipProps<number, string>) => {\n    if (active && payload && payload.length) {\n      const yearData = result?.annualBreakdown.find(d => d.year.toString() === label);\n      return (\n        <div className=\"p-2 text-sm bg-background/90 border border-border rounded-md shadow-lg\">\n          <p className=\"font-bold mb-1\">{`Year: ${label}`}</p>\n          {payload.map((pld: TooltipPayload<number, string>) => (\n            <p key={pld.dataKey} style={{ color: pld.color }}>\n              {`${pld.name}: ${currency.symbol}${pld.value?.toLocaleString()}`}\n            </p>\n          ))}\n          {yearData && (\n             <p style={{ color: lineChartConfig.principal.color }}>\n                {`Initial Principal This Year: ${currency.symbol}${yearData.principalContribution.toLocaleString()}`}\n             </p>\n          )}\n        </div>\n      );\n    }\n    return null;\n  };\n\n  interface CustomPieTooltipProps extends TooltipProps<number, string> {\n    currency: Currency;\n  }\n\n  const CustomPieTooltip = ({ active, payload, currency: currentCurrency }: CustomPieTooltipProps) => {\n    if (active && payload && payload.length) {\n      const data = payload[0].payload as PieChartDataPoint;\n      const percentage = payload[0].percent !== undefined ? (payload[0].percent * 100).toFixed(2) : null;\n      return (\n        <div className=\"p-2 text-sm bg-background/90 border border-border rounded-md shadow-lg\">\n          <p className=\"font-bold mb-1\" style={{ color: data.fill }}>{data.name}</p>\n          <p>{`Amount: ${currentCurrency.symbol}${data.value.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}`}</p>\n          {percentage && <p>{`Percentage: ${percentage}%`}</p>}\n        </div>\n      );\n    }\n    return null;\n  };\n\n\n  return (\n    <Card className=\"shadow-lg\">\n      <CardHeader>\n        <CardTitle className=\"font-headline text-2xl\">Compound Interest Calculator</CardTitle>\n        <CardDescription>Calculate the future value of your investment with the power of compounding.</CardDescription>\n      </CardHeader>\n      <form onSubmit={form.handleSubmit(onSubmit)}>\n        <CardContent className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div>\n              <Label htmlFor=\"principal\">Principal Amount ({currency.symbol})</Label>\n              <Input id=\"principal\" type=\"number\" step=\"any\" {...form.register('principal')} />\n              {form.formState.errors.principal && <p className=\"text-sm text-destructive mt-1\">{form.formState.errors.principal.message}</p>}\n            </div>\n            <div>\n              <Label htmlFor=\"rate\">Annual Interest Rate (%)</Label>\n              <Input id=\"rate\" type=\"number\" step=\"any\" {...form.register('rate')} />\n              {form.formState.errors.rate && <p className=\"text-sm text-destructive mt-1\">{form.formState.errors.rate.message}</p>}\n            </div>\n          </div>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div>\n              <Label htmlFor=\"time\">Time Period (Years)</Label>\n              <Input id=\"time\" type=\"number\" {...form.register('time')} />\n              {form.formState.errors.time && <p className=\"text-sm text-destructive mt-1\">{form.formState.errors.time.message}</p>}\n            </div>\n            <div>\n              <Label htmlFor=\"compoundingFrequency\">Compounding Frequency</Label>\n              <Select onValueChange={(value) => form.setValue('compoundingFrequency', value as FormData['compoundingFrequency'])} defaultValue={form.getValues('compoundingFrequency')}>\n                <SelectTrigger id=\"compoundingFrequency\">\n                  <SelectValue placeholder=\"Select frequency\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"1\">Annually</SelectItem>\n                  <SelectItem value=\"2\">Semi-Annually</SelectItem>\n                  <SelectItem value=\"4\">Quarterly</SelectItem>\n                  <SelectItem value=\"12\">Monthly</SelectItem>\n                </SelectContent>\n              </Select>\n              {form.formState.errors.compoundingFrequency && <p className=\"text-sm text-destructive mt-1\">{form.formState.errors.compoundingFrequency.message}</p>}\n            </div>\n          </div>\n           <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div>\n              <Label htmlFor=\"currency-toggle\">Currency</Label>\n              <CurrencyToggle\n                id=\"currency-toggle\"\n                selectedCurrency={currency}\n                onCurrencyChange={setCurrency}\n              />\n            </div>\n          </div>\n        </CardContent>\n        <CardFooter>\n          <Button type=\"submit\" className=\"w-full md:w-auto\">Calculate</Button>\n        </CardFooter>\n      </form>\n\n      {result && (\n        <div className=\"p-6 border-t\">\n          <h3 className=\"text-xl font-semibold mb-4 font-headline\">Results</h3>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-6 text-lg\">\n            <p><strong>Future Value:</strong> {currency.symbol}{result.futureValue.toLocaleString()}</p>\n            <p><strong>Total Interest Earned:</strong> {currency.symbol}{result.totalInterest.toLocaleString()}</p>\n          </div>\n\n          <div className=\"mb-8 h-80 md:h-96\">\n             <ChartContainer config={lineChartConfig} className=\"w-full h-full\">\n                <LineChart accessibilityLayer data={result.annualBreakdown} margin={{ top: 5, right: 20, left: 20, bottom: 5 }}>\n                    <CartesianGrid vertical={false} strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"year\" unit=\"yr\" tickLine={false} axisLine={false} tickMargin={8} />\n                    <YAxis \n                        tickLine={false} \n                        axisLine={false} \n                        tickMargin={8}\n                        tickFormatter={(value) => `${currency.symbol}${value.toLocaleString()}`} \n                    />\n                    <ChartTooltip content={<CustomLineTooltip />} cursorStyle={{strokeDasharray: '3 3', strokeWidth: 1.5, fillOpacity: 0.1}}/>\n                    <ChartLegend content={<ChartLegendContent />} />\n                    <Line dataKey=\"value\" type=\"monotone\" name={lineChartConfig.value.label} stroke={lineChartConfig.value.color} strokeWidth={2.5} dot={false} activeDot={{ r: 6 }} />\n                    <Line dataKey=\"interestEarned\" type=\"monotone\" name={lineChartConfig.interestEarned.label} stroke={lineChartConfig.interestEarned.color} strokeWidth={2.5} dot={false} activeDot={{ r: 6 }} />\n                </LineChart>\n            </ChartContainer>\n          </div>\n          \n          {result.pieChartData && result.pieChartData.length > 0 && result.pieChartConfig && (\n            <div className=\"my-8\">\n              <h4 className=\"text-lg font-semibold mb-2 text-center font-headline\">Investment Breakdown</h4>\n              <div className=\"h-80 md:h-96 flex justify-center\">\n                <ChartContainer config={result.pieChartConfig} className=\"aspect-square max-h-[300px] sm:max-h-[350px]\">\n                  <PieChart>\n                    <ChartTooltip \n                      content={<CustomPieTooltip currency={currency}/>}\n                      cursor={{ fill: \"hsl(var(--muted))\", opacity: 0.3 }}\n                    />\n                    <Pie\n                      data={result.pieChartData}\n                      dataKey=\"value\"\n                      nameKey=\"name\"\n                      cx=\"50%\"\n                      cy=\"50%\"\n                      outerRadius={100}\n                      innerRadius={50}\n                      labelLine={false}\n                      label={({ name, percent }) => `${name} (${(percent * 100).toFixed(0)}%)`}\n                    >\n                      {result.pieChartData.map((entry, index) => (\n                        <Cell key={`cell-pie-${index}`} fill={entry.fill} />\n                      ))}\n                    </Pie>\n                     <ChartLegend \n                        content={<ChartLegendContent nameKey=\"name\" />} \n                        verticalAlign=\"bottom\"\n                        align=\"center\"\n                        wrapperStyle={{paddingTop: \"20px\"}}\n                    />\n                  </PieChart>\n                </ChartContainer>\n              </div>\n            </div>\n          )}\n\n          <h4 className=\"text-lg font-semibold mb-2 font-headline\">Annual Breakdown</h4>\n          <div className=\"max-h-96 overflow-y-auto\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Year</TableHead>\n                  <TableHead>Interest Earned</TableHead>\n                  <TableHead className=\"text-right\">End Value</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {result.annualBreakdown.map((item) => (\n                  <TableRow key={item.year}>\n                    <TableCell>{item.year}</TableCell>\n                    <TableCell>{currency.symbol}{item.interestEarned.toLocaleString()}</TableCell>\n                    <TableCell className=\"text-right\">{currency.symbol}{item.value.toLocaleString()}</TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </div>\n        </div>\n      )}\n    </Card>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 914, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/calculators/_components/StockReturnCalculator.tsx"],"sourcesContent":["\n'use client';\n\nimport { useState } from 'react';\nimport { useForm, type SubmitHandler } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport * as z from 'zod';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';\nimport { CurrencyToggle, AVAILABLE_CURRENCIES, type Currency } from '@/components/shared/CurrencyToggle';\nimport { Table, TableBody, TableCell, TableRow } from '@/components/ui/table';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, TooltipProps, Cell, PieChart, Pie, LegendProps } from 'recharts';\nimport { ChartConfig, ChartContainer, ChartTooltip, ChartTooltipContent, ChartLegend, ChartLegendContent } from \"@/components/ui/chart\";\nimport type { TooltipPayload } from 'recharts';\n\nconst formSchema = z.object({\n  purchasePrice: z.coerce.number().min(0, \"Purchase price must be non-negative\"),\n  sellingPrice: z.coerce.number().min(0, \"Selling price must be non-negative\"),\n  shares: z.coerce.number().min(1, \"Number of shares must be at least 1\"),\n});\ntype FormData = z.infer<typeof formSchema>;\n\ninterface BarChartDataPoint {\n  name: string;\n  value: number;\n  fill: string;\n}\n\ninterface PieChartDataPoint {\n  name: string;\n  value: number;\n  fill: string;\n}\n\ninterface CalculationResult {\n  totalInvestment: number;\n  totalReturnValue: number;\n  profitLoss: number;\n  returnPercentage: number;\n  barChartData: BarChartDataPoint[];\n  pieChartData: PieChartDataPoint[];\n  pieChartConfig: ChartConfig;\n}\n\nexport function StockReturnCalculator() { \n  const [result, setResult] = useState<CalculationResult | null>(null);\n  const [currency, setCurrency] = useState<Currency>(AVAILABLE_CURRENCIES.find(c => c.value === 'USD') || AVAILABLE_CURRENCIES[0]);\n\n  const form = useForm<FormData>({\n    resolver: zodResolver(formSchema),\n    defaultValues: { purchasePrice: 100, sellingPrice: 120, shares: 10 },\n  });\n  \n  const barChartConfig = { \n    totalInvestment: { label: `Total Investment (${currency.symbol})`, color: \"hsl(var(--chart-2))\" },\n    totalReturnValue: { label: `Total Return Value (${currency.symbol})`, color: \"hsl(var(--chart-1))\" },\n  } satisfies ChartConfig;\n\n  const onSubmit: SubmitHandler<FormData> = (data) => {\n    const totalInvestment = data.purchasePrice * data.shares;\n    const totalReturnValue = data.sellingPrice * data.shares;\n    const profitLoss = totalReturnValue - totalInvestment;\n    const returnPercentage = totalInvestment > 0 ? (profitLoss / totalInvestment) * 100 : 0;\n\n    const barChartData: BarChartDataPoint[] = [\n      { name: 'Total Investment', value: parseFloat(totalInvestment.toFixed(2)), fill: barChartConfig.totalInvestment.color },\n      { name: 'Total Return Value', value: parseFloat(totalReturnValue.toFixed(2)), fill: barChartConfig.totalReturnValue.color },\n    ];\n    \n    const newPieChartData: PieChartDataPoint[] = [];\n    const newPieChartConfig: ChartConfig = {};\n\n    if (profitLoss >= 0) {\n      newPieChartData.push({ name: 'Initial Investment', value: totalInvestment, fill: 'hsl(var(--chart-1))'});\n      newPieChartConfig['Initial Investment'] = { label: 'Initial Investment', color: 'hsl(var(--chart-1))' };\n      if (profitLoss > 0) { \n        newPieChartData.push({ name: 'Profit', value: profitLoss, fill: 'hsl(var(--chart-2))'});\n        newPieChartConfig['Profit'] = { label: 'Profit', color: 'hsl(var(--chart-2))' };\n      }\n    } else { \n      if (totalReturnValue > 0) { \n         newPieChartData.push({ name: 'Returned Value', value: totalReturnValue, fill: 'hsl(var(--chart-1))' });\n         newPieChartConfig['Returned Value'] = { label: 'Returned Value', color: 'hsl(var(--chart-1))' };\n      }\n      newPieChartData.push({ name: 'Loss', value: Math.abs(profitLoss), fill: 'hsl(var(--destructive))'});\n      newPieChartConfig['Loss'] = { label: 'Loss', color: 'hsl(var(--destructive))' };\n    }\n    \n    setResult({ \n        totalInvestment: parseFloat(totalInvestment.toFixed(2)),\n        totalReturnValue: parseFloat(totalReturnValue.toFixed(2)),\n        profitLoss: parseFloat(profitLoss.toFixed(2)),\n        returnPercentage: parseFloat(returnPercentage.toFixed(2)),\n        barChartData,\n        pieChartData: newPieChartData.filter(d => d.value > 0.009), \n        pieChartConfig: newPieChartConfig,\n    });\n  };\n\n  const CustomBarTooltip = ({ active, payload }: TooltipProps<number, string>) => {\n    if (active && payload && payload.length) {\n      const data = payload[0];\n      return (\n        <div className=\"p-2 text-sm bg-background/90 border border-border rounded-md shadow-lg\">\n          <p className=\"font-bold mb-1\" style={{ color: data.payload.fill }}>{data.name}</p>\n          <p>{`Value: ${currency.symbol}${data.value?.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}`}</p>\n        </div>\n      );\n    }\n    return null;\n  };\n\n  interface CustomPieTooltipProps extends TooltipProps<number, string> {\n    currency: Currency;\n  }\n\n  const CustomPieTooltip = ({ active, payload, currency: currentCurrency }: CustomPieTooltipProps) => {\n    if (active && payload && payload.length) {\n      const data = payload[0].payload as PieChartDataPoint;\n      const percentage = payload[0].percent !== undefined ? (payload[0].percent * 100).toFixed(2) : null;\n      return (\n        <div className=\"p-2 text-sm bg-background/90 border border-border rounded-md shadow-lg\">\n          <p className=\"font-bold mb-1\" style={{ color: data.fill }}>{data.name}</p>\n          <p>{`Amount: ${currentCurrency.symbol}${data.value.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}`}</p>\n          {percentage && <p>{`Percentage: ${percentage}%`}</p>}\n        </div>\n      );\n    }\n    return null;\n  };\n\n  return (\n    <Card className=\"shadow-lg\">\n      <CardHeader>\n        <CardTitle className=\"font-headline text-2xl\">Stock Return Calculator</CardTitle>\n        <CardDescription>Calculate profit or loss from your stock investments.</CardDescription>\n      </CardHeader>\n      <form onSubmit={form.handleSubmit(onSubmit)}>\n        <CardContent className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div>\n              <Label htmlFor=\"purchasePrice\">Purchase Price per Share ({currency.symbol})</Label>\n              <Input id=\"purchasePrice\" type=\"number\" step=\"any\" {...form.register('purchasePrice')} />\n              {form.formState.errors.purchasePrice && <p className=\"text-sm text-destructive mt-1\">{form.formState.errors.purchasePrice.message}</p>}\n            </div>\n            <div>\n              <Label htmlFor=\"sellingPrice\">Selling Price per Share ({currency.symbol})</Label>\n              <Input id=\"sellingPrice\" type=\"number\" step=\"any\" {...form.register('sellingPrice')} />\n              {form.formState.errors.sellingPrice && <p className=\"text-sm text-destructive mt-1\">{form.formState.errors.sellingPrice.message}</p>}\n            </div>\n          </div>\n          <div>\n            <Label htmlFor=\"shares\">Number of Shares</Label>\n            <Input id=\"shares\" type=\"number\" {...form.register('shares')} />\n            {form.formState.errors.shares && <p className=\"text-sm text-destructive mt-1\">{form.formState.errors.shares.message}</p>}\n          </div>\n          <div>\n            <Label htmlFor=\"currency-toggle\">Currency</Label>\n            <CurrencyToggle\n              id=\"currency-toggle\"\n              selectedCurrency={currency}\n              onCurrencyChange={(newCurrency) => {\n                setCurrency(newCurrency);\n                 if (result) {\n                 }\n              }}\n            />\n          </div>\n        </CardContent>\n        <CardFooter>\n          <Button type=\"submit\" className=\"w-full md:w-auto\">Calculate</Button>\n        </CardFooter>\n      </form>\n\n      {result && (\n        <div className=\"p-6 border-t\">\n          <h3 className=\"text-xl font-semibold mb-4 font-headline\">Results</h3>\n          <Table className=\"mb-6\">\n            <TableBody>\n              <TableRow>\n                <TableCell className=\"font-medium\">Total Investment</TableCell>\n                <TableCell className=\"text-right\">{currency.symbol}{result.totalInvestment.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}</TableCell>\n              </TableRow>\n              <TableRow>\n                <TableCell className=\"font-medium\">Total Return Value</TableCell>\n                <TableCell className=\"text-right\">{currency.symbol}{result.totalReturnValue.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}</TableCell>\n              </TableRow>\n              <TableRow>\n                <TableCell className=\"font-medium\">Profit/Loss</TableCell>\n                <TableCell className={`text-right font-semibold ${result.profitLoss >= 0 ? 'text-green-600' : 'text-destructive'}`}>{currency.symbol}{result.profitLoss.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}</TableCell>\n              </TableRow>\n              <TableRow>\n                <TableCell className=\"font-medium\">Return Percentage</TableCell>\n                <TableCell className={`text-right font-semibold ${result.returnPercentage >= 0 ? 'text-green-600' : 'text-destructive'}`}>{result.returnPercentage.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}%</TableCell>\n              </TableRow>\n            </TableBody>\n          </Table>\n\n          {result.barChartData && result.barChartData.length > 0 && (\n            <div className=\"my-8\">\n              <h4 className=\"text-lg font-semibold mb-2 text-center font-headline\">Investment vs. Return Value</h4>\n              <div className=\"h-80 md:h-96\">\n                <ChartContainer config={barChartConfig} className=\"w-full h-full\">\n                  <BarChart accessibilityLayer data={result.barChartData} margin={{ top: 5, right: 20, left: 20, bottom: 5 }}>\n                    <CartesianGrid vertical={false} strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"name\" tickLine={false} axisLine={false} tickMargin={8} />\n                    <YAxis \n                      tickLine={false} \n                      axisLine={false} \n                      tickMargin={8}\n                      tickFormatter={(value) => `${currency.symbol}${value.toLocaleString()}`}\n                    />\n                    <ChartTooltip \n                      content={<CustomBarTooltip />} \n                      cursorStyle={{ fill: \"hsl(var(--muted))\", opacity: 0.5 }}\n                    />\n                    <Bar dataKey=\"value\" radius={4} barSize={30}>\n                      {result.barChartData.map((entry) => (\n                        <Cell key={`cell-bar-${entry.name}`} fill={entry.fill} />\n                      ))}\n                    </Bar>\n                  </BarChart>\n                </ChartContainer>\n              </div>\n            </div>\n          )}\n\n          {result.pieChartData && result.pieChartData.length > 0 && result.pieChartConfig && (\n            <div className=\"my-8\">\n              <h4 className=\"text-lg font-semibold mb-2 text-center font-headline\">Breakdown</h4>\n              <div className=\"h-80 md:h-96 flex justify-center\">\n                <ChartContainer config={result.pieChartConfig} className=\"aspect-square max-h-[300px] sm:max-h-[350px]\">\n                  <PieChart>\n                    <ChartTooltip \n                      content={<CustomPieTooltip currency={currency}/>}\n                      cursor={{ fill: \"hsl(var(--muted))\", opacity: 0.3 }}\n                    />\n                    <Pie\n                      data={result.pieChartData}\n                      dataKey=\"value\"\n                      nameKey=\"name\"\n                      cx=\"50%\"\n                      cy=\"50%\"\n                      outerRadius={100}\n                      labelLine={false}\n                      label={({ name, percent }) => `${name} (${(percent * 100).toFixed(0)}%)`}\n                    >\n                      {result.pieChartData.map((entry, index) => (\n                        <Cell key={`cell-pie-${index}`} fill={entry.fill} />\n                      ))}\n                    </Pie>\n                    <ChartLegend \n                      content={<ChartLegendContent nameKey=\"name\" />} \n                      verticalAlign=\"bottom\"\n                      align=\"center\"\n                      wrapperStyle={{paddingTop: \"20px\"}}\n                    />\n                  </PieChart>\n                </ChartContainer>\n              </div>\n            </div>\n          )}\n        </div>\n      )}\n    </Card>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1702, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/calculators/_components/DividendYieldCalculator.tsx"],"sourcesContent":["\n'use client';\n\nimport { useState } from 'react';\nimport { useForm, type SubmitHandler } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport * as z from 'zod';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';\nimport { CurrencyToggle, AVAILABLE_CURRENCIES, type Currency } from '@/components/shared/CurrencyToggle';\nimport { PieChart, Pie, Cell, TooltipProps } from 'recharts';\nimport { ChartConfig, ChartContainer, ChartTooltip, ChartTooltipContent, ChartLegend, ChartLegendContent } from \"@/components/ui/chart\";\nimport type { TooltipPayload } from 'recharts';\n\n\nconst formSchema = z.object({\n  annualDividendPerShare: z.coerce.number().min(0, \"Annual dividend must be non-negative\"),\n  currentMarketPrice: z.coerce.number().min(0.01, \"Market price must be greater than 0\"),\n});\ntype FormData = z.infer<typeof formSchema>;\n\ninterface PieChartDataPoint {\n  name: string;\n  value: number; // Will store percentage for this chart\n  fill: string;\n}\n\ninterface CalculationResult {\n  dividendYield: number;\n  pieChartData: PieChartDataPoint[];\n  pieChartConfig: ChartConfig;\n}\n\nexport function DividendYieldCalculator() { \n  const [result, setResult] = useState<CalculationResult | null>(null);\n  const [currency, setCurrency] = useState<Currency>(AVAILABLE_CURRENCIES.find(c => c.value === 'USD') || AVAILABLE_CURRENCIES[0]);\n\n  const form = useForm<FormData>({\n    resolver: zodResolver(formSchema),\n    defaultValues: { annualDividendPerShare: 5, currentMarketPrice: 100 },\n  });\n\n  const onSubmit: SubmitHandler<FormData> = (data) => {\n    const dividendYield = (data.annualDividendPerShare / data.currentMarketPrice) * 100;\n    const yieldPercentage = parseFloat(dividendYield.toFixed(2));\n    const remainingPercentage = parseFloat((100 - yieldPercentage).toFixed(2));\n\n    const pieChartData: PieChartDataPoint[] = [\n      { name: 'Dividend Yield', value: yieldPercentage, fill: 'hsl(var(--chart-1))' },\n      { name: 'Price (Non-Yield Portion)', value: remainingPercentage > 0 ? remainingPercentage : 0, fill: 'hsl(var(--chart-2))' },\n    ].filter(d => d.value > 0.009);\n\n    const pieChartConfig: ChartConfig = {\n      'Dividend Yield': { label: 'Dividend Yield (%)', color: 'hsl(var(--chart-1))' },\n      'Price (Non-Yield Portion)': { label: 'Price (Non-Yield Portion) (%)', color: 'hsl(var(--chart-2))' },\n    };\n    \n    setResult({ \n      dividendYield: yieldPercentage,\n      pieChartData,\n      pieChartConfig,\n    });\n  };\n\n  interface CustomPieTooltipProps extends TooltipProps<number, string> {}\n\n  const CustomPieTooltip = ({ active, payload }: CustomPieTooltipProps) => {\n    if (active && payload && payload.length) {\n      const data = payload[0].payload as PieChartDataPoint;\n      return (\n        <div className=\"p-2 text-sm bg-background/90 border border-border rounded-md shadow-lg\">\n          <p className=\"font-bold mb-1\" style={{ color: data.fill }}>{data.name}</p>\n          <p>{`Percentage: ${data.value.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}%`}</p>\n        </div>\n      );\n    }\n    return null;\n  };\n\n\n  return (\n    <Card className=\"shadow-lg\">\n      <CardHeader>\n        <CardTitle className=\"font-headline text-2xl\">Dividend Yield Calculator</CardTitle>\n        <CardDescription>Determine the dividend yield of a stock.</CardDescription>\n      </CardHeader>\n      <form onSubmit={form.handleSubmit(onSubmit)}>\n        <CardContent className=\"space-y-6\">\n          <div>\n            <Label htmlFor=\"annualDividendPerShare\">Annual Dividend per Share ({currency.symbol})</Label>\n            <Input id=\"annualDividendPerShare\" type=\"number\" step=\"any\" {...form.register('annualDividendPerShare')} />\n            {form.formState.errors.annualDividendPerShare && <p className=\"text-sm text-destructive mt-1\">{form.formState.errors.annualDividendPerShare.message}</p>}\n          </div>\n          <div>\n            <Label htmlFor=\"currentMarketPrice\">Current Market Price per Share ({currency.symbol})</Label>\n            <Input id=\"currentMarketPrice\" type=\"number\" step=\"any\" {...form.register('currentMarketPrice')} />\n            {form.formState.errors.currentMarketPrice && <p className=\"text-sm text-destructive mt-1\">{form.formState.errors.currentMarketPrice.message}</p>}\n          </div>\n          <div>\n            <Label htmlFor=\"currency-toggle\">Currency</Label>\n            <CurrencyToggle\n              id=\"currency-toggle\"\n              selectedCurrency={currency}\n              onCurrencyChange={(newCurrency) => {\n                setCurrency(newCurrency);\n                 if (form.formState.isSubmitted && result) {\n                   onSubmit(form.getValues());\n                }\n              }}\n            />\n          </div>\n        </CardContent>\n        <CardFooter>\n          <Button type=\"submit\" className=\"w-full md:w-auto\">Calculate</Button>\n        </CardFooter>\n      </form>\n\n      {result && (\n        <div className=\"p-6 border-t\">\n          <h3 className=\"text-xl font-semibold mb-4 font-headline\">Results</h3>\n          <p className=\"mb-6\"><strong>Dividend Yield:</strong> {result.dividendYield.toLocaleString()}%</p>\n\n           {result.pieChartData && result.pieChartData.length > 0 && result.pieChartConfig && (\n            <div className=\"my-8\">\n              <h4 className=\"text-lg font-semibold mb-2 text-center font-headline\">Yield vs. Price Portion</h4>\n              <div className=\"h-80 md:h-96 flex justify-center max-h-[300px] sm:max-h-[350px]\">\n                <ChartContainer config={result.pieChartConfig} className=\"aspect-square w-full h-full\">\n                  <PieChart>\n                    <ChartTooltip \n                      content={<CustomPieTooltip />}\n                      cursor={{ fill: \"hsl(var(--muted))\", opacity: 0.3 }}\n                    />\n                    <Pie\n                      data={result.pieChartData}\n                      dataKey=\"value\"\n                      nameKey=\"name\"\n                      cx=\"50%\"\n                      cy=\"50%\"\n                      outerRadius={100}\n                      innerRadius={50}\n                      labelLine={false}\n                      label={({ name, value }) => `${name} (${value.toFixed(0)}%)`}\n                    >\n                      {result.pieChartData.map((entry, index) => (\n                        <Cell key={`cell-pie-${index}`} fill={entry.fill} />\n                      ))}\n                    </Pie>\n                     <ChartLegend \n                        content={<ChartLegendContent nameKey=\"name\" />} \n                        verticalAlign=\"bottom\"\n                        align=\"center\"\n                        wrapperStyle={{paddingTop: \"20px\"}}\n                    />\n                  </PieChart>\n                </ChartContainer>\n              </div>\n            </div>\n          )}\n        </div>\n      )}\n    </Card>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 2123, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/calculators/_components/RiskRewardRatioCalculator.tsx"],"sourcesContent":["\n'use client';\n\nimport { useState } from 'react';\nimport { useForm, type SubmitHandler } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport * as z from 'zod';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';\nimport { CurrencyToggle, AVAILABLE_CURRENCIES, type Currency } from '@/components/shared/CurrencyToggle';\nimport { PieChart, Pie, Cell, TooltipProps } from 'recharts';\nimport { ChartConfig, ChartContainer, ChartTooltip, ChartTooltipContent, ChartLegend, ChartLegendContent } from \"@/components/ui/chart\"\nimport type { TooltipPayload } from 'recharts'; // Added this import\n\nconst formSchema = z.object({\n  potentialProfit: z.coerce.number().min(0.01, \"Potential profit must be greater than 0\"),\n  potentialLoss: z.coerce.number().min(0.01, \"Potential loss must be greater than 0\"),\n});\ntype FormData = z.infer<typeof formSchema>;\n\ninterface PieChartDataPoint {\n  name: string;\n  value: number;\n  fill: string;\n}\n\ninterface CalculationResult {\n  riskRewardRatio: string; // Display as \"1 : X\"\n  pieChartData: PieChartDataPoint[];\n  pieChartConfig: ChartConfig;\n}\n\nexport function RiskRewardRatioCalculator() { \n  const [result, setResult] = useState<CalculationResult | null>(null);\n  const [currency, setCurrency] = useState<Currency>(AVAILABLE_CURRENCIES.find(c => c.value === 'USD') || AVAILABLE_CURRENCIES[0]);\n\n  const form = useForm<FormData>({\n    resolver: zodResolver(formSchema),\n    defaultValues: { potentialProfit: 30, potentialLoss: 10 },\n  });\n\n  const onSubmit: SubmitHandler<FormData> = (data) => {\n    const ratio = data.potentialProfit / data.potentialLoss;\n\n    const pieChartData: PieChartDataPoint[] = [\n      { name: 'Potential Profit', value: data.potentialProfit, fill: 'hsl(var(--chart-1))' },\n      { name: 'Potential Loss', value: data.potentialLoss, fill: 'hsl(var(--chart-2))' },\n    ].filter(d => d.value > 0);\n\n    const pieChartConfig: ChartConfig = {\n      'Potential Profit': { label: `Potential Profit (${currency.symbol})`, color: 'hsl(var(--chart-1))' },\n      'Potential Loss': { label: `Potential Loss (${currency.symbol})`, color: 'hsl(var(--chart-2))' },\n    };\n    \n    setResult({ \n      riskRewardRatio: `1 : ${ratio.toFixed(2)}`,\n      pieChartData,\n      pieChartConfig,\n    });\n  };\n\n  interface CustomPieTooltipProps extends TooltipProps<number, string> {\n    currency: Currency;\n  }\n\n  const CustomPieTooltip = ({ active, payload, currency: currentCurrency }: CustomPieTooltipProps) => {\n    if (active && payload && payload.length) {\n      const data = payload[0].payload as PieChartDataPoint;\n      const percentage = payload[0].percent !== undefined ? (payload[0].percent * 100).toFixed(2) : null;\n      return (\n        <div className=\"p-2 text-sm bg-background/90 border border-border rounded-md shadow-lg\">\n          <p className=\"font-bold mb-1\" style={{ color: data.fill }}>{data.name}</p>\n          <p>{`Amount: ${currentCurrency.symbol}${data.value.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}`}</p>\n          {percentage && <p>{`Percentage of Total Compared: ${percentage}%`}</p>}\n        </div>\n      );\n    }\n    return null;\n  };\n\n\n  return (\n    <Card className=\"shadow-lg\">\n      <CardHeader>\n        <CardTitle className=\"font-headline text-2xl\">Risk/Reward Ratio Calculator</CardTitle>\n        <CardDescription>Assess the risk vs. potential reward of an investment or trade.</CardDescription>\n      </CardHeader>\n      <form onSubmit={form.handleSubmit(onSubmit)}>\n        <CardContent className=\"space-y-6\">\n          <div>\n            <Label htmlFor=\"potentialProfit\">Potential Profit ({currency.symbol})</Label>\n            <Input id=\"potentialProfit\" type=\"number\" step=\"any\" {...form.register('potentialProfit')} />\n            {form.formState.errors.potentialProfit && <p className=\"text-sm text-destructive mt-1\">{form.formState.errors.potentialProfit.message}</p>}\n          </div>\n          <div>\n            <Label htmlFor=\"potentialLoss\">Potential Loss (Risk) ({currency.symbol})</Label>\n            <Input id=\"potentialLoss\" type=\"number\" step=\"any\" {...form.register('potentialLoss')} />\n            {form.formState.errors.potentialLoss && <p className=\"text-sm text-destructive mt-1\">{form.formState.errors.potentialLoss.message}</p>}\n          </div>\n          <div>\n            <Label htmlFor=\"currency-toggle\">Currency for Input Fields</Label>\n            <CurrencyToggle\n              id=\"currency-toggle\"\n              selectedCurrency={currency}\n              onCurrencyChange={(newCurrency) => {\n                setCurrency(newCurrency);\n                // Re-calculate if form has values and result exists to update currency symbol in pieChartConfig\n                if (form.formState.isSubmitted && result) {\n                   onSubmit(form.getValues());\n                }\n              }}\n            />\n          </div>\n        </CardContent>\n        <CardFooter>\n          <Button type=\"submit\" className=\"w-full md:w-auto\">Calculate</Button>\n        </CardFooter>\n      </form>\n\n      {result && (\n        <div className=\"p-6 border-t\">\n          <h3 className=\"text-xl font-semibold mb-4 font-headline\">Results</h3>\n          <p className=\"mb-6\"><strong>Risk/Reward Ratio:</strong> {result.riskRewardRatio}</p>\n\n          {result.pieChartData && result.pieChartData.length > 0 && result.pieChartConfig && (\n            <div className=\"my-8\">\n              <h4 className=\"text-lg font-semibold mb-2 text-center font-headline\">Profit vs. Loss Comparison</h4>\n              <div className=\"h-80 md:h-96 flex justify-center max-h-[300px] sm:max-h-[350px]\">\n                <ChartContainer config={result.pieChartConfig} className=\"aspect-square w-full h-full\">\n                  <PieChart>\n                    <ChartTooltip \n                      content={<CustomPieTooltip currency={currency}/>}\n                      cursor={{ fill: \"hsl(var(--muted))\", opacity: 0.3 }}\n                    />\n                    <Pie\n                      data={result.pieChartData}\n                      dataKey=\"value\"\n                      nameKey=\"name\"\n                      cx=\"50%\"\n                      cy=\"50%\"\n                      outerRadius={100}\n                      labelLine={false}\n                      label={({ name, percent }) => `${name} (${(percent * 100).toFixed(0)}%)`}\n                    >\n                      {result.pieChartData.map((entry, index) => (\n                        <Cell key={`cell-pie-${index}`} fill={entry.fill} />\n                      ))}\n                    </Pie>\n                     <ChartLegend \n                        content={<ChartLegendContent nameKey=\"name\" />} \n                        verticalAlign=\"bottom\"\n                        align=\"center\"\n                        wrapperStyle={{paddingTop: \"20px\"}}\n                    />\n                  </PieChart>\n                </ChartContainer>\n              </div>\n            </div>\n          )}\n        </div>\n      )}\n    </Card>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 2551, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/calculators/_components/VolatilityCalculator.tsx"],"sourcesContent":["\n'use client';\n\nimport { useState } from 'react';\nimport { useForm, type SubmitHandler } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport * as z from 'zod';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';\nimport { CurrencyToggle, AVAILABLE_CURRENCIES, type Currency } from '@/components/shared/CurrencyToggle';\nimport { Table, TableBody, TableCell, TableRow } from '@/components/ui/table';\n\nconst formSchema = z.object({\n  historicalPrices: z.string().min(1, \"Please enter historical prices\"), // Comma-separated numbers\n});\ntype FormData = z.infer<typeof formSchema>;\n\ninterface CalculationResult {\n  volatility: number; \n  priceCount: number;\n  averagePrice: number;\n}\n\nexport function VolatilityCalculator() { \n  const [result, setResult] = useState<CalculationResult | null>(null);\n  const [currency, setCurrency] = useState<Currency>(AVAILABLE_CURRENCIES.find(c => c.value === 'USD') || AVAILABLE_CURRENCIES[0]);\n\n  const form = useForm<FormData>({\n    resolver: zodResolver(formSchema),\n    defaultValues: { historicalPrices: \"100,102,98,105,103\" },\n  });\n\n  const onSubmit: SubmitHandler<FormData> = (data) => {\n    const prices = data.historicalPrices.split(',').map(p => parseFloat(p.trim())).filter(p => !isNaN(p));\n    if (prices.length < 2) {\n        form.setError(\"historicalPrices\", { type: \"manual\", message: \"Please enter at least two valid prices.\"});\n        setResult(null);\n        return;\n    }\n    // Placeholder: Real volatility (e.g., standard deviation of returns) is more complex.\n    // This is a simplified version for UI demonstration.\n    const averagePrice = prices.reduce((sum, price) => sum + price, 0) / prices.length;\n    const variance = prices.reduce((sum, price) => sum + Math.pow(price - averagePrice, 2), 0) / prices.length;\n    const standardDeviation = Math.sqrt(variance);\n\n    setResult({ \n        volatility: parseFloat(standardDeviation.toFixed(2)), // Simplified: using standard deviation of prices\n        priceCount: prices.length,\n        averagePrice: parseFloat(averagePrice.toFixed(2)),\n    });\n  };\n\n  return (\n    <Card className=\"shadow-lg\">\n      <CardHeader>\n        <CardTitle className=\"font-headline text-2xl\">Volatility Calculator</CardTitle>\n        <CardDescription>Measure the volatility of an investment based on historical prices. (Simplified)</CardDescription>\n      </CardHeader>\n      <form onSubmit={form.handleSubmit(onSubmit)}>\n        <CardContent className=\"space-y-6\">\n          <div>\n            <Label htmlFor=\"historicalPrices\">Historical Prices ({currency.symbol}) (comma-separated)</Label>\n            <Textarea id=\"historicalPrices\" {...form.register('historicalPrices')} placeholder=\"e.g., 100,102,98,105,103\" />\n            {form.formState.errors.historicalPrices && <p className=\"text-sm text-destructive mt-1\">{form.formState.errors.historicalPrices.message}</p>}\n          </div>\n          <div>\n            <Label htmlFor=\"currency-toggle\">Currency (for display context)</Label>\n            <CurrencyToggle\n              id=\"currency-toggle\"\n              selectedCurrency={currency}\n              onCurrencyChange={setCurrency}\n            />\n          </div>\n        </CardContent>\n        <CardFooter>\n          <Button type=\"submit\" className=\"w-full md:w-auto\">Calculate</Button>\n        </CardFooter>\n      </form>\n\n      {result && (\n        <div className=\"p-6 border-t\">\n          <h3 className=\"text-xl font-semibold mb-4 font-headline\">Results (Simplified)</h3>\n          <Table>\n            <TableBody>\n              <TableRow>\n                <TableCell className=\"font-medium\">Calculated Volatility (Std. Dev. of Prices)</TableCell>\n                <TableCell className=\"text-right\">{currency.symbol}{result.volatility.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}</TableCell>\n              </TableRow>\n              <TableRow>\n                <TableCell className=\"font-medium\">Number of Prices Analyzed</TableCell>\n                <TableCell className=\"text-right\">{result.priceCount}</TableCell>\n              </TableRow>\n              <TableRow>\n                <TableCell className=\"font-medium\">Average Price</TableCell>\n                <TableCell className=\"text-right\">{currency.symbol}{result.averagePrice.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}</TableCell>\n              </TableRow>\n            </TableBody>\n          </Table>\n        </div>\n      )}\n    </Card>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 2859, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/calculators/_components/BitcoinRoiCalculator.tsx"],"sourcesContent":["\n'use client';\n\nimport { useState } from 'react';\nimport { useForm, type SubmitHandler } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport * as z from 'zod';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';\nimport { CurrencyToggle, AVAILABLE_CURRENCIES, type Currency } from '@/components/shared/CurrencyToggle';\nimport { Table, TableBody, TableCell, TableRow } from '@/components/ui/table';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, TooltipProps, Cell } from 'recharts';\nimport { ChartConfig, ChartContainer, ChartTooltip, ChartTooltipContent } from \"@/components/ui/chart\";\nimport type { TooltipPayload } from 'recharts';\n\nconst formSchema = z.object({\n  initialInvestment: z.coerce.number().min(0.01, \"Initial investment must be greater than 0\"),\n  currentValue: z.coerce.number().min(0, \"Current value must be non-negative\"),\n});\ntype FormData = z.infer<typeof formSchema>;\n\ninterface ChartDataPoint {\n  name: string;\n  value: number;\n  fill: string;\n}\n\ninterface CalculationResult {\n  initialInvestment: number;\n  currentValue: number;\n  roiPercentage: number;\n  profitLoss: number;\n  chartData: ChartDataPoint[];\n}\n\nexport function BitcoinRoiCalculator() { \n  const [result, setResult] = useState<CalculationResult | null>(null);\n  const [currency, setCurrency] = useState<Currency>(AVAILABLE_CURRENCIES.find(c => c.value === 'USD') || AVAILABLE_CURRENCIES[0]);\n\n  const form = useForm<FormData>({\n    resolver: zodResolver(formSchema),\n    defaultValues: { initialInvestment: 1000, currentValue: 1500 },\n  });\n  \n  const chartConfig = {\n    initialInvestment: { label: `Initial Investment (${currency.symbol})`, color: \"hsl(var(--chart-2))\" },\n    currentValue: { label: `Current Value (${currency.symbol})`, color: \"hsl(var(--chart-1))\" },\n  } satisfies ChartConfig;\n\n  const onSubmit: SubmitHandler<FormData> = (data) => {\n    const profitLoss = data.currentValue - data.initialInvestment;\n    const roiPercentage = data.initialInvestment !== 0 ? (profitLoss / data.initialInvestment) * 100 : 0;\n\n    const chartData: ChartDataPoint[] = [\n      { name: 'Initial Investment', value: parseFloat(data.initialInvestment.toFixed(2)), fill: chartConfig.initialInvestment.color },\n      { name: 'Current Value', value: parseFloat(data.currentValue.toFixed(2)), fill: chartConfig.currentValue.color },\n    ];\n\n    setResult({ \n      initialInvestment: data.initialInvestment,\n      currentValue: data.currentValue,\n      roiPercentage: parseFloat(roiPercentage.toFixed(2)),\n      profitLoss: parseFloat(profitLoss.toFixed(2)),\n      chartData,\n    });\n  };\n\n  const CustomTooltip = ({ active, payload }: TooltipProps<number, string>) => {\n    if (active && payload && payload.length) {\n      const data = payload[0];\n      return (\n        <div className=\"p-2 text-sm bg-background/90 border border-border rounded-md shadow-lg\">\n          <p className=\"font-bold mb-1\" style={{ color: data.payload.fill }}>{data.name}</p>\n          <p>{`Value: ${currency.symbol}${data.value?.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}`}</p>\n        </div>\n      );\n    }\n    return null;\n  };\n\n  return (\n    <Card className=\"shadow-lg\">\n      <CardHeader>\n        <CardTitle className=\"font-headline text-2xl\">Bitcoin ROI Calculator</CardTitle>\n        <CardDescription>Calculate your Return on Investment for Bitcoin or other crypto assets.</CardDescription>\n      </CardHeader>\n      <form onSubmit={form.handleSubmit(onSubmit)}>\n        <CardContent className=\"space-y-6\">\n          <div>\n            <Label htmlFor=\"initialInvestment\">Initial Investment ({currency.symbol})</Label>\n            <Input id=\"initialInvestment\" type=\"number\" step=\"any\" {...form.register('initialInvestment')} />\n            {form.formState.errors.initialInvestment && <p className=\"text-sm text-destructive mt-1\">{form.formState.errors.initialInvestment.message}</p>}\n          </div>\n          <div>\n            <Label htmlFor=\"currentValue\">Current Value ({currency.symbol})</Label>\n            <Input id=\"currentValue\" type=\"number\" step=\"any\" {...form.register('currentValue')} />\n            {form.formState.errors.currentValue && <p className=\"text-sm text-destructive mt-1\">{form.formState.errors.currentValue.message}</p>}\n          </div>\n          <div>\n            <Label htmlFor=\"currency-toggle\">Currency</Label>\n            <CurrencyToggle\n              id=\"currency-toggle\"\n              selectedCurrency={currency}\n              onCurrencyChange={setCurrency}\n            />\n          </div>\n        </CardContent>\n        <CardFooter>\n          <Button type=\"submit\" className=\"w-full md:w-auto\">Calculate</Button>\n        </CardFooter>\n      </form>\n\n      {result && (\n        <div className=\"p-6 border-t\">\n          <h3 className=\"text-xl font-semibold mb-4 font-headline\">Results</h3>\n          <Table className=\"mb-6\">\n            <TableBody>\n              <TableRow>\n                <TableCell className=\"font-medium\">Initial Investment</TableCell>\n                <TableCell className=\"text-right\">{currency.symbol}{result.initialInvestment.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}</TableCell>\n              </TableRow>\n              <TableRow>\n                <TableCell className=\"font-medium\">Current Value</TableCell>\n                <TableCell className=\"text-right\">{currency.symbol}{result.currentValue.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}</TableCell>\n              </TableRow>\n              <TableRow>\n                <TableCell className=\"font-medium\">Profit/Loss</TableCell>\n                <TableCell className={`text-right font-semibold ${result.profitLoss >= 0 ? 'text-green-600' : 'text-destructive'}`}>{currency.symbol}{result.profitLoss.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}</TableCell>\n              </TableRow>\n              <TableRow>\n                <TableCell className=\"font-medium\">ROI Percentage</TableCell>\n                <TableCell className={`text-right font-semibold ${result.roiPercentage >= 0 ? 'text-green-600' : 'text-destructive'}`}>{result.roiPercentage.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}%</TableCell>\n              </TableRow>\n            </TableBody>\n          </Table>\n\n          {result.chartData && result.chartData.length > 0 && (\n            <div className=\"my-8 h-80 md:h-96\">\n              <ChartContainer config={chartConfig} className=\"w-full h-full\">\n                <BarChart accessibilityLayer data={result.chartData} margin={{ top: 5, right: 20, left: 20, bottom: 5 }}>\n                  <CartesianGrid vertical={false} strokeDasharray=\"3 3\" />\n                  <XAxis dataKey=\"name\" tickLine={false} axisLine={false} tickMargin={8} />\n                  <YAxis \n                    tickLine={false} \n                    axisLine={false} \n                    tickMargin={8}\n                    tickFormatter={(value) => `${currency.symbol}${value.toLocaleString()}`}\n                  />\n                   <ChartTooltip \n                    content={<CustomTooltip />} \n                    cursorStyle={{ fill: \"hsl(var(--muted))\", opacity: 0.5 }}\n                  />\n                  <Bar dataKey=\"value\" radius={4} barSize={30}>\n                    {result.chartData.map((entry) => (\n                      <Cell key={`cell-${entry.name}`} fill={entry.fill} />\n                    ))}\n                  </Bar>\n                </BarChart>\n              </ChartContainer>\n            </div>\n          )}\n        </div>\n      )}\n    </Card>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 3392, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/calculators/_components/CryptoDcaCalculator.tsx"],"sourcesContent":["\n'use client';\n\nimport { useState } from 'react';\nimport { useForm, type SubmitHandler } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport * as z from 'zod';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';\nimport { CurrencyToggle, AVAILABLE_CURRENCIES, type Currency } from '@/components/shared/CurrencyToggle';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, TooltipProps } from 'recharts';\nimport { ChartConfig, ChartContainer, ChartTooltip, ChartTooltipContent, ChartLegend, ChartLegendContent } from \"@/components/ui/chart\"\nimport type { TooltipPayload } from 'recharts';\n\nconst formSchema = z.object({\n  periodicInvestment: z.coerce.number().min(1, \"Periodic investment amount must be at least 1\"),\n  investmentFrequency: z.enum(['monthly', 'quarterly', 'annually']).default('annually'), // Default to annually\n  investmentPeriodYears: z.coerce.number().int().min(1, \"Investment period must be at least 1 year\").max(50),\n  averagePrice: z.coerce.number().min(0.000001, \"Estimated average crypto price must be greater than 0\"),\n  expectedAnnualReturn: z.coerce.number().min(0, \"Expected annual return rate must be non-negative\").max(100).optional().default(0),\n});\ntype FormData = z.infer<typeof formSchema>;\n\ninterface AnnualDcaDataPoint {\n  year: number;\n  totalInvested: number; // Cumulative amount invested\n  totalCryptoAcquired: number; // Cumulative crypto acquired\n  portfolioValue: number; // Market value of acquired crypto at year end, considering growth\n}\n\ninterface CalculationResult {\n  finalTotalInvested: number;\n  finalTotalCryptoAcquired: number;\n  finalAverageCostPerUnit: number;\n  finalPortfolioValue: number;\n  annualBreakdown: AnnualDcaDataPoint[];\n}\n\nexport function CryptoDcaCalculator() { \n  const [result, setResult] = useState<CalculationResult | null>(null);\n  const [currency, setCurrency] = useState<Currency>(AVAILABLE_CURRENCIES.find(c => c.value === 'USD') || AVAILABLE_CURRENCIES[0]);\n\n  const form = useForm<FormData>({\n    resolver: zodResolver(formSchema),\n    defaultValues: { periodicInvestment: 100, investmentFrequency: 'annually', investmentPeriodYears: 5, averagePrice: 30000, expectedAnnualReturn: 5 },\n  });\n\n  const onSubmit: SubmitHandler<FormData> = (data) => {\n    const { periodicInvestment, investmentFrequency, investmentPeriodYears, averagePrice, expectedAnnualReturn } = data;\n    \n    let periodsPerYear = 12;\n    if (investmentFrequency === 'quarterly') periodsPerYear = 4;\n    if (investmentFrequency === 'annually') periodsPerYear = 1;\n\n    const annualReturnRateDecimal = (expectedAnnualReturn || 0) / 100;\n    // Calculate effective periodic rate for asset growth if annual rate is provided\n    const periodicAssetGrowthRate = periodsPerYear > 0 && annualReturnRateDecimal > 0 \n      ? Math.pow(1 + annualReturnRateDecimal, 1 / periodsPerYear) - 1\n      : 0;\n\n    const annualBreakdown: AnnualDcaDataPoint[] = [];\n    let cumulativeInvested = 0;\n    let cumulativeCrypto = 0;\n    let portfolioMarketValue = 0; \n\n    for (let year = 1; year <= investmentPeriodYears; year++) {\n      for (let p = 1; p <= periodsPerYear; p++) {\n        // 1. Grow existing crypto holdings' market value for one period\n        portfolioMarketValue *= (1 + periodicAssetGrowthRate);\n\n        // 2. Make new investment and acquire crypto\n        cumulativeInvested += periodicInvestment;\n        const cryptoBoughtThisPeriod = periodicInvestment / averagePrice; // Crypto bought at fixed 'averagePrice'\n        cumulativeCrypto += cryptoBoughtThisPeriod;\n\n        // 3. Add the cost value of newly bought crypto to portfolioMarketValue\n        // This newly bought crypto will start appreciating from the next period\n        portfolioMarketValue += cryptoBoughtThisPeriod * averagePrice;\n      }\n\n      annualBreakdown.push({\n        year,\n        totalInvested: parseFloat(cumulativeInvested.toFixed(2)),\n        totalCryptoAcquired: parseFloat(cumulativeCrypto.toFixed(8)),\n        portfolioValue: parseFloat(portfolioMarketValue.toFixed(2)),\n      });\n    }\n    \n    const finalTotalInvested = cumulativeInvested;\n    const finalTotalCryptoAcquired = cumulativeCrypto;\n    const finalAverageCostPerUnit = finalTotalInvested > 0 && finalTotalCryptoAcquired > 0 ? finalTotalInvested / finalTotalCryptoAcquired : 0;\n    const finalPortfolioValue = annualBreakdown.length > 0 ? annualBreakdown[annualBreakdown.length - 1].portfolioValue : 0;\n\n    setResult({ \n        finalTotalInvested: parseFloat(finalTotalInvested.toFixed(2)),\n        finalTotalCryptoAcquired: parseFloat(finalTotalCryptoAcquired.toFixed(8)),\n        finalAverageCostPerUnit: parseFloat(finalAverageCostPerUnit.toFixed(2)),\n        finalPortfolioValue: parseFloat(finalPortfolioValue.toFixed(2)),\n        annualBreakdown,\n    });\n  };\n\n  const chartConfig = {\n    portfolioValue: {\n      label: `Portfolio Value (${currency.symbol})`,\n      color: \"hsl(var(--chart-1))\",\n    },\n    totalInvested: {\n      label: `Total Invested (${currency.symbol})`,\n      color: \"hsl(var(--chart-2))\",\n    },\n  } satisfies ChartConfig;\n\n  const CustomTooltip = ({ active, payload, label }: TooltipProps<number, string>) => {\n    if (active && payload && payload.length) {\n      const yearData = result?.annualBreakdown.find(d => d.year.toString() === label);\n      return (\n        <div className=\"p-2 text-sm bg-background/90 border border-border rounded-md shadow-lg\">\n          <p className=\"font-bold mb-1\">{`Year: ${label}`}</p>\n          {payload.map((pld: TooltipPayload<number, string>) => (\n            <p key={pld.dataKey} style={{ color: pld.color }}>\n              {`${pld.name}: ${currency.symbol}${pld.value?.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}`}\n            </p>\n          ))}\n           {yearData && (\n             <p style={{ color: \"hsl(var(--chart-3))\" }}>\n                {`Crypto Acquired: ${yearData.totalCryptoAcquired.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 8})} units`}\n             </p>\n          )}\n        </div>\n      );\n    }\n    return null;\n  };\n\n  return (\n    <Card className=\"shadow-lg\">\n      <CardHeader>\n        <CardTitle className=\"font-headline text-2xl\">Crypto DCA Calculator</CardTitle>\n        <CardDescription>Simulate Dollar Cost Averaging for crypto investments with annual growth projection.</CardDescription>\n      </CardHeader>\n      <form onSubmit={form.handleSubmit(onSubmit)}>\n        <CardContent className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div>\n              <Label htmlFor=\"periodicInvestment\">Periodic Investment Amount ({currency.symbol})</Label>\n              <Input id=\"periodicInvestment\" type=\"number\" step=\"any\" {...form.register('periodicInvestment')} />\n              {form.formState.errors.periodicInvestment && <p className=\"text-sm text-destructive mt-1\">{form.formState.errors.periodicInvestment.message}</p>}\n            </div>\n            <div>\n              <Label htmlFor=\"investmentFrequency\">Investment Frequency</Label>\n              <Select onValueChange={(value) => form.setValue('investmentFrequency', value as FormData['investmentFrequency'])} defaultValue={form.getValues('investmentFrequency')}>\n                  <SelectTrigger id=\"investmentFrequency\"><SelectValue /></SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"annually\">Annually</SelectItem>\n                    <SelectItem value=\"quarterly\">Quarterly</SelectItem>\n                    <SelectItem value=\"monthly\">Monthly</SelectItem>\n                  </SelectContent>\n              </Select>\n            </div>\n          </div>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div>\n              <Label htmlFor=\"investmentPeriodYears\">Investment Period (Years)</Label>\n              <Input id=\"investmentPeriodYears\" type=\"number\" {...form.register('investmentPeriodYears')} />\n              {form.formState.errors.investmentPeriodYears && <p className=\"text-sm text-destructive mt-1\">{form.formState.errors.investmentPeriodYears.message}</p>}\n            </div>\n            <div>\n              <Label htmlFor=\"averagePrice\">Assumed Crypto Purchase Price ({currency.symbol})</Label>\n              <Input id=\"averagePrice\" type=\"number\" step=\"any\" {...form.register('averagePrice')} />\n              {form.formState.errors.averagePrice && <p className=\"text-sm text-destructive mt-1\">{form.formState.errors.averagePrice.message}</p>}\n            </div>\n          </div>\n          <div>\n            <Label htmlFor=\"expectedAnnualReturn\">Expected Annual Crypto Return (%) (Optional)</Label>\n            <Input id=\"expectedAnnualReturn\" type=\"number\" step=\"any\" {...form.register('expectedAnnualReturn')} placeholder=\"e.g., 5 for 5%\"/>\n            {form.formState.errors.expectedAnnualReturn && <p className=\"text-sm text-destructive mt-1\">{form.formState.errors.expectedAnnualReturn.message}</p>}\n          </div>\n          <div>\n            <Label htmlFor=\"currency-toggle\">Currency</Label>\n            <CurrencyToggle\n              id=\"currency-toggle\"\n              selectedCurrency={currency}\n              onCurrencyChange={setCurrency}\n            />\n          </div>\n        </CardContent>\n        <CardFooter>\n          <Button type=\"submit\" className=\"w-full md:w-auto\">Calculate DCA</Button>\n        </CardFooter>\n      </form>\n\n      {result && result.annualBreakdown.length > 0 && (\n        <div className=\"p-6 border-t\">\n          <h3 className=\"text-xl font-semibold mb-4 font-headline\">Results</h3>\n          <p><strong>Final Total Invested:</strong> {currency.symbol}{result.finalTotalInvested.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}</p>\n          <p><strong>Final Total Crypto Acquired:</strong> {result.finalTotalCryptoAcquired.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 8})} units</p>\n          <p><strong>Final Average Cost per Unit:</strong> {currency.symbol}{result.finalAverageCostPerUnit.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}</p>\n          <p className=\"mb-6\"><strong>Estimated Final Portfolio Value:</strong> {currency.symbol}{result.finalPortfolioValue.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}</p>\n          \n          <div className=\"my-8 h-80 md:h-96\">\n             <ChartContainer config={chartConfig} className=\"w-full h-full\">\n                <LineChart accessibilityLayer data={result.annualBreakdown} margin={{ top: 5, right: 20, left: 20, bottom: 5 }}>\n                    <CartesianGrid vertical={false} strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"year\" unit=\"yr\" tickLine={false} axisLine={false} tickMargin={8} />\n                    <YAxis \n                        tickLine={false} \n                        axisLine={false} \n                        tickMargin={8}\n                        tickFormatter={(val) => `${currency.symbol}${val.toLocaleString()}`} \n                    />\n                    <ChartTooltip content={<CustomTooltip />} cursorStyle={{strokeDasharray: '3 3', strokeWidth: 1.5, fillOpacity: 0.1}}/>\n                    <ChartLegend content={<ChartLegendContent />} />\n                    <Line dataKey=\"portfolioValue\" type=\"monotone\" name={chartConfig.portfolioValue.label} stroke={chartConfig.portfolioValue.color} strokeWidth={2.5} dot={false} activeDot={{ r: 6 }} />\n                    <Line dataKey=\"totalInvested\" type=\"monotone\" name={chartConfig.totalInvested.label} stroke={chartConfig.totalInvested.color} strokeWidth={2.5} dot={false} activeDot={{ r: 6 }} />\n                </LineChart>\n            </ChartContainer>\n          </div>\n\n          <h4 className=\"text-lg font-semibold mb-2 font-headline\">Annual Breakdown</h4>\n          <div className=\"max-h-96 overflow-y-auto\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Year</TableHead>\n                  <TableHead>Total Invested</TableHead>\n                  <TableHead>Total Crypto Acquired</TableHead>\n                  <TableHead className=\"text-right\">Portfolio Market Value</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {result.annualBreakdown.map((item) => (\n                  <TableRow key={item.year}>\n                    <TableCell>{item.year}</TableCell>\n                    <TableCell>{currency.symbol}{item.totalInvested.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}</TableCell>\n                    <TableCell>{item.totalCryptoAcquired.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 8})} units</TableCell>\n                    <TableCell className=\"text-right\">{currency.symbol}{item.portfolioValue.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}</TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </div>\n           <p className=\"text-xs mt-2 text-muted-foreground\">Note: Assumes a constant crypto purchase price and periodic compounding of returns on the crypto's market value.</p>\n        </div>\n      )}\n    </Card>\n  );\n}\n\n\n    \n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 4237, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/calculators/_components/BlockchainFeeCalculator.tsx"],"sourcesContent":["\n'use client';\n\nimport { useState } from 'react';\nimport { useForm, type SubmitHandler } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport * as z from 'zod';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';\nimport { CurrencyToggle, AVAILABLE_CURRENCIES, type Currency } from '@/components/shared/CurrencyToggle';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, TooltipProps, Cell } from 'recharts';\nimport { ChartConfig, ChartContainer, ChartTooltip, ChartTooltipContent } from \"@/components/ui/chart\";\nimport type { TooltipPayload } from 'recharts';\n\nconst formSchema = z.object({\n  gasUnits: z.coerce.number().min(1, \"Gas units must be at least 1\"),\n  gasPrice: z.coerce.number().min(0.000000001, \"Gas price must be positive\"), // e.g., Gwei for Ethereum\n  network: z.enum(['ethereum', 'bitcoin', 'polygon', 'solana']), // Example networks\n});\ntype FormData = z.infer<typeof formSchema>;\n\ninterface ChartDataPoint {\n  name: string;\n  value: number;\n  fill: string;\n}\n\ninterface CalculationResult {\n  estimatedFee: number; // In native currency of the network (e.g., ETH, BTC)\n  estimatedFeeFiat: number; // In selected display currency\n  networkUsed: FormData['network'];\n  chartData: ChartDataPoint[];\n  chartConfig: ChartConfig;\n}\n\n// Placeholder conversion rates (network native token to USD)\nconst NETWORK_TO_USD_RATES: Record<string, number> = {\n  ethereum: 2000,  // 1 ETH = 2000 USD\n  bitcoin: 30000, // 1 BTC = 30000 USD (for transaction fee context if applicable)\n  polygon: 0.8,   // 1 MATIC = 0.8 USD\n  solana: 20,     // 1 SOL = 20 USD\n};\nconst NETWORK_CURRENCY_SYMBOL: Record<string, string> = {\n  ethereum: 'ETH',\n  bitcoin: 'BTC',\n  polygon: 'MATIC',\n  solana: 'SOL',\n};\n\n// Placeholder conversion rates from USD to other display currencies\n// Format: 1 USD = X TargetCurrency\nconst USD_TO_SELECTED_FIAT_RATES: Record<string, number> = {\n  USD: 1.00,\n  EUR: 0.93,\n  GBP: 0.79,\n  INR: 83.50,\n  JPY: 157.00,\n  AUD: 1.50,\n  CAD: 1.37,\n  CHF: 0.90,\n  CNY: 7.25,\n};\n\n\nexport function BlockchainFeeCalculator() {\n  const [result, setResult] = useState<CalculationResult | null>(null);\n  const [currency, setCurrency] = useState<Currency>(AVAILABLE_CURRENCIES.find(c => c.value === 'USD') || AVAILABLE_CURRENCIES[0]);\n\n  const form = useForm<FormData>({\n    resolver: zodResolver(formSchema),\n    defaultValues: { gasUnits: 21000, gasPrice: 20, network: 'ethereum' },\n  });\n\n  const onSubmit: SubmitHandler<FormData> = (data) => {\n    // Simplified fee calculation. Real fees are complex and dynamic.\n    // Bitcoin fees work differently (sat/vB). This is a generic placeholder.\n    let feeInNativeToken = 0;\n    if (data.network === 'ethereum' || data.network === 'polygon') {\n      feeInNativeToken = (data.gasUnits * data.gasPrice) / 1_000_000_000; // Gwei to ETH/MATIC\n    } else if (data.network === 'solana') {\n      feeInNativeToken = (data.gasUnits * data.gasPrice) / 1_000_000_000; // Lamports to SOL (assuming gasPrice in lamports/CU)\n    } else { // Bitcoin placeholder\n      feeInNativeToken = (data.gasUnits * data.gasPrice) / 100_000_000; // Assuming gasUnits = vBytes, gasPrice = satoshis/vByte\n    }\n\n    const nativeToUsdRate = NETWORK_TO_USD_RATES[data.network] || 1;\n    const estimatedFeeInUsd = feeInNativeToken * nativeToUsdRate;\n\n    const usdToSelectedRate = USD_TO_SELECTED_FIAT_RATES[currency.value] || USD_TO_SELECTED_FIAT_RATES['USD'];\n    const estimatedFeeFiat = estimatedFeeInUsd * usdToSelectedRate;\n\n    const currentChartConfig: ChartConfig = {\n      nativeFee: { label: `Fee (${NETWORK_CURRENCY_SYMBOL[data.network]})`, color: \"hsl(var(--chart-1))\" },\n      fiatFee: { label: `Fee (${currency.symbol})`, color: \"hsl(var(--chart-2))\" },\n    };\n\n    const chartData: ChartDataPoint[] = [\n      { name: `Fee (${NETWORK_CURRENCY_SYMBOL[data.network]})`, value: parseFloat(feeInNativeToken.toFixed(8)), fill: currentChartConfig.nativeFee.color as string },\n      { name: `Fee (${currency.symbol})`, value: parseFloat(estimatedFeeFiat.toFixed(2)), fill: currentChartConfig.fiatFee.color as string },\n    ];\n\n    setResult({\n        estimatedFee: parseFloat(feeInNativeToken.toFixed(8)),\n        estimatedFeeFiat: parseFloat(estimatedFeeFiat.toFixed(2)),\n        networkUsed: data.network,\n        chartData,\n        chartConfig: currentChartConfig,\n    });\n  };\n\n  const CustomTooltip = ({ active, payload }: TooltipProps<number, string>) => {\n    if (active && payload && payload.length) {\n      const data = payload[0];\n      const value = data.value as number;\n      // Determine if it's the native token or fiat for formatting\n      const isNative = data.name?.includes(NETWORK_CURRENCY_SYMBOL[result?.networkUsed || 'ethereum']);\n      const decimalPlaces = isNative ? 8 : 2;\n      \n      return (\n        <div className=\"p-2 text-sm bg-background/90 border border-border rounded-md shadow-lg\">\n          <p className=\"font-bold mb-1\" style={{ color: data.payload.fill }}>{data.name}</p>\n          <p>{`Value: ${value.toLocaleString(undefined, {minimumFractionDigits: decimalPlaces, maximumFractionDigits: decimalPlaces})}`}</p>\n        </div>\n      );\n    }\n    return null;\n  };\n\n\n  return (\n    <Card className=\"shadow-lg\">\n      <CardHeader>\n        <CardTitle className=\"font-headline text-2xl\">Blockchain Fee Calculator</CardTitle>\n        <CardDescription>Estimate blockchain transaction fees. (Highly Simplified)</CardDescription>\n      </CardHeader>\n      <form onSubmit={form.handleSubmit(onSubmit)}>\n        <CardContent className=\"space-y-6\">\n          <div>\n            <Label htmlFor=\"network\">Blockchain Network</Label>\n            <Select onValueChange={(value) => form.setValue('network', value as FormData['network'])} defaultValue={form.getValues('network')}>\n              <SelectTrigger id=\"network\"><SelectValue placeholder=\"Select network\" /></SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"ethereum\">Ethereum (Gas Price in Gwei)</SelectItem>\n                <SelectItem value=\"bitcoin\">Bitcoin (Gas Price in sats/vB, Gas Units as vBytes)</SelectItem>\n                <SelectItem value=\"polygon\">Polygon (Gas Price in Gwei)</SelectItem>\n                <SelectItem value=\"solana\">Solana (Gas Price in lamports/CU)</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n          <div>\n            <Label htmlFor=\"gasUnits\">Gas Units / vBytes / Compute Units</Label>\n            <Input id=\"gasUnits\" type=\"number\" {...form.register('gasUnits')} />\n            {form.formState.errors.gasUnits && <p className=\"text-sm text-destructive mt-1\">{form.formState.errors.gasUnits.message}</p>}\n          </div>\n          <div>\n            <Label htmlFor=\"gasPrice\">Gas Price (Gwei / sats/vB / lamports/CU)</Label>\n            <Input id=\"gasPrice\" type=\"number\" step=\"any\" {...form.register('gasPrice')} />\n            {form.formState.errors.gasPrice && <p className=\"text-sm text-destructive mt-1\">{form.formState.errors.gasPrice.message}</p>}\n          </div>\n          <div>\n            <Label htmlFor=\"currency-toggle\">Display Fiat Currency</Label>\n            <CurrencyToggle\n              id=\"currency-toggle\"\n              selectedCurrency={currency}\n              onCurrencyChange={(newCurrency) => {\n                setCurrency(newCurrency);\n                if (form.formState.isSubmitted && result) {\n                  // Re-calculate if form has values and result exists to update currency symbol\n                  onSubmit(form.getValues());\n                }\n              }}\n            />\n          </div>\n        </CardContent>\n        <CardFooter>\n          <Button type=\"submit\" className=\"w-full md:w-auto\">Calculate</Button>\n        </CardFooter>\n      </form>\n\n      {result && result.chartData && result.chartConfig && (\n        <div className=\"p-6 border-t\">\n          <h3 className=\"text-xl font-semibold mb-4 font-headline\">Results (Simplified Estimate)</h3>\n          <p><strong>Estimated Fee (Native Token):</strong> {result.estimatedFee.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 8})} {NETWORK_CURRENCY_SYMBOL[result.networkUsed]}</p>\n          <p className=\"mb-6\"><strong>Estimated Fee (Fiat):</strong> {currency.symbol}{result.estimatedFeeFiat.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}</p>\n\n          {result.chartData.length > 0 && (\n             <div className=\"my-8\">\n              <h4 className=\"text-lg font-semibold mb-2 text-center font-headline\">Fee Comparison</h4>\n              <div className=\"h-80 md:h-96\">\n                <ChartContainer config={result.chartConfig} className=\"w-full h-full\">\n                  <BarChart accessibilityLayer data={result.chartData} layout=\"vertical\" margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>\n                    <CartesianGrid horizontal={false} strokeDasharray=\"3 3\" />\n                    <XAxis type=\"number\" \n                      tickFormatter={(value) => `${value.toLocaleString(undefined, {minimumFractionDigits: 0, maximumFractionDigits:2})}`}\n                    />\n                    <YAxis dataKey=\"name\" type=\"category\" tickLine={false} axisLine={false} tickMargin={8} width={100} />\n                    <ChartTooltip\n                      content={<CustomTooltip />}\n                      cursorStyle={{ fill: \"hsl(var(--muted))\", opacity: 0.5 }}\n                    />\n                    <Bar dataKey=\"value\" radius={4} barSize={35}>\n                      {result.chartData.map((entry) => (\n                        <Cell key={`cell-${entry.name}`} fill={entry.fill} />\n                      ))}\n                    </Bar>\n                  </BarChart>\n                </ChartContainer>\n              </div>\n            </div>\n          )}\n        </div>\n      )}\n    </Card>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 4826, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/calculators/_components/CryptoTaxCalculator.tsx"],"sourcesContent":["\n'use client';\n\nimport { useState } from 'react';\nimport { useForm, type SubmitHandler } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport * as z from 'zod';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';\nimport { CurrencyToggle, AVAILABLE_CURRENCIES, type Currency } from '@/components/shared/CurrencyToggle';\nimport { PieChart, Pie, Cell, TooltipProps } from 'recharts';\nimport { ChartConfig, ChartContainer, ChartTooltip, ChartTooltipContent, ChartLegend, ChartLegendContent } from \"@/components/ui/chart\";\nimport type { TooltipPayload } from 'recharts';\n\nconst formSchema = z.object({\n  totalGains: z.coerce.number().min(0, \"Total gains must be non-negative\"),\n  taxRate: z.coerce.number().min(0, \"Tax rate must be non-negative\").max(100, \"Tax rate cannot exceed 100%\"),\n});\ntype FormData = z.infer<typeof formSchema>;\n\ninterface PieChartDataPoint {\n  name: string;\n  value: number;\n  fill: string;\n}\n\ninterface CalculationResult {\n  estimatedTax: number;\n  netGainsAfterTax: number;\n  pieChartData: PieChartDataPoint[];\n  pieChartConfig: ChartConfig;\n}\n\nexport function CryptoTaxCalculator() { \n  const [result, setResult] = useState<CalculationResult | null>(null);\n  const [currency, setCurrency] = useState<Currency>(AVAILABLE_CURRENCIES.find(c => c.value === 'USD') || AVAILABLE_CURRENCIES[0]);\n\n  const form = useForm<FormData>({\n    resolver: zodResolver(formSchema),\n    defaultValues: { totalGains: 5000, taxRate: 20 },\n  });\n\n  const onSubmit: SubmitHandler<FormData> = (data) => {\n    const estimatedTax = (data.totalGains * data.taxRate) / 100;\n    const netGainsAfterTax = data.totalGains - estimatedTax;\n\n    const pieChartData: PieChartDataPoint[] = [\n      { name: 'Estimated Tax', value: estimatedTax, fill: 'hsl(var(--destructive))' },\n      { name: 'Net Gains After Tax', value: netGainsAfterTax, fill: 'hsl(var(--chart-1))' },\n    ].filter(d => d.value > 0.009); // Filter out tiny or zero segments\n\n    const pieChartConfig: ChartConfig = {\n      'Estimated Tax': { label: `Estimated Tax (${currency.symbol})`, color: 'hsl(var(--destructive))' },\n      'Net Gains After Tax': { label: `Net Gains After Tax (${currency.symbol})`, color: 'hsl(var(--chart-1))' },\n    };\n    \n    setResult({ \n      estimatedTax: parseFloat(estimatedTax.toFixed(2)),\n      netGainsAfterTax: parseFloat(netGainsAfterTax.toFixed(2)),\n      pieChartData,\n      pieChartConfig\n    });\n  };\n\n  interface CustomPieTooltipProps extends TooltipProps<number, string> {\n    currency: Currency;\n  }\n\n  const CustomPieTooltip = ({ active, payload, currency: currentCurrency }: CustomPieTooltipProps) => {\n    if (active && payload && payload.length) {\n      const data = payload[0].payload as PieChartDataPoint;\n      const percentage = payload[0].percent !== undefined ? (payload[0].percent * 100).toFixed(2) : null;\n      return (\n        <div className=\"p-2 text-sm bg-background/90 border border-border rounded-md shadow-lg\">\n          <p className=\"font-bold mb-1\" style={{ color: data.fill }}>{data.name}</p>\n          <p>{`Amount: ${currentCurrency.symbol}${data.value.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}`}</p>\n          {percentage && <p>{`Percentage of Total Gains: ${percentage}%`}</p>}\n        </div>\n      );\n    }\n    return null;\n  };\n\n  return (\n    <Card className=\"shadow-lg\">\n      <CardHeader>\n        <CardTitle className=\"font-headline text-2xl\">Crypto Tax Calculator</CardTitle>\n        <CardDescription>Estimate potential taxes on your crypto gains. (For informational purposes only, consult a tax professional)</CardDescription>\n      </CardHeader>\n      <form onSubmit={form.handleSubmit(onSubmit)}>\n        <CardContent className=\"space-y-6\">\n          <div>\n            <Label htmlFor=\"totalGains\">Total Crypto Gains ({currency.symbol})</Label>\n            <Input id=\"totalGains\" type=\"number\" step=\"any\" {...form.register('totalGains')} />\n            {form.formState.errors.totalGains && <p className=\"text-sm text-destructive mt-1\">{form.formState.errors.totalGains.message}</p>}\n          </div>\n          <div>\n            <Label htmlFor=\"taxRate\">Applicable Tax Rate (%)</Label>\n            <Input id=\"taxRate\" type=\"number\" step=\"any\" {...form.register('taxRate')} />\n            {form.formState.errors.taxRate && <p className=\"text-sm text-destructive mt-1\">{form.formState.errors.taxRate.message}</p>}\n          </div>\n          <div>\n            <Label htmlFor=\"currency-toggle\">Currency</Label>\n            <CurrencyToggle\n              id=\"currency-toggle\"\n              selectedCurrency={currency}\n              onCurrencyChange={(newCurrency) => {\n                setCurrency(newCurrency);\n                 if (form.formState.isSubmitted && result) {\n                   onSubmit(form.getValues());\n                }\n              }}\n            />\n          </div>\n        </CardContent>\n        <CardFooter>\n          <Button type=\"submit\" className=\"w-full md:w-auto\">Calculate</Button>\n        </CardFooter>\n      </form>\n\n      {result && (\n        <div className=\"p-6 border-t\">\n          <h3 className=\"text-xl font-semibold mb-4 font-headline\">Results (Estimate)</h3>\n          <p><strong>Estimated Tax Liability:</strong> {currency.symbol}{result.estimatedTax.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}</p>\n          <p className=\"mb-6\"><strong>Net Gains After Tax:</strong> {currency.symbol}{result.netGainsAfterTax.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}</p>\n\n          {result.pieChartData && result.pieChartData.length > 0 && result.pieChartConfig && (\n            <div className=\"my-8\">\n              <h4 className=\"text-lg font-semibold mb-2 text-center font-headline\">Gains Breakdown</h4>\n              <div className=\"h-80 md:h-96 flex justify-center max-h-[300px] sm:max-h-[350px]\">\n                <ChartContainer config={result.pieChartConfig} className=\"aspect-square w-full h-full\">\n                  <PieChart>\n                    <ChartTooltip \n                      content={<CustomPieTooltip currency={currency}/>}\n                      cursor={{ fill: \"hsl(var(--muted))\", opacity: 0.3 }}\n                    />\n                    <Pie\n                      data={result.pieChartData}\n                      dataKey=\"value\"\n                      nameKey=\"name\"\n                      cx=\"50%\"\n                      cy=\"50%\"\n                      outerRadius={100}\n                      innerRadius={50} \n                      labelLine={false}\n                      label={({ name, percent }) => `${name} (${(percent * 100).toFixed(0)}%)`}\n                    >\n                      {result.pieChartData.map((entry, index) => (\n                        <Cell key={`cell-pie-${index}`} fill={entry.fill} />\n                      ))}\n                    </Pie>\n                     <ChartLegend \n                        content={<ChartLegendContent nameKey=\"name\" />} \n                        verticalAlign=\"bottom\"\n                        align=\"center\"\n                        wrapperStyle={{paddingTop: \"20px\"}}\n                    />\n                  </PieChart>\n                </ChartContainer>\n              </div>\n            </div>\n          )}\n        </div>\n      )}\n    </Card>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 5277, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/calculators/_components/IcoIdoRoiCalculator.tsx"],"sourcesContent":["\n'use client';\n\nimport { useState } from 'react';\nimport { useForm, type SubmitHandler } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport * as z from 'zod';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';\nimport { CurrencyToggle, AVAILABLE_CURRENCIES, type Currency } from '@/components/shared/CurrencyToggle';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, TooltipProps, Cell } from 'recharts'; \nimport { ChartConfig, ChartContainer, ChartTooltip, ChartTooltipContent } from \"@/components/ui/chart\"; \nimport type { TooltipPayload } from 'recharts';\n\nconst formSchema = z.object({\n  investmentAmount: z.coerce.number().min(0.01, \"Investment amount must be greater than 0\"),\n  tokensReceived: z.coerce.number().min(0.000001, \"Tokens received must be positive\"),\n  currentTokenPrice: z.coerce.number().min(0, \"Current token price must be non-negative\"),\n});\ntype FormData = z.infer<typeof formSchema>;\n\ninterface ChartDataPoint {\n  name: string;\n  value: number;\n  fill: string;\n}\n\ninterface CalculationResult {\n  investmentAmount: number;\n  currentValue: number;\n  profitLoss: number;\n  roiPercentage: number;\n  chartData: ChartDataPoint[];\n}\n\nexport function IcoIdoRoiCalculator() { \n  const [result, setResult] = useState<CalculationResult | null>(null);\n  const [currency, setCurrency] = useState<Currency>(AVAILABLE_CURRENCIES.find(c => c.value === 'USD') || AVAILABLE_CURRENCIES[0]);\n\n  const form = useForm<FormData>({\n    resolver: zodResolver(formSchema),\n    defaultValues: { investmentAmount: 100, tokensReceived: 1000, currentTokenPrice: 0.5 },\n  });\n\n  const chartConfig = {\n    investmentAmount: { label: `Initial Investment (${currency.symbol})`, color: \"hsl(var(--chart-2))\" },\n    currentValue: { label: `Current Value (${currency.symbol})`, color: \"hsl(var(--chart-1))\" },\n  } satisfies ChartConfig;\n\n\n  const onSubmit: SubmitHandler<FormData> = (data) => {\n    const currentValue = data.tokensReceived * data.currentTokenPrice;\n    const profitLoss = currentValue - data.investmentAmount;\n    const roiPercentage = data.investmentAmount > 0 ? (profitLoss / data.investmentAmount) * 100 : 0;\n    \n    const chartData: ChartDataPoint[] = [\n      { name: 'Initial Investment', value: parseFloat(data.investmentAmount.toFixed(2)), fill: chartConfig.investmentAmount.color },\n      { name: 'Current Value', value: parseFloat(currentValue.toFixed(2)), fill: chartConfig.currentValue.color },\n    ];\n\n    setResult({ \n        investmentAmount: parseFloat(data.investmentAmount.toFixed(2)),\n        currentValue: parseFloat(currentValue.toFixed(2)),\n        profitLoss: parseFloat(profitLoss.toFixed(2)),\n        roiPercentage: parseFloat(roiPercentage.toFixed(2)),\n        chartData,\n    });\n  };\n  \n  const CustomTooltip = ({ active, payload }: TooltipProps<number, string>) => {\n    if (active && payload && payload.length) {\n      const data = payload[0];\n      return (\n        <div className=\"p-2 text-sm bg-background/90 border border-border rounded-md shadow-lg\">\n          <p className=\"font-bold mb-1\" style={{ color: data.payload.fill }}>{data.name}</p>\n          <p>{`Value: ${currency.symbol}${data.value?.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}`}</p>\n        </div>\n      );\n    }\n    return null;\n  };\n\n\n  return (\n    <Card className=\"shadow-lg\">\n      <CardHeader>\n        <CardTitle className=\"font-headline text-2xl\">ICO/IDO ROI Calculator</CardTitle>\n        <CardDescription>Calculate ROI for your Initial Coin Offering (ICO) or Initial DEX Offering (IDO) investments.</CardDescription>\n      </CardHeader>\n      <form onSubmit={form.handleSubmit(onSubmit)}>\n        <CardContent className=\"space-y-6\">\n          <div>\n            <Label htmlFor=\"investmentAmount\">Total Investment Amount ({currency.symbol})</Label>\n            <Input id=\"investmentAmount\" type=\"number\" step=\"any\" {...form.register('investmentAmount')} />\n            {form.formState.errors.investmentAmount && <p className=\"text-sm text-destructive mt-1\">{form.formState.errors.investmentAmount.message}</p>}\n          </div>\n          <div>\n            <Label htmlFor=\"tokensReceived\">Number of Tokens Received</Label>\n            <Input id=\"tokensReceived\" type=\"number\" step=\"any\" {...form.register('tokensReceived')} />\n            {form.formState.errors.tokensReceived && <p className=\"text-sm text-destructive mt-1\">{form.formState.errors.tokensReceived.message}</p>}\n          </div>\n           <div>\n            <Label htmlFor=\"currentTokenPrice\">Current Price per Token ({currency.symbol})</Label>\n            <Input id=\"currentTokenPrice\" type=\"number\" step=\"any\" {...form.register('currentTokenPrice')} />\n            {form.formState.errors.currentTokenPrice && <p className=\"text-sm text-destructive mt-1\">{form.formState.errors.currentTokenPrice.message}</p>}\n          </div>\n          <div>\n            <Label htmlFor=\"currency-toggle\">Currency</Label>\n            <CurrencyToggle\n              id=\"currency-toggle\"\n              selectedCurrency={currency}\n              onCurrencyChange={(newCurrency) => {\n                setCurrency(newCurrency);\n                // Optionally re-evaluate chart config if currency symbol changes in labels\n                setResult(prevResult => prevResult ? {\n                    ...prevResult,\n                    // chartData might need updated labels if currency symbol is embedded\n                } : null);\n              }}\n            />\n          </div>\n        </CardContent>\n        <CardFooter>\n          <Button type=\"submit\" className=\"w-full md:w-auto\">Calculate</Button>\n        </CardFooter>\n      </form>\n\n      {result && (\n        <div className=\"p-6 border-t\">\n          <h3 className=\"text-xl font-semibold mb-4 font-headline\">Results</h3>\n          <p><strong>Initial Investment:</strong> {currency.symbol}{result.investmentAmount.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}</p>\n          <p><strong>Current Value of Tokens:</strong> {currency.symbol}{result.currentValue.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}</p>\n          <p><strong>Profit/Loss:</strong> <span className={result.profitLoss >= 0 ? 'text-green-600' : 'text-destructive'}>{currency.symbol}{result.profitLoss.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}</span></p>\n          <p className=\"mb-6\"><strong>ROI Percentage:</strong> <span className={result.roiPercentage >= 0 ? 'text-green-600' : 'text-destructive'}>{result.roiPercentage.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}%</span></p>\n        \n          {result.chartData && result.chartData.length > 0 && (\n            <div className=\"my-8 h-80 md:h-96\">\n              <ChartContainer config={chartConfig} className=\"w-full h-full\">\n                <BarChart accessibilityLayer data={result.chartData} margin={{ top: 5, right: 20, left: 20, bottom: 5 }}>\n                  <CartesianGrid vertical={false} strokeDasharray=\"3 3\" />\n                  <XAxis dataKey=\"name\" tickLine={false} axisLine={false} tickMargin={8} />\n                  <YAxis \n                    tickLine={false} \n                    axisLine={false} \n                    tickMargin={8}\n                    tickFormatter={(value) => `${currency.symbol}${value.toLocaleString()}`}\n                  />\n                  <ChartTooltip \n                    content={<CustomTooltip />} \n                    cursorStyle={{ fill: \"hsl(var(--muted))\", opacity: 0.5 }}\n                  />\n                  <Bar dataKey=\"value\" radius={4} barSize={30}>\n                    {result.chartData.map((entry) => (\n                      <Cell key={`cell-${entry.name}`} fill={entry.fill} />\n                    ))}\n                  </Bar>\n                </BarChart>\n              </ChartContainer>\n            </div>\n          )}\n        </div>\n      )}\n    </Card>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 5819, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/calculators/_components/PortfolioAllocationCalculator.tsx"],"sourcesContent":["\n'use client';\n\nimport { useState } from 'react';\nimport { useForm, type SubmitHandler } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport * as z from 'zod';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';\nimport { CurrencyToggle, AVAILABLE_CURRENCIES, type Currency } from '@/components/shared/CurrencyToggle';\nimport { PieChart, Pie, Cell, TooltipProps } from 'recharts';\nimport { ChartConfig, ChartContainer, ChartTooltip, ChartTooltipContent, ChartLegend, ChartLegendContent } from \"@/components/ui/chart\"\nimport type { TooltipPayload } from 'recharts';\n\nconst formSchema = z.object({\n  stocks: z.coerce.number().min(0, \"Value must be non-negative\").optional(),\n  bonds: z.coerce.number().min(0, \"Value must be non-negative\").optional(),\n  crypto: z.coerce.number().min(0, \"Value must be non-negative\").optional(),\n  realEstate: z.coerce.number().min(0, \"Value must be non-negative\").optional(),\n  cash: z.coerce.number().min(0, \"Value must be non-negative\").optional(),\n}).refine(data => (data.stocks || 0) + (data.bonds || 0) + (data.crypto || 0) + (data.realEstate || 0) + (data.cash || 0) > 0, {\n  message: \"Total portfolio value must be greater than 0.\",\n  path: [\"stocks\"], \n});\n\ntype FormData = z.infer<typeof formSchema>;\n\ninterface AllocationData {\n  name: string;\n  value: number;\n  percentage: number;\n  fill: string; \n}\n\nconst COLORS_THEME = ['hsl(var(--chart-1))', 'hsl(var(--chart-2))', 'hsl(var(--chart-3))', 'hsl(var(--chart-4))', 'hsl(var(--chart-5))'];\n\nexport function PortfolioAllocationCalculator() { \n  const [allocation, setAllocation] = useState<AllocationData[] | null>(null);\n  const [totalValue, setTotalValue] = useState<number>(0);\n  const [currency, setCurrency] = useState<Currency>(AVAILABLE_CURRENCIES.find(c => c.value === 'USD') || AVAILABLE_CURRENCIES[0]);\n  const [chartConfig, setChartConfig] = useState<ChartConfig | null>(null);\n\n\n  const form = useForm<FormData>({\n    resolver: zodResolver(formSchema),\n    defaultValues: { stocks: 5000, bonds: 3000, crypto: 1000, realEstate: 0, cash: 1000 },\n  });\n\n  const onSubmit: SubmitHandler<FormData> = (data) => {\n    const assets = [\n      { name: 'Stocks', value: data.stocks || 0, baseColor: COLORS_THEME[0] },\n      { name: 'Bonds', value: data.bonds || 0, baseColor: COLORS_THEME[1] },\n      { name: 'Crypto', value: data.crypto || 0, baseColor: COLORS_THEME[2] },\n      { name: 'Real Estate', value: data.realEstate || 0, baseColor: COLORS_THEME[3] },\n      { name: 'Cash', value: data.cash || 0, baseColor: COLORS_THEME[4] },\n    ].filter(asset => asset.value > 0);\n\n    const currentTotalValue = assets.reduce((sum, asset) => sum + asset.value, 0);\n    setTotalValue(currentTotalValue);\n\n    const newAllocationData: AllocationData[] = assets.map((asset, index) => ({\n      name: asset.name,\n      value: asset.value,\n      percentage: parseFloat(((asset.value / currentTotalValue) * 100).toFixed(2)),\n      fill: asset.baseColor || COLORS_THEME[index % COLORS_THEME.length],\n    }));\n    setAllocation(newAllocationData);\n\n    const newChartConfig = newAllocationData.reduce((acc, item) => {\n      acc[item.name] = { \n        label: item.name,\n        color: item.fill,\n      };\n      return acc;\n    }, {} as ChartConfig);\n    setChartConfig(newChartConfig);\n  };\n\n  const CustomPieTooltip = ({ active, payload }: TooltipProps<number, string>) => {\n    if (active && payload && payload.length) {\n      const data = payload[0].payload as AllocationData; \n      return (\n        <div className=\"p-2 text-sm bg-background/90 border border-border rounded-md shadow-lg\">\n          <p className=\"font-bold mb-1\" style={{ color: data.fill }}>{data.name}</p>\n          <p>{`Value: ${currency.symbol}${data.value.toLocaleString()}`}</p>\n          <p>{`Percentage: ${data.percentage.toFixed(2)}%`}</p>\n        </div>\n      );\n    }\n    return null;\n  };\n\n  return (\n    <Card className=\"shadow-lg\">\n      <CardHeader>\n        <CardTitle className=\"font-headline text-2xl\">Portfolio Allocation Calculator</CardTitle>\n        <CardDescription>Plan your asset allocation strategy by inputting values for different asset classes.</CardDescription>\n      </CardHeader>\n      <form onSubmit={form.handleSubmit(onSubmit)}>\n        <CardContent className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <Label htmlFor=\"stocks\">Stocks Value ({currency.symbol})</Label>\n              <Input id=\"stocks\" type=\"number\" step=\"any\" {...form.register('stocks')} />\n            </div>\n            <div>\n              <Label htmlFor=\"bonds\">Bonds Value ({currency.symbol})</Label>\n              <Input id=\"bonds\" type=\"number\" step=\"any\" {...form.register('bonds')} />\n            </div>\n            <div>\n              <Label htmlFor=\"crypto\">Crypto Value ({currency.symbol})</Label>\n              <Input id=\"crypto\" type=\"number\" step=\"any\" {...form.register('crypto')} />\n            </div>\n            <div>\n              <Label htmlFor=\"realEstate\">Real Estate Value ({currency.symbol})</Label>\n              <Input id=\"realEstate\" type=\"number\" step=\"any\" {...form.register('realEstate')} />\n            </div>\n             <div>\n              <Label htmlFor=\"cash\">Cash Value ({currency.symbol})</Label>\n              <Input id=\"cash\" type=\"number\" step=\"any\" {...form.register('cash')} />\n            </div>\n          </div>\n           {form.formState.errors.stocks && typeof form.formState.errors.stocks.message === 'string' && <p className=\"text-sm text-destructive mt-1\">{form.formState.errors.stocks.message}</p>}\n          <div>\n            <Label htmlFor=\"currency-toggle\">Currency</Label>\n            <CurrencyToggle\n              id=\"currency-toggle\"\n              selectedCurrency={currency}\n              onCurrencyChange={setCurrency}\n            />\n          </div>\n        </CardContent>\n        <CardFooter>\n          <Button type=\"submit\" className=\"w-full md:w-auto\">Calculate Allocation</Button>\n        </CardFooter>\n      </form>\n\n      {allocation && allocation.length > 0 && chartConfig && (\n        <div className=\"p-6 border-t\">\n          <h3 className=\"text-xl font-semibold mb-4 font-headline\">Portfolio Allocation</h3>\n          <p className=\"mb-4\"><strong>Total Portfolio Value:</strong> {currency.symbol}{totalValue.toLocaleString()}</p>\n          <div className=\"h-80 md:h-96 mb-6 flex justify-center\">\n            <ChartContainer config={chartConfig} className=\"aspect-square max-h-[300px] sm:max-h-[350px]\">\n              <PieChart accessibilityLayer>\n                <ChartTooltip \n                  content={<CustomPieTooltip />} \n                  cursor={{ fill: \"hsl(var(--muted))\", opacity: 0.3 }}\n                />\n                <Pie\n                  data={allocation}\n                  dataKey=\"value\"\n                  nameKey=\"name\"\n                  cx=\"50%\"\n                  cy=\"50%\"\n                  labelLine={false}\n                  label={({ name, percentage, x, y, fill }) => (\n                    <text\n                      x={x}\n                      y={y}\n                      fill={fill} \n                      textAnchor={x > (150) ? \"start\" : \"end\"} \n                      dominantBaseline=\"central\"\n                      className=\"text-xs font-medium\"\n                    >\n                      {`${name} (${percentage.toFixed(0)}%)`}\n                    </text>\n                  )}\n                  outerRadius={100}\n                  innerRadius={50} \n                  paddingAngle={2}\n                >\n                  {allocation.map((entry) => (\n                    <Cell key={`cell-${entry.name}`} fill={entry.fill} name={entry.name} />\n                  ))}\n                </Pie>\n                <ChartLegend \n                    content={<ChartLegendContent nameKey=\"name\" />} \n                    verticalAlign=\"bottom\"\n                    align=\"center\"\n                    wrapperStyle={{paddingTop: \"20px\"}}\n                />\n              </PieChart>\n            </ChartContainer>\n          </div>\n           <ul className=\"space-y-1\">\n            {allocation.map(item => (\n              <li key={item.name} className=\"flex justify-between\">\n                <span className=\"flex items-center\">\n                   <span className=\"inline-block w-3 h-3 rounded-sm mr-2\" style={{ backgroundColor: item.fill }}></span>\n                  {item.name}:\n                </span>\n                <span>{currency.symbol}{item.value.toLocaleString()} ({item.percentage}%)</span>\n              </li>\n            ))}\n          </ul>\n        </div>\n      )}\n    </Card>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 6412, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/calculators/_components/LoanVsInvestmentCalculator.tsx"],"sourcesContent":["'use client';\n\nimport { useState } from 'react';\nimport { useForm, type SubmitHandler } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport * as z from 'zod';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';\nimport { CurrencyToggle, AVAILABLE_CURRENCIES, type Currency } from '@/components/shared/CurrencyToggle';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, TooltipProps } from 'recharts';\nimport { ChartConfig, ChartContainer, ChartTooltip, ChartTooltipContent, ChartLegend, ChartLegendContent } from \"@/components/ui/chart\"\nimport type { TooltipPayload } from 'recharts';\n\nconst formSchema = z.object({\n  principalAmount: z.coerce.number().min(1, \"Principal amount must be greater than 0\"),\n  loanInterestRate: z.coerce.number().min(0, \"Loan interest rate must be non-negative\").max(100),\n  investmentReturnRate: z.coerce.number().min(0, \"Investment return rate must be non-negative\").max(100),\n  periodYears: z.coerce.number().int().min(1, \"Period must be at least 1 year\").max(50),\n});\ntype FormData = z.infer<typeof formSchema>;\n\ninterface AnnualDataPoint {\n  year: number;\n  investmentValue: number; // Value of principal if invested\n  cumulativeLoanInterestSimple: number; // Cumulative simple interest on loan\n  netBenefitOfInvesting: number; // investmentValue - principal - cumulativeLoanInterestSimple\n}\n\ninterface CalculationResult {\n  finalInvestmentValue: number;\n  finalLoanInterestSimple: number;\n  finalNetBenefitOfInvesting: number;\n  decisionGuidance: string;\n  annualBreakdown: AnnualDataPoint[];\n}\n\nexport function LoanVsInvestmentCalculator() { \n  const [result, setResult] = useState<CalculationResult | null>(null);\n  const [currency, setCurrency] = useState<Currency>(AVAILABLE_CURRENCIES.find(c => c.value === 'USD') || AVAILABLE_CURRENCIES[0]);\n\n  const form = useForm<FormData>({\n    resolver: zodResolver(formSchema),\n    defaultValues: { principalAmount: 10000, loanInterestRate: 5, investmentReturnRate: 7, periodYears: 5 },\n  });\n\n  const onSubmit: SubmitHandler<FormData> = (data) => {\n    const P = data.principalAmount;\n    const rLoan_annual = data.loanInterestRate / 100;\n    const rInvest_annual = data.investmentReturnRate / 100;\n    const t_years = data.periodYears;\n\n    const annualBreakdown: AnnualDataPoint[] = [];\n    let currentInvestmentValue = P;\n    let cumulativeLoanInterestSimple = 0;\n\n    for (let year = 1; year <= t_years; year++) {\n      currentInvestmentValue = P * Math.pow(1 + rInvest_annual, year);\n      cumulativeLoanInterestSimple = P * rLoan_annual * year; // Simple interest accumulated\n      \n      const netBenefitOfInvesting = currentInvestmentValue - P - cumulativeLoanInterestSimple;\n      \n      annualBreakdown.push({\n        year,\n        investmentValue: parseFloat(currentInvestmentValue.toFixed(2)),\n        cumulativeLoanInterestSimple: parseFloat(cumulativeLoanInterestSimple.toFixed(2)),\n        netBenefitOfInvesting: parseFloat(netBenefitOfInvesting.toFixed(2)),\n      });\n    }\n    \n    const finalInvestmentValue = annualBreakdown.length > 0 ? annualBreakdown[annualBreakdown.length-1].investmentValue : P;\n    const finalLoanInterestSimple = annualBreakdown.length > 0 ? annualBreakdown[annualBreakdown.length-1].cumulativeLoanInterestSimple : 0;\n    const finalNetBenefitOfInvesting = finalInvestmentValue - P - finalLoanInterestSimple;\n    \n    let decisionGuidance = \"\";\n    if (finalNetBenefitOfInvesting > 0) {\n        decisionGuidance = `Investing appears potentially more beneficial by ${currency.symbol}${finalNetBenefitOfInvesting.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})} over ${t_years} years (Simplified: investment compounds, loan interest is simple on original principal).`;\n    } else if (finalNetBenefitOfInvesting < 0) {\n        decisionGuidance = `Paying off the loan appears potentially more beneficial. Investing would result in a net position of ${currency.symbol}${finalNetBenefitOfInvesting.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})} compared to just having the principal after ${t_years} years, considering simple loan interest.`;\n    } else {\n        decisionGuidance = \"The outcomes are roughly similar based on these simplified calculations.\";\n    }\n\n    setResult({ \n        finalInvestmentValue,\n        finalLoanInterestSimple,\n        finalNetBenefitOfInvesting,\n        decisionGuidance,\n        annualBreakdown,\n    });\n  };\n\n  const chartConfig = {\n    investmentValue: {\n      label: `Investment Value (${currency.symbol})`,\n      color: \"hsl(var(--chart-1))\",\n    },\n    loanCost: { // Represents the original principal + cumulative simple interest\n      label: `Principal + Loan Interest (${currency.symbol})`,\n      color: \"hsl(var(--chart-2))\",\n    },\n  } satisfies ChartConfig;\n\n  const CustomTooltip = ({ active, payload, label }: TooltipProps<number, string>) => {\n    if (active && payload && payload.length) {\n      const yearData = result?.annualBreakdown.find(d => d.year.toString() === label);\n      return (\n        <div className=\"p-2 text-sm bg-background/90 border border-border rounded-md shadow-lg\">\n          <p className=\"font-bold mb-1\">{`Year: ${label}`}</p>\n          {payload.map((pld: TooltipPayload<number, string>) => (\n             <p key={pld.dataKey} style={{ color: pld.color }}>\n              {`${pld.name}: ${currency.symbol}${pld.value?.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}`}\n            </p>\n          ))}\n          {yearData && (\n             <p style={{ color: \"hsl(var(--chart-3))\" }}>\n                {`Net Benefit of Investing: ${currency.symbol}${yearData.netBenefitOfInvesting.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}`}\n             </p>\n          )}\n        </div>\n      );\n    }\n    return null;\n  };\n  \n  // Adjust data for loan cost line in chart: Principal + Cumulative Simple Interest\n  const chartData = result?.annualBreakdown.map(item => ({\n    ...item,\n    loanCost: form.getValues('principalAmount') + item.cumulativeLoanInterestSimple,\n  })) || [];\n\n\n  return (\n    <Card className=\"shadow-lg\">\n      <CardHeader>\n        <CardTitle className=\"font-headline text-2xl\">Loan vs. Investment Calculator</CardTitle>\n        <CardDescription>Compare paying off a loan (simple interest) vs. investing the same amount (compound return).</CardDescription>\n      </CardHeader>\n      <form onSubmit={form.handleSubmit(onSubmit)}>\n        <CardContent className=\"space-y-6\">\n          <div>\n            <Label htmlFor=\"principalAmount\">Principal Amount (Loan or Investment) ({currency.symbol})</Label>\n            <Input id=\"principalAmount\" type=\"number\" step=\"any\" {...form.register('principalAmount')} />\n            {form.formState.errors.principalAmount && <p className=\"text-sm text-destructive mt-1\">{form.formState.errors.principalAmount.message}</p>}\n          </div>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div>\n              <Label htmlFor=\"loanInterestRate\">Loan Annual Interest Rate (%) (Simple)</Label>\n              <Input id=\"loanInterestRate\" type=\"number\" step=\"any\" {...form.register('loanInterestRate')} />\n              {form.formState.errors.loanInterestRate && <p className=\"text-sm text-destructive mt-1\">{form.formState.errors.loanInterestRate.message}</p>}\n            </div>\n            <div>\n              <Label htmlFor=\"investmentReturnRate\">Expected Annual Investment Return Rate (%) (Compound)</Label>\n              <Input id=\"investmentReturnRate\" type=\"number\" step=\"any\" {...form.register('investmentReturnRate')} />\n              {form.formState.errors.investmentReturnRate && <p className=\"text-sm text-destructive mt-1\">{form.formState.errors.investmentReturnRate.message}</p>}\n            </div>\n          </div>\n           <div>\n            <Label htmlFor=\"periodYears\">Comparison Period (Years)</Label>\n            <Input id=\"periodYears\" type=\"number\" {...form.register('periodYears')} />\n            {form.formState.errors.periodYears && <p className=\"text-sm text-destructive mt-1\">{form.formState.errors.periodYears.message}</p>}\n          </div>\n          <div>\n            <Label htmlFor=\"currency-toggle\">Currency</Label>\n            <CurrencyToggle\n              id=\"currency-toggle\"\n              selectedCurrency={currency}\n              onCurrencyChange={setCurrency}\n            />\n          </div>\n        </CardContent>\n        <CardFooter>\n          <Button type=\"submit\" className=\"w-full md:w-auto\">Compare</Button>\n        </CardFooter>\n      </form>\n\n      {result && result.annualBreakdown.length > 0 && (\n        <div className=\"p-6 border-t\">\n          <h3 className=\"text-xl font-semibold mb-4 font-headline\">Comparison Results</h3>\n          <p><strong>Final Investment Value after {form.getValues(\"periodYears\")} years:</strong> {currency.symbol}{result.finalInvestmentValue.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}</p>\n          <p><strong>Total Simple Interest on Loan after {form.getValues(\"periodYears\")} years:</strong> {currency.symbol}{result.finalLoanInterestSimple.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}</p>\n          <p><strong>Final Net Benefit of Investing (Investment Value - Principal - Loan Interest):</strong> {currency.symbol}{result.finalNetBenefitOfInvesting.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}</p>\n          <p className=\"mt-2 font-semibold mb-6\">{result.decisionGuidance}</p>\n          \n          <div className=\"my-8 h-80 md:h-96\">\n             <ChartContainer config={chartConfig} className=\"w-full h-full\">\n                <LineChart accessibilityLayer data={chartData} margin={{ top: 5, right: 20, left: 20, bottom: 5 }}>\n                    <CartesianGrid vertical={false} strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"year\" unit=\"yr\" tickLine={false} axisLine={false} tickMargin={8} />\n                    <YAxis \n                        tickLine={false} \n                        axisLine={false} \n                        tickMargin={8}\n                        tickFormatter={(val) => `${currency.symbol}${val.toLocaleString()}`} \n                    />\n                    <ChartTooltip content={<CustomTooltip />} cursorStyle={{strokeDasharray: '3 3', strokeWidth: 1.5, fillOpacity: 0.1}}/>\n                    <ChartLegend content={<ChartLegendContent />} />\n                    <Line dataKey=\"investmentValue\" type=\"monotone\" name={chartConfig.investmentValue.label} stroke={chartConfig.investmentValue.color} strokeWidth={2.5} dot={false} activeDot={{ r: 6 }} />\n                    <Line dataKey=\"loanCost\" type=\"monotone\" name={chartConfig.loanCost.label} stroke={chartConfig.loanCost.color} strokeWidth={2.5} dot={false} activeDot={{ r: 6 }} />\n                </LineChart>\n            </ChartContainer>\n          </div>\n\n          <h4 className=\"text-lg font-semibold mb-2 font-headline\">Annual Breakdown</h4>\n          <div className=\"max-h-96 overflow-y-auto\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Year</TableHead>\n                  <TableHead>Investment Value</TableHead>\n                  <TableHead>Cumulative Loan Interest (Simple)</TableHead>\n                  <TableHead className=\"text-right\">Net Benefit of Investing</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {result.annualBreakdown.map((item) => (\n                  <TableRow key={item.year}>\n                    <TableCell>{item.year}</TableCell>\n                    <TableCell>{currency.symbol}{item.investmentValue.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}</TableCell>\n                    <TableCell>{currency.symbol}{item.cumulativeLoanInterestSimple.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}</TableCell>\n                    <TableCell className=\"text-right\">{currency.symbol}{item.netBenefitOfInvesting.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}</TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </div>\n          <p className=\"text-xs mt-2 text-muted-foreground\">Note: This is a simplified comparison. Real loan calculations often involve amortization. Investment returns are not guaranteed.</p>\n        </div>\n      )}\n    </Card>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 7165, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/calculators/_components/RealEstateRoiCalculator.tsx"],"sourcesContent":["\n'use client';\n\nimport { useState } from 'react';\nimport { useForm, type SubmitHandler } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport * as z from 'zod';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';\nimport { CurrencyToggle, AVAILABLE_CURRENCIES, type Currency } from '@/components/shared/CurrencyToggle';\nimport { PieChart, Pie, Cell, TooltipProps } from 'recharts';\nimport { ChartConfig, ChartContainer, ChartTooltip, ChartTooltipContent, ChartLegend, ChartLegendContent } from \"@/components/ui/chart\";\nimport type { TooltipPayload } from 'recharts';\n\nconst formSchema = z.object({\n  purchasePrice: z.coerce.number().min(1, \"Purchase price must be greater than 0\"),\n  salePrice: z.coerce.number().min(0, \"Sale price must be non-negative\"),\n  totalExpenses: z.coerce.number().min(0, \"Total expenses must be non-negative (renovations, fees, etc.)\"),\n  rentalIncome: z.coerce.number().min(0, \"Total rental income must be non-negative (if applicable)\").optional(),\n});\ntype FormData = z.infer<typeof formSchema>;\n\ninterface PieChartDataPoint {\n  name: string;\n  value: number;\n  fill: string;\n}\n\ninterface CalculationResult {\n  netProfit: number;\n  roiPercentage: number;\n  initialInvestment: number;\n  totalRevenue: number;\n  pieChartData: PieChartDataPoint[];\n  pieChartConfig: ChartConfig;\n}\n\nexport function RealEstateRoiCalculator() { \n  const [result, setResult] = useState<CalculationResult | null>(null);\n  const [currency, setCurrency] = useState<Currency>(AVAILABLE_CURRENCIES.find(c => c.value === 'USD') || AVAILABLE_CURRENCIES[0]);\n\n  const form = useForm<FormData>({\n    resolver: zodResolver(formSchema),\n    defaultValues: { purchasePrice: 200000, salePrice: 250000, totalExpenses: 10000, rentalIncome: 12000 },\n  });\n\n  const onSubmit: SubmitHandler<FormData> = (data) => {\n    const initialInvestment = data.purchasePrice + data.totalExpenses;\n    const totalRevenue = data.salePrice + (data.rentalIncome || 0);\n    const netProfit = totalRevenue - initialInvestment;\n    const roiPercentage = initialInvestment > 0 ? (netProfit / initialInvestment) * 100 : 0;\n\n    const newPieChartData: PieChartDataPoint[] = [];\n    const newPieChartConfig: ChartConfig = {};\n\n    newPieChartData.push({ name: 'Initial Investment', value: initialInvestment, fill: 'hsl(var(--chart-2))' });\n    newPieChartConfig['Initial Investment'] = { label: `Initial Investment (${currency.symbol})`, color: 'hsl(var(--chart-2))' };\n\n    if (netProfit >= 0) {\n      if (netProfit > 0) {\n        newPieChartData.push({ name: 'Net Profit', value: netProfit, fill: 'hsl(var(--chart-1))' });\n        newPieChartConfig['Net Profit'] = { label: `Net Profit (${currency.symbol})`, color: 'hsl(var(--chart-1))' };\n      }\n    } else {\n      newPieChartData.push({ name: 'Net Loss', value: Math.abs(netProfit), fill: 'hsl(var(--destructive))' });\n      newPieChartConfig['Net Loss'] = { label: `Net Loss (${currency.symbol})`, color: 'hsl(var(--destructive))' };\n    }\n    \n    setResult({ \n        netProfit: parseFloat(netProfit.toFixed(2)),\n        roiPercentage: parseFloat(roiPercentage.toFixed(2)),\n        initialInvestment: parseFloat(initialInvestment.toFixed(2)),\n        totalRevenue: parseFloat(totalRevenue.toFixed(2)),\n        pieChartData: newPieChartData.filter(d => d.value > 0.009),\n        pieChartConfig: newPieChartConfig,\n    });\n  };\n\n  interface CustomPieTooltipProps extends TooltipProps<number, string> {\n    currency: Currency;\n  }\n\n  const CustomPieTooltip = ({ active, payload, currency: currentCurrency }: CustomPieTooltipProps) => {\n    if (active && payload && payload.length) {\n      const data = payload[0].payload as PieChartDataPoint; \n      const percentage = payload[0].percent !== undefined ? (payload[0].percent * 100).toFixed(2) : null;\n      return (\n        <div className=\"p-2 text-sm bg-background/90 border border-border rounded-md shadow-lg\">\n          <p className=\"font-bold mb-1\" style={{ color: data.fill }}>{data.name}</p>\n          <p>{`Amount: ${currentCurrency.symbol}${data.value.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}`}</p>\n          {/* The pie chart shows actual values, so percentage of total might be confusing in this context */}\n        </div>\n      );\n    }\n    return null;\n  };\n\n  return (\n    <Card className=\"shadow-lg\">\n      <CardHeader>\n        <CardTitle className=\"font-headline text-2xl\">Real Estate ROI Calculator</CardTitle>\n        <CardDescription>Calculate the Return on Investment for your real estate properties.</CardDescription>\n      </CardHeader>\n      <form onSubmit={form.handleSubmit(onSubmit)}>\n        <CardContent className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div>\n              <Label htmlFor=\"purchasePrice\">Purchase Price ({currency.symbol})</Label>\n              <Input id=\"purchasePrice\" type=\"number\" step=\"any\" {...form.register('purchasePrice')} />\n              {form.formState.errors.purchasePrice && <p className=\"text-sm text-destructive mt-1\">{form.formState.errors.purchasePrice.message}</p>}\n            </div>\n            <div>\n              <Label htmlFor=\"salePrice\">Sale Price ({currency.symbol})</Label>\n              <Input id=\"salePrice\" type=\"number\" step=\"any\" {...form.register('salePrice')} />\n              {form.formState.errors.salePrice && <p className=\"text-sm text-destructive mt-1\">{form.formState.errors.salePrice.message}</p>}\n            </div>\n          </div>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n             <div>\n              <Label htmlFor=\"totalExpenses\">Total Expenses ({currency.symbol}) (Renovations, Fees, etc.)</Label>\n              <Input id=\"totalExpenses\" type=\"number\" step=\"any\" {...form.register('totalExpenses')} />\n              {form.formState.errors.totalExpenses && <p className=\"text-sm text-destructive mt-1\">{form.formState.errors.totalExpenses.message}</p>}\n            </div>\n            <div>\n              <Label htmlFor=\"rentalIncome\">Total Rental Income (Optional) ({currency.symbol})</Label>\n              <Input id=\"rentalIncome\" type=\"number\" step=\"any\" {...form.register('rentalIncome')} />\n              {form.formState.errors.rentalIncome && <p className=\"text-sm text-destructive mt-1\">{form.formState.errors.rentalIncome.message}</p>}\n            </div>\n          </div>\n          <div>\n            <Label htmlFor=\"currency-toggle\">Currency</Label>\n            <CurrencyToggle\n              id=\"currency-toggle\"\n              selectedCurrency={currency}\n              onCurrencyChange={(newCurrency) => {\n                setCurrency(newCurrency);\n                 if (form.formState.isSubmitted && result) {\n                   onSubmit(form.getValues());\n                }\n              }}\n            />\n          </div>\n        </CardContent>\n        <CardFooter>\n          <Button type=\"submit\" className=\"w-full md:w-auto\">Calculate ROI</Button>\n        </CardFooter>\n      </form>\n\n      {result && (\n        <div className=\"p-6 border-t\">\n          <h3 className=\"text-xl font-semibold mb-4 font-headline\">Results</h3>\n          <p><strong>Initial Investment (Purchase + Expenses):</strong> {currency.symbol}{result.initialInvestment.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}</p>\n          <p><strong>Total Revenue (Sale + Rental Income):</strong> {currency.symbol}{result.totalRevenue.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}</p>\n          <p><strong>Net Profit/Loss:</strong> <span className={result.netProfit >= 0 ? 'text-green-600' : 'text-destructive'}>{currency.symbol}{result.netProfit.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}</span></p>\n          <p className=\"mb-6\"><strong>ROI Percentage:</strong> <span className={result.roiPercentage >= 0 ? 'text-green-600' : 'text-destructive'}>{result.roiPercentage.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}%</span></p>\n\n          {result.pieChartData && result.pieChartData.length > 0 && result.pieChartConfig && (\n            <div className=\"my-8\">\n              <h4 className=\"text-lg font-semibold mb-2 text-center font-headline\">Investment Breakdown</h4>\n              <div className=\"h-80 md:h-96 flex justify-center\">\n                <ChartContainer config={result.pieChartConfig} className=\"aspect-square max-h-[300px] sm:max-h-[350px]\">\n                  <PieChart>\n                    <ChartTooltip \n                      content={<CustomPieTooltip currency={currency}/>}\n                      cursor={{ fill: \"hsl(var(--muted))\", opacity: 0.3 }}\n                    />\n                    <Pie\n                      data={result.pieChartData}\n                      dataKey=\"value\"\n                      nameKey=\"name\"\n                      cx=\"50%\"\n                      cy=\"50%\"\n                      outerRadius={100}\n                      labelLine={false}\n                      label={({ name, value, percent }) => `${name} (${(percent * 100).toFixed(0)}%)`}\n                    >\n                      {result.pieChartData.map((entry, index) => (\n                        <Cell key={`cell-pie-${index}`} fill={entry.fill} />\n                      ))}\n                    </Pie>\n                     <ChartLegend \n                        content={<ChartLegendContent nameKey=\"name\" />} \n                        verticalAlign=\"bottom\"\n                        align=\"center\"\n                        wrapperStyle={{paddingTop: \"20px\"}}\n                    />\n                  </PieChart>\n                </ChartContainer>\n              </div>\n            </div>\n          )}\n        </div>\n      )}\n    </Card>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 7786, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/calculators/_components/GoalPlanningCalculator.tsx"],"sourcesContent":["'use client';\n\nimport { useState } from 'react';\nimport { useForm, type SubmitHandler } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport * as z from 'zod';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';\nimport { CurrencyToggle, AVAILABLE_CURRENCIES, type Currency } from '@/components/shared/CurrencyToggle';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, TooltipProps } from 'recharts';\nimport { ChartConfig, ChartContainer, ChartTooltip, ChartTooltipContent, ChartLegend, ChartLegendContent } from \"@/components/ui/chart\"\nimport type { TooltipPayload } from 'recharts';\n\nconst formSchema = z.object({\n  targetAmount: z.coerce.number().min(1, \"Target amount must be greater than 0\"),\n  yearsToGoal: z.coerce.number().int().min(1, \"Years to goal must be at least 1\").max(100),\n  expectedReturnRate: z.coerce.number().min(0, \"Expected return rate must be non-negative\").max(100),\n  initialInvestment: z.coerce.number().min(0, \"Initial investment must be non-negative\").optional().default(0),\n});\ntype FormData = z.infer<typeof formSchema>;\n\ninterface AnnualDataPoint {\n  year: number;\n  totalInvested: number; // Cumulative principal invested\n  interestEarnedYearly: number; // Interest earned just in that year\n  endValue: number; // Value at the end of the year\n}\n\ninterface CalculationResult {\n  requiredMonthlyInvestment: number;\n  annualBreakdown: AnnualDataPoint[];\n  totalInvestedAtEnd: number;\n  totalInterestEarnedAtEnd: number;\n}\n\nexport function GoalPlanningCalculator() {\n  const [result, setResult] = useState<CalculationResult | null>(null);\n  const [currency, setCurrency] = useState<Currency>(AVAILABLE_CURRENCIES.find(c => c.value === 'USD') || AVAILABLE_CURRENCIES[0]);\n\n  const form = useForm<FormData>({\n    resolver: zodResolver(formSchema),\n    defaultValues: { targetAmount: 50000, yearsToGoal: 5, expectedReturnRate: 7, initialInvestment: 1000 },\n  });\n\n  const onSubmit: SubmitHandler<FormData> = (data) => {\n    const r_monthly = data.expectedReturnRate / 100 / 12;\n    const n_months = data.yearsToGoal * 12;\n    const FV = data.targetAmount;\n    const PV = data.initialInvestment || 0;\n\n    let pmt; // Required Monthly Investment\n    if (r_monthly === 0) {\n      pmt = (FV - PV) / n_months;\n    } else {\n      pmt = (FV - PV * Math.pow(1 + r_monthly, n_months)) / ((Math.pow(1 + r_monthly, n_months) - 1) / r_monthly);\n    }\n    pmt = Math.max(0, pmt); // Ensure pmt is not negative if PV already meets FV\n\n    const annualBreakdown: AnnualDataPoint[] = [];\n    let currentValue = PV;\n    let cumulativeInvested = PV;\n\n    for (let year = 1; year <= data.yearsToGoal; year++) {\n      const P_year_start = currentValue;\n      let interestThisYear = 0;\n      let principalAddedThisYear = 0;\n\n      for (let month = 1; month <= 12; month++) {\n        const monthlyInterest = currentValue * r_monthly;\n        interestThisYear += monthlyInterest;\n        currentValue += monthlyInterest;\n        currentValue += pmt;\n        principalAddedThisYear += pmt;\n      }\n      cumulativeInvested += principalAddedThisYear;\n      annualBreakdown.push({\n        year,\n        totalInvested: cumulativeInvested,\n        interestEarnedYearly: interestThisYear,\n        endValue: currentValue,\n      });\n    }\n    \n    const totalInterestEarnedAtEnd = currentValue - cumulativeInvested;\n\n    setResult({\n      requiredMonthlyInvestment: parseFloat(pmt.toFixed(2)),\n      annualBreakdown,\n      totalInvestedAtEnd: cumulativeInvested,\n      totalInterestEarnedAtEnd: parseFloat(totalInterestEarnedAtEnd.toFixed(2)),\n    });\n  };\n  \n  const chartConfig = {\n    endValue: {\n      label: `Portfolio Value (${currency.symbol})`,\n      color: \"hsl(var(--chart-1))\",\n    },\n    totalInvested: {\n      label: `Total Invested (${currency.symbol})`,\n      color: \"hsl(var(--chart-2))\",\n    },\n  } satisfies ChartConfig;\n\n  const CustomTooltip = ({ active, payload, label }: TooltipProps<number, string>) => {\n    if (active && payload && payload.length) {\n      const yearData = result?.annualBreakdown.find(d => d.year.toString() === label);\n      return (\n        <div className=\"p-2 text-sm bg-background/90 border border-border rounded-md shadow-lg\">\n          <p className=\"font-bold mb-1\">{`Year: ${label}`}</p>\n          {payload.map((pld: TooltipPayload<number, string>) => (\n            <p key={pld.dataKey} style={{ color: pld.color }}>\n              {`${pld.name}: ${currency.symbol}${pld.value?.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}`}\n            </p>\n          ))}\n           {yearData && (\n             <p style={{ color: \"hsl(var(--chart-3))\" }}>\n                {`Interest This Year: ${currency.symbol}${yearData.interestEarnedYearly.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}`}\n             </p>\n          )}\n        </div>\n      );\n    }\n    return null;\n  };\n\n\n  return (\n    <Card className=\"shadow-lg\">\n      <CardHeader>\n        <CardTitle className=\"font-headline text-2xl\">Financial Goal Planning Calculator</CardTitle>\n        <CardDescription>Plan investments to reach your financial goals. Calculates required monthly investment and shows growth.</CardDescription>\n      </CardHeader>\n      <form onSubmit={form.handleSubmit(onSubmit)}>\n        <CardContent className=\"space-y-6\">\n          <div>\n            <Label htmlFor=\"targetAmount\">Target Amount ({currency.symbol})</Label>\n            <Input id=\"targetAmount\" type=\"number\" step=\"any\" {...form.register('targetAmount')} />\n            {form.formState.errors.targetAmount && <p className=\"text-sm text-destructive mt-1\">{form.formState.errors.targetAmount.message}</p>}\n          </div>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div>\n              <Label htmlFor=\"yearsToGoal\">Years to Reach Goal</Label>\n              <Input id=\"yearsToGoal\" type=\"number\" {...form.register('yearsToGoal')} />\n              {form.formState.errors.yearsToGoal && <p className=\"text-sm text-destructive mt-1\">{form.formState.errors.yearsToGoal.message}</p>}\n            </div>\n            <div>\n              <Label htmlFor=\"expectedReturnRate\">Expected Annual Return Rate (%)</Label>\n              <Input id=\"expectedReturnRate\" type=\"number\" step=\"any\" {...form.register('expectedReturnRate')} />\n              {form.formState.errors.expectedReturnRate && <p className=\"text-sm text-destructive mt-1\">{form.formState.errors.expectedReturnRate.message}</p>}\n            </div>\n          </div>\n           <div>\n            <Label htmlFor=\"initialInvestment\">Initial Investment (Optional) ({currency.symbol})</Label>\n            <Input id=\"initialInvestment\" type=\"number\" step=\"any\" {...form.register('initialInvestment')} />\n            {form.formState.errors.initialInvestment && <p className=\"text-sm text-destructive mt-1\">{form.formState.errors.initialInvestment.message}</p>}\n          </div>\n          <div>\n            <Label htmlFor=\"currency-toggle\">Currency</Label>\n            <CurrencyToggle\n              id=\"currency-toggle\"\n              selectedCurrency={currency}\n              onCurrencyChange={setCurrency}\n            />\n          </div>\n        </CardContent>\n        <CardFooter>\n          <Button type=\"submit\" className=\"w-full md:w-auto\">Calculate</Button>\n        </CardFooter>\n      </form>\n\n      {result && (\n        <div className=\"p-6 border-t\">\n          <h3 className=\"text-xl font-semibold mb-4 font-headline\">Results</h3>\n          <p className=\"mb-2\"><strong>Required Monthly Investment:</strong> {currency.symbol}{result.requiredMonthlyInvestment.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}</p>\n          <p className=\"mb-2\"><strong>Total Invested by End of Period:</strong> {currency.symbol}{result.totalInvestedAtEnd.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}</p>\n          <p className=\"mb-6\"><strong>Total Interest Earned by End of Period:</strong> {currency.symbol}{result.totalInterestEarnedAtEnd.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}</p>\n          \n          <div className=\"mb-8 h-80 md:h-96\">\n             <ChartContainer config={chartConfig} className=\"w-full h-full\">\n                <LineChart accessibilityLayer data={result.annualBreakdown} margin={{ top: 5, right: 20, left: 20, bottom: 5 }}>\n                    <CartesianGrid vertical={false} strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"year\" unit=\"yr\" tickLine={false} axisLine={false} tickMargin={8} />\n                    <YAxis \n                        tickLine={false} \n                        axisLine={false} \n                        tickMargin={8}\n                        tickFormatter={(value) => `${currency.symbol}${value.toLocaleString()}`} \n                    />\n                    <ChartTooltip content={<CustomTooltip />} cursorStyle={{strokeDasharray: '3 3', strokeWidth: 1.5, fillOpacity: 0.1}}/>\n                    <ChartLegend content={<ChartLegendContent />} />\n                    <Line dataKey=\"endValue\" type=\"monotone\" name={chartConfig.endValue.label} stroke={chartConfig.endValue.color} strokeWidth={2.5} dot={false} activeDot={{ r: 6 }} />\n                    <Line dataKey=\"totalInvested\" type=\"monotone\" name={chartConfig.totalInvested.label} stroke={chartConfig.totalInvested.color} strokeWidth={2.5} dot={false} activeDot={{ r: 6 }} />\n                </LineChart>\n            </ChartContainer>\n          </div>\n\n          <h4 className=\"text-lg font-semibold mb-2 font-headline\">Annual Breakdown</h4>\n          <div className=\"max-h-96 overflow-y-auto\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Year</TableHead>\n                  <TableHead>Total Invested</TableHead>\n                  <TableHead>Interest Earned (Yearly)</TableHead>\n                  <TableHead className=\"text-right\">End Value</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {result.annualBreakdown.map((item) => (\n                  <TableRow key={item.year}>\n                    <TableCell>{item.year}</TableCell>\n                    <TableCell>{currency.symbol}{item.totalInvested.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}</TableCell>\n                    <TableCell>{currency.symbol}{item.interestEarnedYearly.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}</TableCell>\n                    <TableCell className=\"text-right\">{currency.symbol}{item.endValue.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}</TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </div>\n           <p className=\"text-xs mt-2 text-muted-foreground\">Note: Assumes consistent monthly investments and returns compounded monthly. This is a simplified calculation.</p>\n        </div>\n      )}\n    </Card>\n  );\n}\n\n    \n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 8523, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/calculators/_components/TimeValueOfMoneyCalculator.tsx"],"sourcesContent":["\n'use client';\n\nimport { useState } from 'react';\nimport { useForm, type SubmitHandler } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport * as z from 'zod';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';\nimport { CurrencyToggle, AVAILABLE_CURRENCIES, type Currency } from '@/components/shared/CurrencyToggle';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, TooltipProps } from 'recharts';\nimport { ChartConfig, ChartContainer, ChartTooltip, ChartTooltipContent, ChartLegend, ChartLegendContent } from \"@/components/ui/chart\"\nimport type { TooltipPayload } from 'recharts';\n\nconst formSchema = z.object({\n  value: z.coerce.number(), \n  rate: z.coerce.number().min(0, \"Rate must be non-negative\").max(100),\n  periods: z.coerce.number().int().min(1, \"Periods must be at least 1\").max(100), // Max 100 for breakdown/chart reasonable\n  calculationType: z.enum(['FV', 'PV']),\n});\ntype FormData = z.infer<typeof formSchema>;\n\ninterface PeriodDataPoint {\n  period: number;\n  valueAtPeriodEnd: number;\n}\n\ninterface CalculationResult {\n  calculatedValue: number;\n  label: string;\n  periodicBreakdown: PeriodDataPoint[];\n}\n\nexport function TimeValueOfMoneyCalculator() { \n  const [result, setResult] = useState<CalculationResult | null>(null);\n  const [currency, setCurrency] = useState<Currency>(AVAILABLE_CURRENCIES.find(c => c.value === 'USD') || AVAILABLE_CURRENCIES[0]);\n\n  const form = useForm<FormData>({\n    resolver: zodResolver(formSchema),\n    defaultValues: { value: 1000, rate: 5, periods: 10, calculationType: 'FV' },\n  });\n\n  const onSubmit: SubmitHandler<FormData> = (data) => {\n    const r_period = data.rate / 100;\n    const periodicBreakdown: PeriodDataPoint[] = [];\n    let finalCalculatedValue;\n    let label;\n\n    if (data.calculationType === 'FV') {\n      label = \"Future Value (FV)\";\n      let currentValue = data.value;\n      for (let period = 1; period <= data.periods; period++) {\n        currentValue = currentValue * (1 + r_period);\n        periodicBreakdown.push({ period, valueAtPeriodEnd: parseFloat(currentValue.toFixed(2)) });\n      }\n      finalCalculatedValue = currentValue;\n    } else { // PV\n      label = \"Present Value (PV)\";\n      const fvReference = data.value;\n      finalCalculatedValue = fvReference / Math.pow(1 + r_period, data.periods); // This is the actual PV\n      \n      // For breakdown, show the growth of the calculated PV over the periods.\n      for (let period = 1; period <= data.periods; period++) {\n         const valAtPeriod = finalCalculatedValue * Math.pow(1 + r_period, period);\n         periodicBreakdown.push({ period, valueAtPeriodEnd: parseFloat(valAtPeriod.toFixed(2))});\n      }\n    }\n    \n    setResult({ calculatedValue: parseFloat(finalCalculatedValue.toFixed(2)), label, periodicBreakdown });\n  };\n\n  const valueLabel = form.watch('calculationType') === 'FV' ? `Present Value (PV) (${currency.symbol})` : `Future Value (FV) (${currency.symbol})`;\n  \n  const chartConfig = {\n    valueAtPeriodEnd: {\n      label: `Value (${currency.symbol})`,\n      color: \"hsl(var(--chart-1))\",\n    },\n  } satisfies ChartConfig;\n\n  const CustomTooltip = ({ active, payload, label }: TooltipProps<number, string>) => {\n    if (active && payload && payload.length) {\n      return (\n        <div className=\"p-2 text-sm bg-background/90 border border-border rounded-md shadow-lg\">\n          <p className=\"font-bold mb-1\">{`Period: ${label}`}</p>\n          {payload.map((pld: TooltipPayload<number, string>) => (\n            <p key={pld.dataKey} style={{ color: pld.color }}>\n              {`${pld.name}: ${currency.symbol}${pld.value?.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}`}\n            </p>\n          ))}\n        </div>\n      );\n    }\n    return null;\n  };\n\n  return (\n    <Card className=\"shadow-lg\">\n      <CardHeader>\n        <CardTitle className=\"font-headline text-2xl\">Time Value of Money (TVM) Calculator</CardTitle>\n        <CardDescription>Calculate Present Value (PV) or Future Value (FV) with period breakdown.</CardDescription>\n      </CardHeader>\n      <form onSubmit={form.handleSubmit(onSubmit)}>\n        <CardContent className=\"space-y-6\">\n          <div>\n            <Label htmlFor=\"calculationType\">Calculate</Label>\n             <Select onValueChange={(value) => { form.setValue('calculationType', value as FormData['calculationType']); setResult(null); }} defaultValue={form.getValues('calculationType')}>\n                <SelectTrigger id=\"calculationType\"><SelectValue /></SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"FV\">Future Value (FV)</SelectItem>\n                  <SelectItem value=\"PV\">Present Value (PV)</SelectItem>\n                </SelectContent>\n              </Select>\n          </div>\n          <div>\n            <Label htmlFor=\"value\">{valueLabel}</Label>\n            <Input id=\"value\" type=\"number\" step=\"any\" {...form.register('value')} />\n            {form.formState.errors.value && <p className=\"text-sm text-destructive mt-1\">{form.formState.errors.value.message}</p>}\n          </div>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div>\n              <Label htmlFor=\"rate\">Interest Rate per Period (%)</Label>\n              <Input id=\"rate\" type=\"number\" step=\"any\" {...form.register('rate')} />\n              {form.formState.errors.rate && <p className=\"text-sm text-destructive mt-1\">{form.formState.errors.rate.message}</p>}\n            </div>\n            <div>\n              <Label htmlFor=\"periods\">Number of Periods</Label>\n              <Input id=\"periods\" type=\"number\" {...form.register('periods')} />\n              {form.formState.errors.periods && <p className=\"text-sm text-destructive mt-1\">{form.formState.errors.periods.message}</p>}\n            </div>\n          </div>\n          <div>\n            <Label htmlFor=\"currency-toggle\">Currency</Label>\n            <CurrencyToggle\n              id=\"currency-toggle\"\n              selectedCurrency={currency}\n              onCurrencyChange={setCurrency}\n            />\n          </div>\n        </CardContent>\n        <CardFooter>\n          <Button type=\"submit\" className=\"w-full md:w-auto\">Calculate</Button>\n        </CardFooter>\n      </form>\n\n      {result && result.periodicBreakdown.length > 0 && (\n        <div className=\"p-6 border-t\">\n          <h3 className=\"text-xl font-semibold mb-4 font-headline\">Result</h3>\n          <p className=\"mb-6\"><strong>Calculated {result.label}:</strong> {currency.symbol}{result.calculatedValue.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}</p>\n        \n          <div className=\"my-8 h-80 md:h-96\">\n             <ChartContainer config={chartConfig} className=\"w-full h-full\">\n                <LineChart accessibilityLayer data={result.periodicBreakdown} margin={{ top: 5, right: 20, left: 20, bottom: 5 }}>\n                    <CartesianGrid vertical={false} strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"period\" unit=\"\" tickLine={false} axisLine={false} tickMargin={8} />\n                    <YAxis \n                        tickLine={false} \n                        axisLine={false} \n                        tickMargin={8}\n                        tickFormatter={(val) => `${currency.symbol}${val.toLocaleString()}`} \n                    />\n                    <ChartTooltip content={<CustomTooltip />} cursorStyle={{strokeDasharray: '3 3', strokeWidth: 1.5, fillOpacity: 0.1}}/>\n                    <ChartLegend content={<ChartLegendContent />} />\n                    <Line dataKey=\"valueAtPeriodEnd\" type=\"monotone\" name={chartConfig.valueAtPeriodEnd.label} stroke={chartConfig.valueAtPeriodEnd.color} strokeWidth={2.5} dot={false} activeDot={{ r: 6 }} />\n                </LineChart>\n            </ChartContainer>\n          </div>\n\n          <h4 className=\"text-lg font-semibold mb-2 font-headline\">Periodic Breakdown</h4>\n          <div className=\"max-h-96 overflow-y-auto\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Period</TableHead>\n                  <TableHead className=\"text-right\">Value at End of Period</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {result.periodicBreakdown.map((item) => (\n                  <TableRow key={item.period}>\n                    <TableCell>{item.period}</TableCell>\n                    <TableCell className=\"text-right\">{currency.symbol}{item.valueAtPeriodEnd.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}</TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </div>\n        </div>\n      )}\n    </Card>\n  );\n}\n\n    \n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 9161, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/calculators/_components/SipCalculator.tsx"],"sourcesContent":["'use client';\n\nimport { useState } from 'react';\nimport { useForm, type SubmitHandler } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport * as z from 'zod';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';\nimport { CurrencyToggle, AVAILABLE_CURRENCIES, type Currency } from '@/components/shared/CurrencyToggle';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, TooltipProps } from 'recharts';\nimport { ChartConfig, ChartContainer, ChartTooltip, ChartTooltipContent, ChartLegend, ChartLegendContent } from \"@/components/ui/chart\"\nimport type { TooltipPayload } from 'recharts';\n\nconst formSchema = z.object({\n  monthlyInvestment: z.coerce.number().min(1, \"Monthly investment must be greater than 0\"),\n  expectedReturnRate: z.coerce.number().min(0, \"Expected return rate must be non-negative\").max(100),\n  investmentPeriodYears: z.coerce.number().int().min(1, \"Investment period must be at least 1 year\").max(50),\n});\ntype FormData = z.infer<typeof formSchema>;\n\ninterface AnnualSipDataPoint {\n  year: number;\n  totalInvested: number;\n  estimatedReturns: number;\n  futureValue: number;\n}\n\ninterface CalculationResult {\n  totalInvested: number;\n  estimatedReturns: number;\n  futureValue: number;\n  annualBreakdown: AnnualSipDataPoint[];\n}\n\nexport function SipCalculator() { \n  const [result, setResult] = useState<CalculationResult | null>(null);\n  const [currency, setCurrency] = useState<Currency>(AVAILABLE_CURRENCIES.find(c => c.value === 'USD') || AVAILABLE_CURRENCIES[0]);\n\n  const form = useForm<FormData>({\n    resolver: zodResolver(formSchema),\n    defaultValues: { monthlyInvestment: 5000, expectedReturnRate: 12, investmentPeriodYears: 10 },\n  });\n\n  const onSubmit: SubmitHandler<FormData> = (data) => {\n    const P = data.monthlyInvestment;\n    const annualRate = data.expectedReturnRate / 100;\n    const i = annualRate / 12; // monthly interest rate\n    const totalYears = data.investmentPeriodYears;\n    const n_total_months = totalYears * 12;\n\n    const overallFutureValue = P * ( (Math.pow(1 + i, n_total_months) - 1) / i ) * (1 + i);\n    const overallTotalInvested = P * n_total_months;\n    const overallEstimatedReturns = overallFutureValue - overallTotalInvested;\n\n    const annualBreakdown: AnnualSipDataPoint[] = [];\n    for (let year = 1; year <= totalYears; year++) {\n      const current_months = year * 12;\n      const fv_at_year = P * ( (Math.pow(1 + i, current_months) - 1) / i ) * (1 + i);\n      const ti_at_year = P * current_months;\n      const er_at_year = fv_at_year - ti_at_year;\n      annualBreakdown.push({\n        year,\n        totalInvested: parseFloat(ti_at_year.toFixed(2)),\n        estimatedReturns: parseFloat(er_at_year.toFixed(2)),\n        futureValue: parseFloat(fv_at_year.toFixed(2)),\n      });\n    }\n    \n    setResult({ \n        totalInvested: parseFloat(overallTotalInvested.toFixed(2)),\n        estimatedReturns: parseFloat(overallEstimatedReturns.toFixed(2)),\n        futureValue: parseFloat(overallFutureValue.toFixed(2)),\n        annualBreakdown,\n    });\n  };\n\n  const chartConfig = {\n    futureValue: {\n      label: `Future Value (${currency.symbol})`,\n      color: \"hsl(var(--chart-1))\",\n    },\n    totalInvested: {\n      label: `Total Invested (${currency.symbol})`,\n      color: \"hsl(var(--chart-2))\",\n    },\n  } satisfies ChartConfig;\n\n  const CustomTooltip = ({ active, payload, label }: TooltipProps<number, string>) => {\n    if (active && payload && payload.length) {\n      const yearData = result?.annualBreakdown.find(d => d.year.toString() === label);\n      return (\n        <div className=\"p-2 text-sm bg-background/90 border border-border rounded-md shadow-lg\">\n          <p className=\"font-bold mb-1\">{`Year: ${label}`}</p>\n          {payload.map((pld: TooltipPayload<number, string>) => (\n            <p key={pld.dataKey} style={{ color: pld.color }}>\n              {`${pld.name}: ${currency.symbol}${pld.value?.toLocaleString()}`}\n            </p>\n          ))}\n           {yearData && (\n             <p style={{ color: \"hsl(var(--chart-3))\" }}>\n                {`Est. Returns This Year: ${currency.symbol}${yearData.estimatedReturns.toLocaleString()}`}\n             </p>\n          )}\n        </div>\n      );\n    }\n    return null;\n  };\n\n\n  return (\n    <Card className=\"shadow-lg\">\n      <CardHeader>\n        <CardTitle className=\"font-headline text-2xl\">SIP (Systematic Investment Plan) Calculator</CardTitle>\n        <CardDescription>Project the future value of your SIP investments with an annual breakdown and growth chart.</CardDescription>\n      </CardHeader>\n      <form onSubmit={form.handleSubmit(onSubmit)}>\n        <CardContent className=\"space-y-6\">\n          <div>\n            <Label htmlFor=\"monthlyInvestment\">Monthly Investment ({currency.symbol})</Label>\n            <Input id=\"monthlyInvestment\" type=\"number\" step=\"any\" {...form.register('monthlyInvestment')} />\n            {form.formState.errors.monthlyInvestment && <p className=\"text-sm text-destructive mt-1\">{form.formState.errors.monthlyInvestment.message}</p>}\n          </div>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div>\n              <Label htmlFor=\"expectedReturnRate\">Expected Annual Return Rate (%)</Label>\n              <Input id=\"expectedReturnRate\" type=\"number\" step=\"any\" {...form.register('expectedReturnRate')} />\n              {form.formState.errors.expectedReturnRate && <p className=\"text-sm text-destructive mt-1\">{form.formState.errors.expectedReturnRate.message}</p>}\n            </div>\n            <div>\n              <Label htmlFor=\"investmentPeriodYears\">Investment Period (Years)</Label>\n              <Input id=\"investmentPeriodYears\" type=\"number\" {...form.register('investmentPeriodYears')} />\n              {form.formState.errors.investmentPeriodYears && <p className=\"text-sm text-destructive mt-1\">{form.formState.errors.investmentPeriodYears.message}</p>}\n            </div>\n          </div>\n          <div>\n            <Label htmlFor=\"currency-toggle\">Currency</Label>\n            <CurrencyToggle\n              id=\"currency-toggle\"\n              selectedCurrency={currency}\n              onCurrencyChange={setCurrency}\n            />\n          </div>\n        </CardContent>\n        <CardFooter>\n          <Button type=\"submit\" className=\"w-full md:w-auto\">Calculate</Button>\n        </CardFooter>\n      </form>\n\n      {result && (\n        <div className=\"p-6 border-t\">\n          <h3 className=\"text-xl font-semibold mb-4 font-headline\">Overall Results</h3>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6 text-lg\">\n            <p><strong>Total Invested:</strong> {currency.symbol}{result.totalInvested.toLocaleString()}</p>\n            <p><strong>Est. Returns:</strong> {currency.symbol}{result.estimatedReturns.toLocaleString()}</p>\n            <p><strong>Future Value:</strong> {currency.symbol}{result.futureValue.toLocaleString()}</p>\n          </div>\n\n          <div className=\"mb-8 h-80 md:h-96\">\n             <ChartContainer config={chartConfig} className=\"w-full h-full\">\n                <LineChart accessibilityLayer data={result.annualBreakdown} margin={{ top: 5, right: 20, left: 20, bottom: 5 }}>\n                    <CartesianGrid vertical={false} strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"year\" unit=\"yr\" tickLine={false} axisLine={false} tickMargin={8} />\n                    <YAxis \n                        tickLine={false} \n                        axisLine={false} \n                        tickMargin={8}\n                        tickFormatter={(value) => `${currency.symbol}${value.toLocaleString()}`} \n                    />\n                    <ChartTooltip content={<CustomTooltip />} cursorStyle={{strokeDasharray: '3 3', strokeWidth: 1.5, fillOpacity: 0.1}}/>\n                    <ChartLegend content={<ChartLegendContent />} />\n                    <Line dataKey=\"futureValue\" type=\"monotone\" name={chartConfig.futureValue.label} stroke={chartConfig.futureValue.color} strokeWidth={2.5} dot={false} activeDot={{ r: 6 }} />\n                    <Line dataKey=\"totalInvested\" type=\"monotone\" name={chartConfig.totalInvested.label} stroke={chartConfig.totalInvested.color} strokeWidth={2.5} dot={false} activeDot={{ r: 6 }} />\n                </LineChart>\n            </ChartContainer>\n          </div>\n          \n          <h4 className=\"text-lg font-semibold mb-2 font-headline\">Annual Breakdown</h4>\n          <div className=\"max-h-96 overflow-y-auto\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Year</TableHead>\n                  <TableHead>Total Invested</TableHead>\n                  <TableHead>Estimated Returns</TableHead>\n                  <TableHead className=\"text-right\">Future Value</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {result.annualBreakdown.map((item) => (\n                  <TableRow key={item.year}>\n                    <TableCell>{item.year}</TableCell>\n                    <TableCell>{currency.symbol}{item.totalInvested.toLocaleString()}</TableCell>\n                    <TableCell>{currency.symbol}{item.estimatedReturns.toLocaleString()}</TableCell>\n                    <TableCell className=\"text-right\">{currency.symbol}{item.futureValue.toLocaleString()}</TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </div>\n        </div>\n      )}\n    </Card>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 9819, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/calculators/_components/SipVsLumpsumCalculator.tsx"],"sourcesContent":["'use client';\n\nimport { useState } from 'react';\nimport { useForm, type SubmitHandler } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport * as z from 'zod';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';\nimport { CurrencyToggle, AVAILABLE_CURRENCIES, type Currency } from '@/components/shared/CurrencyToggle';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, TooltipProps } from 'recharts';\nimport { ChartConfig, ChartContainer, ChartTooltip, ChartTooltipContent, ChartLegend, ChartLegendContent } from \"@/components/ui/chart\"\nimport type { TooltipPayload } from 'recharts';\n\nconst formSchema = z.object({\n  totalInvestment: z.coerce.number().min(1, \"Total investment must be greater than 0\"),\n  expectedReturnRate: z.coerce.number().min(0, \"Expected return rate must be non-negative\").max(100),\n  investmentPeriodYears: z.coerce.number().int().min(1, \"Investment period must be at least 1 year\").max(50),\n});\ntype FormData = z.infer<typeof formSchema>;\n\ninterface AnnualDataPoint {\n  year: number;\n  sipValue: number;\n  lumpsumValue: number;\n  totalInvestedSip: number; // Cumulative for SIP\n}\n\ninterface CalculationResult {\n  lumpsumFutureValue: number;\n  sipFutureValue: number;\n  totalInvested: number;\n  annualBreakdown: AnnualDataPoint[];\n}\n\nexport function SipVsLumpsumCalculator() { \n  const [result, setResult] = useState<CalculationResult | null>(null);\n  const [currency, setCurrency] = useState<Currency>(AVAILABLE_CURRENCIES.find(c => c.value === 'USD') || AVAILABLE_CURRENCIES[0]);\n\n  const form = useForm<FormData>({\n    resolver: zodResolver(formSchema),\n    defaultValues: { totalInvestment: 120000, expectedReturnRate: 12, investmentPeriodYears: 10 },\n  });\n\n  const onSubmit: SubmitHandler<FormData> = (data) => {\n    const P_total = data.totalInvestment;\n    const annualRate = data.expectedReturnRate / 100;\n    const monthlyRate = annualRate / 12;\n    const t_years = data.investmentPeriodYears;\n    const n_months = t_years * 12;\n    \n    // Lumpsum Final Calculation (compounded annually)\n    const lumpsumFutureValueFinal = P_total * Math.pow(1 + annualRate, t_years);\n\n    // SIP Final Calculation\n    const P_sip_monthly = P_total / n_months;\n    const sipFutureValueFinal = P_sip_monthly * ((Math.pow(1 + monthlyRate, n_months) - 1) / monthlyRate) * (1 + monthlyRate); // End of period\n\n    const annualBreakdown: AnnualDataPoint[] = [];\n    let currentSipValue = 0;\n    let currentLumpsumValue = P_total;\n    let cumulativeSipInvested = 0;\n\n    for (let year = 1; year <= t_years; year++) {\n      // Lumpsum for this year\n      currentLumpsumValue = P_total * Math.pow(1 + annualRate, year);\n\n      // SIP for this year\n      const months_at_year_end = year * 12;\n      currentSipValue = P_sip_monthly * ((Math.pow(1 + monthlyRate, months_at_year_end) - 1) / monthlyRate) * (1 + monthlyRate);\n      cumulativeSipInvested = P_sip_monthly * months_at_year_end;\n      \n      annualBreakdown.push({\n        year,\n        sipValue: parseFloat(currentSipValue.toFixed(2)),\n        lumpsumValue: parseFloat(currentLumpsumValue.toFixed(2)),\n        totalInvestedSip: parseFloat(cumulativeSipInvested.toFixed(2)),\n      });\n    }\n    \n    setResult({ \n        lumpsumFutureValue: parseFloat(lumpsumFutureValueFinal.toFixed(2)),\n        sipFutureValue: parseFloat(sipFutureValueFinal.toFixed(2)),\n        totalInvested: parseFloat(P_total.toFixed(2)),\n        annualBreakdown,\n    });\n  };\n\n  const chartConfig = {\n    sipValue: {\n      label: `SIP Value (${currency.symbol})`,\n      color: \"hsl(var(--chart-1))\",\n    },\n    lumpsumValue: {\n      label: `Lumpsum Value (${currency.symbol})`,\n      color: \"hsl(var(--chart-2))\",\n    },\n     totalInvestedSip: { // Only for tooltip\n      label: `Total Invested (SIP) (${currency.symbol})`,\n      color: \"hsl(var(--chart-3))\",\n    }\n  } satisfies ChartConfig;\n\n  const CustomTooltip = ({ active, payload, label }: TooltipProps<number, string>) => {\n    if (active && payload && payload.length) {\n       const yearData = result?.annualBreakdown.find(d => d.year.toString() === label);\n      return (\n        <div className=\"p-2 text-sm bg-background/90 border border-border rounded-md shadow-lg\">\n          <p className=\"font-bold mb-1\">{`Year: ${label}`}</p>\n          {payload.map((pld: TooltipPayload<number, string>) => (\n            <p key={pld.dataKey} style={{ color: pld.color }}>\n              {`${pld.name}: ${currency.symbol}${pld.value?.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}`}\n            </p>\n          ))}\n          {yearData && (\n             <p style={{ color: chartConfig.totalInvestedSip.color }}>\n                {`${chartConfig.totalInvestedSip.label}: ${currency.symbol}${yearData.totalInvestedSip.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}`}\n             </p>\n          )}\n        </div>\n      );\n    }\n    return null;\n  };\n\n  return (\n    <Card className=\"shadow-lg\">\n      <CardHeader>\n        <CardTitle className=\"font-headline text-2xl\">SIP vs. Lumpsum Calculator</CardTitle>\n        <CardDescription>Compare the potential returns of SIP and Lumpsum investment strategies.</CardDescription>\n      </CardHeader>\n      <form onSubmit={form.handleSubmit(onSubmit)}>\n        <CardContent className=\"space-y-6\">\n          <div>\n            <Label htmlFor=\"totalInvestment\">Total Investment Amount ({currency.symbol})</Label>\n            <Input id=\"totalInvestment\" type=\"number\" step=\"any\" {...form.register('totalInvestment')} />\n            {form.formState.errors.totalInvestment && <p className=\"text-sm text-destructive mt-1\">{form.formState.errors.totalInvestment.message}</p>}\n          </div>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div>\n              <Label htmlFor=\"expectedReturnRate\">Expected Annual Return Rate (%)</Label>\n              <Input id=\"expectedReturnRate\" type=\"number\" step=\"any\" {...form.register('expectedReturnRate')} />\n              {form.formState.errors.expectedReturnRate && <p className=\"text-sm text-destructive mt-1\">{form.formState.errors.expectedReturnRate.message}</p>}\n            </div>\n            <div>\n              <Label htmlFor=\"investmentPeriodYears\">Investment Period (Years)</Label>\n              <Input id=\"investmentPeriodYears\" type=\"number\" {...form.register('investmentPeriodYears')} />\n              {form.formState.errors.investmentPeriodYears && <p className=\"text-sm text-destructive mt-1\">{form.formState.errors.investmentPeriodYears.message}</p>}\n            </div>\n          </div>\n          <div>\n            <Label htmlFor=\"currency-toggle\">Currency</Label>\n            <CurrencyToggle\n              id=\"currency-toggle\"\n              selectedCurrency={currency}\n              onCurrencyChange={setCurrency}\n            />\n          </div>\n        </CardContent>\n        <CardFooter>\n          <Button type=\"submit\" className=\"w-full md:w-auto\">Compare</Button>\n        </CardFooter>\n      </form>\n\n      {result && result.annualBreakdown.length > 0 && (\n        <div className=\"p-6 border-t\">\n          <h3 className=\"text-xl font-semibold mb-4 font-headline\">Comparison Results</h3>\n          <p className=\"mb-2\"><strong>Total Amount Invested:</strong> {currency.symbol}{result.totalInvested.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}</p>\n          <div className=\"mt-4 grid grid-cols-1 md:grid-cols-2 gap-4 mb-6\">\n            <div>\n                <h4 className=\"font-semibold\">Lumpsum Investment:</h4>\n                <p>Estimated Future Value: {currency.symbol}{result.lumpsumFutureValue.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}</p>\n            </div>\n            <div>\n                <h4 className=\"font-semibold\">SIP Investment:</h4>\n                <p>Estimated Future Value: {currency.symbol}{result.sipFutureValue.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}</p>\n                 <p className=\"text-xs\">(Monthly investment of {currency.symbol}{(result.totalInvested / (form.getValues(\"investmentPeriodYears\")*12)).toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})})</p>\n            </div>\n          </div>\n\n          <div className=\"my-8 h-80 md:h-96\">\n             <ChartContainer config={chartConfig} className=\"w-full h-full\">\n                <LineChart accessibilityLayer data={result.annualBreakdown} margin={{ top: 5, right: 20, left: 20, bottom: 5 }}>\n                    <CartesianGrid vertical={false} strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"year\" unit=\"yr\" tickLine={false} axisLine={false} tickMargin={8} />\n                    <YAxis \n                        tickLine={false} \n                        axisLine={false} \n                        tickMargin={8}\n                        tickFormatter={(value) => `${currency.symbol}${value.toLocaleString()}`} \n                    />\n                    <ChartTooltip content={<CustomTooltip />} cursorStyle={{strokeDasharray: '3 3', strokeWidth: 1.5, fillOpacity: 0.1}}/>\n                    <ChartLegend content={<ChartLegendContent />} />\n                    <Line dataKey=\"sipValue\" type=\"monotone\" name={chartConfig.sipValue.label} stroke={chartConfig.sipValue.color} strokeWidth={2.5} dot={false} activeDot={{ r: 6 }} />\n                    <Line dataKey=\"lumpsumValue\" type=\"monotone\" name={chartConfig.lumpsumValue.label} stroke={chartConfig.lumpsumValue.color} strokeWidth={2.5} dot={false} activeDot={{ r: 6 }} />\n                </LineChart>\n            </ChartContainer>\n          </div>\n          \n          <h4 className=\"text-lg font-semibold mb-2 font-headline\">Annual Breakdown</h4>\n          <div className=\"max-h-96 overflow-y-auto\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Year</TableHead>\n                  <TableHead>SIP Value</TableHead>\n                  <TableHead className=\"text-right\">Lumpsum Value</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {result.annualBreakdown.map((item) => (\n                  <TableRow key={item.year}>\n                    <TableCell>{item.year}</TableCell>\n                    <TableCell>{currency.symbol}{item.sipValue.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}</TableCell>\n                    <TableCell className=\"text-right\">{currency.symbol}{item.lumpsumValue.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}</TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </div>\n        </div>\n      )}\n    </Card>\n  );\n}\n\n    \n"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAbA;;;;;;;;;;;;;;AAgBA,MAAM,aAAa,CAAA,GAAA,oIAAA,CAAA,SAAQ,AAAD,EAAE;IAC1B,iBAAiB,oIAAA,CAAA,SAAQ,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;IAC1C,oBAAoB,oIAAA,CAAA,SAAQ,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG,6CAA6C,GAAG,CAAC;IAC9F,uBAAuB,oIAAA,CAAA,SAAQ,CAAC,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,6CAA6C,GAAG,CAAC;AACzG;AAiBO,SAAS;IACd,MAAM,CAAC,QAAQ,UAAU,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAA4B;IAC/D,MAAM,CAAC,UAAU,YAAY,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAY,8IAAA,CAAA,uBAAoB,CAAC,IAAI,CAAC,CAAA,IAAK,EAAE,KAAK,KAAK,UAAU,8IAAA,CAAA,uBAAoB,CAAC,EAAE;IAE/H,MAAM,OAAO,CAAA,GAAA,8JAAA,CAAA,UAAO,AAAD,EAAY;QAC7B,UAAU,CAAA,GAAA,8JAAA,CAAA,cAAW,AAAD,EAAE;QACtB,eAAe;YAAE,iBAAiB;YAAQ,oBAAoB;YAAI,uBAAuB;QAAG;IAC9F;IAEA,MAAM,WAAoC,CAAC;QACzC,MAAM,UAAU,KAAK,eAAe;QACpC,MAAM,aAAa,KAAK,kBAAkB,GAAG;QAC7C,MAAM,cAAc,aAAa;QACjC,MAAM,UAAU,KAAK,qBAAqB;QAC1C,MAAM,WAAW,UAAU;QAE3B,kDAAkD;QAClD,MAAM,0BAA0B,UAAU,KAAK,GAAG,CAAC,IAAI,YAAY;QAEnE,wBAAwB;QACxB,MAAM,gBAAgB,UAAU;QAChC,MAAM,sBAAsB,gBAAgB,CAAC,CAAC,KAAK,GAAG,CAAC,IAAI,aAAa,YAAY,CAAC,IAAI,WAAW,IAAI,CAAC,IAAI,WAAW,GAAG,gBAAgB;QAE3I,MAAM,kBAAqC,EAAE;QAC7C,IAAI,kBAAkB;QACtB,IAAI,sBAAsB;QAC1B,IAAI,wBAAwB;QAE5B,IAAK,IAAI,OAAO,GAAG,QAAQ,SAAS,OAAQ;YAC1C,wBAAwB;YACxB,sBAAsB,UAAU,KAAK,GAAG,CAAC,IAAI,YAAY;YAEzD,oBAAoB;YACpB,MAAM,qBAAqB,OAAO;YAClC,kBAAkB,gBAAgB,CAAC,CAAC,KAAK,GAAG,CAAC,IAAI,aAAa,sBAAsB,CAAC,IAAI,WAAW,IAAI,CAAC,IAAI,WAAW;YACxH,wBAAwB,gBAAgB;YAExC,gBAAgB,IAAI,CAAC;gBACnB;gBACA,UAAU,WAAW,gBAAgB,OAAO,CAAC;gBAC7C,cAAc,WAAW,oBAAoB,OAAO,CAAC;gBACrD,kBAAkB,WAAW,sBAAsB,OAAO,CAAC;YAC7D;QACF;QAEA,UAAU;YACN,oBAAoB,WAAW,wBAAwB,OAAO,CAAC;YAC/D,gBAAgB,WAAW,oBAAoB,OAAO,CAAC;YACvD,eAAe,WAAW,QAAQ,OAAO,CAAC;YAC1C;QACJ;IACF;IAEA,MAAM,cAAc;QAClB,UAAU;YACR,OAAO,CAAC,WAAW,EAAE,SAAS,MAAM,CAAC,CAAC,CAAC;YACvC,OAAO;QACT;QACA,cAAc;YACZ,OAAO,CAAC,eAAe,EAAE,SAAS,MAAM,CAAC,CAAC,CAAC;YAC3C,OAAO;QACT;QACC,kBAAkB;YACjB,OAAO,CAAC,sBAAsB,EAAE,SAAS,MAAM,CAAC,CAAC,CAAC;YAClD,OAAO;QACT;IACF;IAEA,MAAM,gBAAgB,CAAC,EAAE,MAAM,EAAE,OAAO,EAAE,KAAK,EAAgC;QAC7E,IAAI,UAAU,WAAW,QAAQ,MAAM,EAAE;YACtC,MAAM,WAAW,QAAQ,gBAAgB,KAAK,CAAA,IAAK,EAAE,IAAI,CAAC,QAAQ,OAAO;YAC1E,qBACE,8OAAC;gBAAI,WAAU;;kCACb,8OAAC;wBAAE,WAAU;kCAAkB,CAAC,MAAM,EAAE,OAAO;;;;;;oBAC9C,QAAQ,GAAG,CAAC,CAAC,oBACZ,8OAAC;4BAAoB,OAAO;gCAAE,OAAO,IAAI,KAAK;4BAAC;sCAC5C,GAAG,IAAI,IAAI,CAAC,EAAE,EAAE,SAAS,MAAM,GAAG,IAAI,KAAK,EAAE,eAAe,WAAW;gCAAC,uBAAuB;gCAAG,uBAAuB;4BAAC,IAAI;2BADzH,IAAI,OAAO;;;;;oBAIpB,0BACE,8OAAC;wBAAE,OAAO;4BAAE,OAAO,YAAY,gBAAgB,CAAC,KAAK;wBAAC;kCAClD,GAAG,YAAY,gBAAgB,CAAC,KAAK,CAAC,EAAE,EAAE,SAAS,MAAM,GAAG,SAAS,gBAAgB,CAAC,cAAc,CAAC,WAAW;4BAAC,uBAAuB;4BAAG,uBAAuB;wBAAC,IAAI;;;;;;;;;;;;QAKpL;QACA,OAAO;IACT;IAEA,qBACE,8OAAC,gIAAA,CAAA,OAAI;QAAC,WAAU;;0BACd,8OAAC,gIAAA,CAAA,aAAU;;kCACT,8OAAC,gIAAA,CAAA,YAAS;wBAAC,WAAU;kCAAyB;;;;;;kCAC9C,8OAAC,gIAAA,CAAA,kBAAe;kCAAC;;;;;;;;;;;;0BAEnB,8OAAC;gBAAK,UAAU,KAAK,YAAY,CAAC;;kCAChC,8OAAC,gIAAA,CAAA,cAAW;wBAAC,WAAU;;0CACrB,8OAAC;;kDACC,8OAAC,iIAAA,CAAA,QAAK;wCAAC,SAAQ;;4CAAkB;4CAA0B,SAAS,MAAM;4CAAC;;;;;;;kDAC3E,8OAAC,iIAAA,CAAA,QAAK;wCAAC,IAAG;wCAAkB,MAAK;wCAAS,MAAK;wCAAO,GAAG,KAAK,QAAQ,CAAC,kBAAkB;;;;;;oCACxF,KAAK,SAAS,CAAC,MAAM,CAAC,eAAe,kBAAI,8OAAC;wCAAE,WAAU;kDAAiC,KAAK,SAAS,CAAC,MAAM,CAAC,eAAe,CAAC,OAAO;;;;;;;;;;;;0CAEvI,8OAAC;gCAAI,WAAU;;kDACb,8OAAC;;0DACC,8OAAC,iIAAA,CAAA,QAAK;gDAAC,SAAQ;0DAAqB;;;;;;0DACpC,8OAAC,iIAAA,CAAA,QAAK;gDAAC,IAAG;gDAAqB,MAAK;gDAAS,MAAK;gDAAO,GAAG,KAAK,QAAQ,CAAC,qBAAqB;;;;;;4CAC9F,KAAK,SAAS,CAAC,MAAM,CAAC,kBAAkB,kBAAI,8OAAC;gDAAE,WAAU;0DAAiC,KAAK,SAAS,CAAC,MAAM,CAAC,kBAAkB,CAAC,OAAO;;;;;;;;;;;;kDAE7I,8OAAC;;0DACC,8OAAC,iIAAA,CAAA,QAAK;gDAAC,SAAQ;0DAAwB;;;;;;0DACvC,8OAAC,iIAAA,CAAA,QAAK;gDAAC,IAAG;gDAAwB,MAAK;gDAAU,GAAG,KAAK,QAAQ,CAAC,wBAAwB;;;;;;4CACzF,KAAK,SAAS,CAAC,MAAM,CAAC,qBAAqB,kBAAI,8OAAC;gDAAE,WAAU;0DAAiC,KAAK,SAAS,CAAC,MAAM,CAAC,qBAAqB,CAAC,OAAO;;;;;;;;;;;;;;;;;;0CAGrJ,8OAAC;;kDACC,8OAAC,iIAAA,CAAA,QAAK;wCAAC,SAAQ;kDAAkB;;;;;;kDACjC,8OAAC,8IAAA,CAAA,iBAAc;wCACb,IAAG;wCACH,kBAAkB;wCAClB,kBAAkB;;;;;;;;;;;;;;;;;;kCAIxB,8OAAC,gIAAA,CAAA,aAAU;kCACT,cAAA,8OAAC,kIAAA,CAAA,SAAM;4BAAC,MAAK;4BAAS,WAAU;sCAAmB;;;;;;;;;;;;;;;;;YAItD,UAAU,OAAO,eAAe,CAAC,MAAM,GAAG,mBACzC,8OAAC;gBAAI,WAAU;;kCACb,8OAAC;wBAAG,WAAU;kCAA2C;;;;;;kCACzD,8OAAC;wBAAE,WAAU;;0CAAO,8OAAC;0CAAO;;;;;;4BAA+B;4BAAE,SAAS,MAAM;4BAAE,OAAO,aAAa,CAAC,cAAc,CAAC,WAAW;gCAAC,uBAAuB;gCAAG,uBAAuB;4BAAC;;;;;;;kCAChL,8OAAC;wBAAI,WAAU;;0CACb,8OAAC;;kDACG,8OAAC;wCAAG,WAAU;kDAAgB;;;;;;kDAC9B,8OAAC;;4CAAE;4CAAyB,SAAS,MAAM;4CAAE,OAAO,kBAAkB,CAAC,cAAc,CAAC,WAAW;gDAAC,uBAAuB;gDAAG,uBAAuB;4CAAC;;;;;;;;;;;;;0CAExJ,8OAAC;;kDACG,8OAAC;wCAAG,WAAU;kDAAgB;;;;;;kDAC9B,8OAAC;;4CAAE;4CAAyB,SAAS,MAAM;4CAAE,OAAO,cAAc,CAAC,cAAc,CAAC,WAAW;gDAAC,uBAAuB;gDAAG,uBAAuB;4CAAC;;;;;;;kDAC/I,8OAAC;wCAAE,WAAU;;4CAAU;4CAAwB,SAAS,MAAM;4CAAE,CAAC,OAAO,aAAa,GAAG,CAAC,KAAK,SAAS,CAAC,2BAAyB,EAAE,CAAC,EAAE,cAAc,CAAC,WAAW;gDAAC,uBAAuB;gDAAG,uBAAuB;4CAAC;4CAAG;;;;;;;;;;;;;;;;;;;kCAI7N,8OAAC;wBAAI,WAAU;kCACZ,cAAA,8OAAC,iIAAA,CAAA,iBAAc;4BAAC,QAAQ;4BAAa,WAAU;sCAC5C,cAAA,8OAAC,qJAAA,CAAA,YAAS;gCAAC,kBAAkB;gCAAC,MAAM,OAAO,eAAe;gCAAE,QAAQ;oCAAE,KAAK;oCAAG,OAAO;oCAAI,MAAM;oCAAI,QAAQ;gCAAE;;kDACzG,8OAAC,6JAAA,CAAA,gBAAa;wCAAC,UAAU;wCAAO,iBAAgB;;;;;;kDAChD,8OAAC,qJAAA,CAAA,QAAK;wCAAC,SAAQ;wCAAO,MAAK;wCAAK,UAAU;wCAAO,UAAU;wCAAO,YAAY;;;;;;kDAC9E,8OAAC,qJAAA,CAAA,QAAK;wCACF,UAAU;wCACV,UAAU;wCACV,YAAY;wCACZ,eAAe,CAAC,QAAU,GAAG,SAAS,MAAM,GAAG,MAAM,cAAc,IAAI;;;;;;kDAE3E,8OAAC,iIAAA,CAAA,eAAY;wCAAC,uBAAS,8OAAC;;;;;wCAAkB,aAAa;4CAAC,iBAAiB;4CAAO,aAAa;4CAAK,aAAa;wCAAG;;;;;;kDAClH,8OAAC,iIAAA,CAAA,cAAW;wCAAC,uBAAS,8OAAC,iIAAA,CAAA,qBAAkB;;;;;;;;;;kDACzC,8OAAC,oJAAA,CAAA,OAAI;wCAAC,SAAQ;wCAAW,MAAK;wCAAW,MAAM,YAAY,QAAQ,CAAC,KAAK;wCAAE,QAAQ,YAAY,QAAQ,CAAC,KAAK;wCAAE,aAAa;wCAAK,KAAK;wCAAO,WAAW;4CAAE,GAAG;wCAAE;;;;;;kDAC/J,8OAAC,oJAAA,CAAA,OAAI;wCAAC,SAAQ;wCAAe,MAAK;wCAAW,MAAM,YAAY,YAAY,CAAC,KAAK;wCAAE,QAAQ,YAAY,YAAY,CAAC,KAAK;wCAAE,aAAa;wCAAK,KAAK;wCAAO,WAAW;4CAAE,GAAG;wCAAE;;;;;;;;;;;;;;;;;;;;;;kCAKrL,8OAAC;wBAAG,WAAU;kCAA2C;;;;;;kCACzD,8OAAC;wBAAI,WAAU;kCACb,cAAA,8OAAC,iIAAA,CAAA,QAAK;;8CACJ,8OAAC,iIAAA,CAAA,cAAW;8CACV,cAAA,8OAAC,iIAAA,CAAA,WAAQ;;0DACP,8OAAC,iIAAA,CAAA,YAAS;0DAAC;;;;;;0DACX,8OAAC,iIAAA,CAAA,YAAS;0DAAC;;;;;;0DACX,8OAAC,iIAAA,CAAA,YAAS;gDAAC,WAAU;0DAAa;;;;;;;;;;;;;;;;;8CAGtC,8OAAC,iIAAA,CAAA,YAAS;8CACP,OAAO,eAAe,CAAC,GAAG,CAAC,CAAC,qBAC3B,8OAAC,iIAAA,CAAA,WAAQ;;8DACP,8OAAC,iIAAA,CAAA,YAAS;8DAAE,KAAK,IAAI;;;;;;8DACrB,8OAAC,iIAAA,CAAA,YAAS;;wDAAE,SAAS,MAAM;wDAAE,KAAK,QAAQ,CAAC,cAAc,CAAC,WAAW;4DAAC,uBAAuB;4DAAG,uBAAuB;wDAAC;;;;;;;8DACxH,8OAAC,iIAAA,CAAA,YAAS;oDAAC,WAAU;;wDAAc,SAAS,MAAM;wDAAE,KAAK,YAAY,CAAC,cAAc,CAAC,WAAW;4DAAC,uBAAuB;4DAAG,uBAAuB;wDAAC;;;;;;;;2CAHtI,KAAK,IAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAa1C","debugId":null}},
    {"offset": {"line": 10527, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/calculators/_components/SwpCalculator.tsx"],"sourcesContent":["'use client';\n\nimport { useState } from 'react';\nimport { useForm, type SubmitHandler } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport * as z from 'zod';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';\nimport { CurrencyToggle, AVAILABLE_CURRENCIES, type Currency } from '@/components/shared/CurrencyToggle';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, TooltipProps } from 'recharts';\nimport { ChartConfig, ChartContainer, ChartTooltip, ChartTooltipContent, ChartLegend, ChartLegendContent } from \"@/components/ui/chart\"\nimport type { TooltipPayload } from 'recharts';\n\nconst formSchema = z.object({\n  initialInvestment: z.coerce.number().min(1, \"Initial investment must be greater than 0\"),\n  monthlyWithdrawal: z.coerce.number().min(1, \"Monthly withdrawal must be greater than 0\"),\n  expectedReturnRate: z.coerce.number().min(0, \"Expected return rate must be non-negative\").max(100),\n  withdrawalPeriodYears: z.coerce.number().int().min(1, \"Withdrawal period must be at least 1 year\").max(50),\n});\n// Removed the complex refine for now as the annual breakdown will make depletion clear.\n\ntype FormData = z.infer<typeof formSchema>;\n\ninterface AnnualSwpDataPoint {\n  year: number;\n  openingBalance: number;\n  interestEarned: number;\n  amountWithdrawn: number;\n  closingBalance: number;\n}\n\ninterface CalculationResult {\n  totalWithdrawn: number;\n  finalBalance: number;\n  message?: string;\n  annualBreakdown: AnnualSwpDataPoint[];\n  corpusDepletionYear?: number;\n}\n\nexport function SwpCalculator() {\n  const [result, setResult] = useState<CalculationResult | null>(null);\n  const [currency, setCurrency] = useState<Currency>(AVAILABLE_CURRENCIES.find(c => c.value === 'USD') || AVAILABLE_CURRENCIES[0]);\n\n  const form = useForm<FormData>({\n    resolver: zodResolver(formSchema),\n    defaultValues: { initialInvestment: 1000000, monthlyWithdrawal: 5000, expectedReturnRate: 7, withdrawalPeriodYears: 20 },\n  });\n\n  const onSubmit: SubmitHandler<FormData> = (data) => {\n    const P = data.initialInvestment;\n    const W_monthly = data.monthlyWithdrawal;\n    const annualRate = data.expectedReturnRate / 100;\n    const i_monthly = annualRate / 12;\n    const totalYears = data.withdrawalPeriodYears;\n\n    const annualBreakdown: AnnualSwpDataPoint[] = [];\n    let currentBalance = P;\n    let cumulativeWithdrawn = 0;\n    let corpusDepletionYear: number | undefined = undefined;\n\n    for (let year = 1; year <= totalYears; year++) {\n      if (currentBalance <= 0 && !corpusDepletionYear) {\n        corpusDepletionYear = year -1; // Depleted in the previous year or start of this year\n        // Fill remaining years with 0 balance if needed for chart consistency, or stop early\n      }\n      if (currentBalance <= 0) {\n         annualBreakdown.push({\n          year,\n          openingBalance: 0,\n          interestEarned: 0,\n          amountWithdrawn: 0,\n          closingBalance: 0,\n        });\n        continue;\n      }\n\n      const openingBalanceForYear = currentBalance;\n      let interestEarnedThisYear = 0;\n      let withdrawnThisYear = 0;\n\n      for (let month = 1; month <= 12; month++) {\n        if (currentBalance <= 0) break; // Stop if corpus depleted mid-year\n\n        const monthlyInterest = currentBalance * i_monthly;\n        interestEarnedThisYear += monthlyInterest;\n        currentBalance += monthlyInterest;\n        \n        const actualWithdrawal = Math.min(W_monthly, currentBalance); // Cannot withdraw more than available\n        withdrawnThisYear += actualWithdrawal;\n        currentBalance -= actualWithdrawal;\n        \n        if (currentBalance <= 0 && !corpusDepletionYear) {\n            corpusDepletionYear = year; // Depleted this year\n        }\n      }\n      \n      cumulativeWithdrawn += withdrawnThisYear;\n      annualBreakdown.push({\n        year,\n        openingBalance: parseFloat(openingBalanceForYear.toFixed(2)),\n        interestEarned: parseFloat(interestEarnedThisYear.toFixed(2)),\n        amountWithdrawn: parseFloat(withdrawnThisYear.toFixed(2)),\n        closingBalance: parseFloat(currentBalance.toFixed(2)),\n      });\n       if (currentBalance <= 0 && !corpusDepletionYear) corpusDepletionYear = year;\n    }\n    \n    let message = \"\";\n    if (corpusDepletionYear !== undefined && corpusDepletionYear <= totalYears && annualBreakdown[annualBreakdown.length-1].closingBalance <=0) {\n      message = `The corpus is projected to deplete in approximately year ${corpusDepletionYear}.`;\n    } else if (annualBreakdown[annualBreakdown.length-1].closingBalance <=0 ) {\n       message = `The corpus is projected to deplete within the specified period.`;\n    }\n\n\n    setResult({\n        totalWithdrawn: parseFloat(cumulativeWithdrawn.toFixed(2)),\n        finalBalance: parseFloat(currentBalance.toFixed(2)),\n        annualBreakdown,\n        message: message || undefined,\n        corpusDepletionYear,\n    });\n  };\n\n  const chartConfig = {\n    closingBalance: {\n      label: `Portfolio Balance (${currency.symbol})`,\n      color: \"hsl(var(--chart-1))\",\n    },\n  } satisfies ChartConfig;\n\n  const CustomTooltip = ({ active, payload, label }: TooltipProps<number, string>) => {\n    if (active && payload && payload.length) {\n      const yearData = result?.annualBreakdown.find(d => d.year.toString() === label);\n      return (\n        <div className=\"p-2 text-sm bg-background/90 border border-border rounded-md shadow-lg\">\n          <p className=\"font-bold mb-1\">{`Year: ${label}`}</p>\n          {payload.map((pld: TooltipPayload<number, string>) => (\n            <p key={pld.dataKey} style={{ color: pld.color }}>\n              {`${pld.name}: ${currency.symbol}${pld.value?.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}`}\n            </p>\n          ))}\n           {yearData && (\n             <>\n              <p style={{ color: \"hsl(var(--chart-2))\" }}>{`Interest Earned: ${currency.symbol}${yearData.interestEarned.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}`}</p>\n              <p style={{ color: \"hsl(var(--chart-3))\" }}>{`Amount Withdrawn: ${currency.symbol}${yearData.amountWithdrawn.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}`}</p>\n             </>\n          )}\n        </div>\n      );\n    }\n    return null;\n  };\n\n  return (\n    <Card className=\"shadow-lg\">\n      <CardHeader>\n        <CardTitle className=\"font-headline text-2xl\">SWP (Systematic Withdrawal Plan) Calculator</CardTitle>\n        <CardDescription>Plan your systematic withdrawals and see portfolio longevity.</CardDescription>\n      </CardHeader>\n      <form onSubmit={form.handleSubmit(onSubmit)}>\n        <CardContent className=\"space-y-6\">\n          <div>\n            <Label htmlFor=\"initialInvestment\">Initial Investment ({currency.symbol})</Label>\n            <Input id=\"initialInvestment\" type=\"number\" step=\"any\" {...form.register('initialInvestment')} />\n            {form.formState.errors.initialInvestment && <p className=\"text-sm text-destructive mt-1\">{form.formState.errors.initialInvestment.message}</p>}\n          </div>\n          <div>\n            <Label htmlFor=\"monthlyWithdrawal\">Desired Monthly Withdrawal ({currency.symbol})</Label>\n            <Input id=\"monthlyWithdrawal\" type=\"number\" step=\"any\" {...form.register('monthlyWithdrawal')} />\n            {form.formState.errors.monthlyWithdrawal && <p className=\"text-sm text-destructive mt-1\">{form.formState.errors.monthlyWithdrawal.message}</p>}\n          </div>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div>\n              <Label htmlFor=\"expectedReturnRate\">Expected Annual Return Rate (%)</Label>\n              <Input id=\"expectedReturnRate\" type=\"number\" step=\"any\" {...form.register('expectedReturnRate')} />\n              {form.formState.errors.expectedReturnRate && <p className=\"text-sm text-destructive mt-1\">{form.formState.errors.expectedReturnRate.message}</p>}\n            </div>\n            <div>\n              <Label htmlFor=\"withdrawalPeriodYears\">Withdrawal Period (Years)</Label>\n              <Input id=\"withdrawalPeriodYears\" type=\"number\" {...form.register('withdrawalPeriodYears')} />\n              {form.formState.errors.withdrawalPeriodYears && <p className=\"text-sm text-destructive mt-1\">{form.formState.errors.withdrawalPeriodYears.message}</p>}\n            </div>\n          </div>\n          <div>\n            <Label htmlFor=\"currency-toggle\">Currency</Label>\n            <CurrencyToggle\n              id=\"currency-toggle\"\n              selectedCurrency={currency}\n              onCurrencyChange={setCurrency}\n            />\n          </div>\n        </CardContent>\n        <CardFooter>\n          <Button type=\"submit\" className=\"w-full md:w-auto\">Calculate</Button>\n        </CardFooter>\n      </form>\n\n      {result && result.annualBreakdown.length > 0 && (\n        <div className=\"p-6 border-t\">\n          <h3 className=\"text-xl font-semibold mb-4 font-headline\">Results</h3>\n          <p><strong>Total Amount Withdrawn over {form.getValues(\"withdrawalPeriodYears\")} years:</strong> {currency.symbol}{result.totalWithdrawn.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}</p>\n          <p><strong>Estimated Final Balance after {form.getValues(\"withdrawalPeriodYears\")} years:</strong> {currency.symbol}{result.finalBalance.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}</p>\n          {result.message && <p className={`text-sm mt-2 ${result.finalBalance <=0 ? 'text-destructive' : 'text-muted-foreground'}`}>{result.message}</p>}\n          \n          <div className=\"my-8 h-80 md:h-96\">\n             <ChartContainer config={chartConfig} className=\"w-full h-full\">\n                <LineChart accessibilityLayer data={result.annualBreakdown} margin={{ top: 5, right: 20, left: 20, bottom: 5 }}>\n                    <CartesianGrid vertical={false} strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"year\" unit=\"yr\" tickLine={false} axisLine={false} tickMargin={8} />\n                    <YAxis \n                        tickLine={false} \n                        axisLine={false} \n                        tickMargin={8}\n                        tickFormatter={(value) => `${currency.symbol}${value.toLocaleString()}`} \n                    />\n                    <ChartTooltip content={<CustomTooltip />} cursorStyle={{strokeDasharray: '3 3', strokeWidth: 1.5, fillOpacity: 0.1}}/>\n                    <ChartLegend content={<ChartLegendContent />} />\n                    <Line dataKey=\"closingBalance\" type=\"monotone\" name={chartConfig.closingBalance.label} stroke={chartConfig.closingBalance.color} strokeWidth={2.5} dot={false} activeDot={{ r: 6 }} />\n                </LineChart>\n            </ChartContainer>\n          </div>\n\n          <h4 className=\"text-lg font-semibold mb-2 font-headline\">Annual Breakdown</h4>\n          <div className=\"max-h-96 overflow-y-auto\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Year</TableHead>\n                  <TableHead>Opening Balance</TableHead>\n                  <TableHead>Interest Earned</TableHead>\n                  <TableHead>Amount Withdrawn</TableHead>\n                  <TableHead className=\"text-right\">Closing Balance</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {result.annualBreakdown.map((item) => (\n                  <TableRow key={item.year}>\n                    <TableCell>{item.year}</TableCell>\n                    <TableCell>{currency.symbol}{item.openingBalance.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}</TableCell>\n                    <TableCell>{currency.symbol}{item.interestEarned.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}</TableCell>\n                    <TableCell>{currency.symbol}{item.amountWithdrawn.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}</TableCell>\n                    <TableCell className=\"text-right\">{currency.symbol}{item.closingBalance.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}</TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </div>\n          <p className=\"text-xs mt-2 text-muted-foreground\">Note: This calculation assumes returns are compounded monthly and withdrawals occur mid-month after interest. Market conditions can vary.</p>\n        </div>\n      )}\n    </Card>\n  );\n}\n\n    \n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 11296, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/calculators/_components/ElssTaxSavingCalculator.tsx"],"sourcesContent":["\n'use client';\n\nimport { useState } from 'react';\nimport { useForm, type SubmitHandler } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport * as z from 'zod';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';\nimport { CurrencyToggle, AVAILABLE_CURRENCIES, type Currency } from '@/components/shared/CurrencyToggle';\nimport { PieChart, Pie, Cell, TooltipProps } from 'recharts';\nimport { ChartConfig, ChartContainer, ChartTooltip, ChartTooltipContent, ChartLegend, ChartLegendContent } from \"@/components/ui/chart\";\nimport type { TooltipPayload } from 'recharts';\n\nconst formSchema = z.object({\n  investmentAmount: z.coerce.number().min(1, \"Investment amount must be greater than 0\").max(150000, \"Max ELSS deduction under Sec 80C is 1,50,000\"), // Max 80C limit\n  taxSlabRate: z.coerce.number().min(0, \"Tax slab rate must be non-negative\").max(100),\n});\ntype FormData = z.infer<typeof formSchema>;\n\ninterface PieChartDataPoint {\n  name: string;\n  value: number;\n  fill: string;\n}\n\ninterface CalculationResult {\n  taxSaved: number;\n  effectiveInvestmentDeductible: number; // The amount of investment considered for deduction\n  pieChartData: PieChartDataPoint[];\n  pieChartConfig: ChartConfig;\n}\n\nexport function ElssTaxSavingCalculator() { \n  const [result, setResult] = useState<CalculationResult | null>(null);\n  const [currency, setCurrency] = useState<Currency>(AVAILABLE_CURRENCIES.find(c => c.value === 'INR') || AVAILABLE_CURRENCIES[0]); // Default to INR\n\n  const form = useForm<FormData>({\n    resolver: zodResolver(formSchema),\n    defaultValues: { investmentAmount: 150000, taxSlabRate: 30 },\n  });\n\n  const onSubmit: SubmitHandler<FormData> = (data) => {\n    const effectiveInvestmentDeductible = Math.min(data.investmentAmount, 150000); // Cap at 80C limit\n    const taxSaved = (effectiveInvestmentDeductible * data.taxSlabRate) / 100;\n    const costAfterSaving = effectiveInvestmentDeductible - taxSaved;\n\n    const pieChartData: PieChartDataPoint[] = [\n      { name: 'Tax Saved', value: taxSaved, fill: 'hsl(var(--chart-1))' },\n      { name: 'Effective Investment Cost (Deductible Part)', value: costAfterSaving, fill: 'hsl(var(--chart-2))' },\n    ].filter(d => d.value > 0.009); // Filter out tiny or zero segments\n\n    const pieChartConfig: ChartConfig = {\n      'Tax Saved': { label: `Tax Saved (${currency.symbol})`, color: 'hsl(var(--chart-1))' },\n      'Effective Investment Cost (Deductible Part)': { label: `Effective Cost (${currency.symbol})`, color: 'hsl(var(--chart-2))' },\n    };\n    \n    setResult({ \n      taxSaved: parseFloat(taxSaved.toFixed(2)),\n      effectiveInvestmentDeductible: parseFloat(effectiveInvestmentDeductible.toFixed(2)),\n      pieChartData,\n      pieChartConfig\n    });\n  };\n\n  interface CustomPieTooltipProps extends TooltipProps<number, string> {\n    currency: Currency;\n  }\n\n  const CustomPieTooltip = ({ active, payload, currency: currentCurrency }: CustomPieTooltipProps) => {\n    if (active && payload && payload.length) {\n      const data = payload[0].payload as PieChartDataPoint;\n      const percentage = payload[0].percent !== undefined ? (payload[0].percent * 100).toFixed(2) : null;\n      return (\n        <div className=\"p-2 text-sm bg-background/90 border border-border rounded-md shadow-lg\">\n          <p className=\"font-bold mb-1\" style={{ color: data.fill }}>{data.name}</p>\n          <p>{`Amount: ${currentCurrency.symbol}${data.value.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}`}</p>\n          {percentage && result && <p>{`(${percentage}% of Deductible Investment: ${currentCurrency.symbol}${result.effectiveInvestmentDeductible.toLocaleString(undefined, {minimumFractionDigits:2, maximumFractionDigits:2})})`}</p>}\n        </div>\n      );\n    }\n    return null;\n  };\n\n  return (\n    <Card className=\"shadow-lg\">\n      <CardHeader>\n        <CardTitle className=\"font-headline text-2xl\">ELSS Tax Saving Calculator</CardTitle>\n        <CardDescription>Calculate potential tax savings with ELSS mutual funds under Section 80C.</CardDescription>\n      </CardHeader>\n      <form onSubmit={form.handleSubmit(onSubmit)}>\n        <CardContent className=\"space-y-6\">\n          <div>\n            <Label htmlFor=\"investmentAmount\">Investment Amount in ELSS ({currency.symbol})</Label>\n            <Input id=\"investmentAmount\" type=\"number\" step=\"any\" {...form.register('investmentAmount')} />\n            {form.formState.errors.investmentAmount && <p className=\"text-sm text-destructive mt-1\">{form.formState.errors.investmentAmount.message}</p>}\n            <p className=\"text-xs text-muted-foreground mt-1\">Maximum deduction under Section 80C is {currency.symbol}1,50,000.</p>\n          </div>\n          <div>\n            <Label htmlFor=\"taxSlabRate\">Your Income Tax Slab Rate (%)</Label>\n            <Input id=\"taxSlabRate\" type=\"number\" step=\"any\" {...form.register('taxSlabRate')} />\n            {form.formState.errors.taxSlabRate && <p className=\"text-sm text-destructive mt-1\">{form.formState.errors.taxSlabRate.message}</p>}\n          </div>\n          <div>\n            <Label htmlFor=\"currency-toggle\">Currency</Label>\n            <CurrencyToggle\n              id=\"currency-toggle\"\n              selectedCurrency={currency}\n              onCurrencyChange={(newCurrency) => {\n                setCurrency(newCurrency);\n                 if (form.formState.isSubmitted && result) {\n                   onSubmit(form.getValues());\n                }\n              }}\n            />\n          </div>\n        </CardContent>\n        <CardFooter>\n          <Button type=\"submit\" className=\"w-full md:w-auto\">Calculate Tax Saved</Button>\n        </CardFooter>\n      </form>\n\n      {result && (\n        <div className=\"p-6 border-t\">\n          <h3 className=\"text-xl font-semibold mb-2 font-headline\">Results</h3>\n          <p className=\"mb-1\"><strong>Investment Amount Considered for Deduction:</strong> {currency.symbol}{result.effectiveInvestmentDeductible.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}</p>\n          <p className=\"mb-6\"><strong>Estimated Tax Saved:</strong> {currency.symbol}{result.taxSaved.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}</p>\n\n          {result.pieChartData && result.pieChartData.length > 0 && result.pieChartConfig && (\n            <div className=\"my-8\">\n              <h4 className=\"text-lg font-semibold mb-2 text-center font-headline\">Breakdown of Deductible Investment</h4>\n              <div className=\"h-80 md:h-96 flex justify-center max-h-[300px] sm:max-h-[350px]\">\n                <ChartContainer config={result.pieChartConfig} className=\"aspect-square w-full h-full\">\n                  <PieChart>\n                    <ChartTooltip \n                      content={<CustomPieTooltip currency={currency}/>}\n                      cursor={{ fill: \"hsl(var(--muted))\", opacity: 0.3 }}\n                    />\n                    <Pie\n                      data={result.pieChartData}\n                      dataKey=\"value\"\n                      nameKey=\"name\"\n                      cx=\"50%\"\n                      cy=\"50%\"\n                      outerRadius={100}\n                      innerRadius={50} \n                      labelLine={false}\n                      label={({ name, percent }) => `${name.startsWith(\"Effective\") ? \"Effective Cost\" : name} (${(percent * 100).toFixed(0)}%)`}\n                    >\n                      {result.pieChartData.map((entry, index) => (\n                        <Cell key={`cell-pie-${index}`} fill={entry.fill} />\n                      ))}\n                    </Pie>\n                     <ChartLegend \n                        content={<ChartLegendContent nameKey=\"name\" />} \n                        verticalAlign=\"bottom\"\n                        align=\"center\"\n                        wrapperStyle={{paddingTop: \"20px\"}}\n                    />\n                  </PieChart>\n                </ChartContainer>\n              </div>\n            </div>\n          )}\n        </div>\n      )}\n    </Card>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 11764, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/calculators/_components/RetirementCorpusCalculator.tsx"],"sourcesContent":["\n'use client';\n\nimport { useState } from 'react';\nimport { useForm, type SubmitHandler } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport * as z from 'zod';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';\nimport { CurrencyToggle, AVAILABLE_CURRENCIES, type Currency } from '@/components/shared/CurrencyToggle';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Cell, TooltipProps } from 'recharts';\nimport { ChartConfig, ChartContainer, ChartTooltip, ChartTooltipContent } from \"@/components/ui/chart\";\nimport type { TooltipPayload } from 'recharts';\n\nconst formSchema = z.object({\n  currentAge: z.coerce.number().int().min(18, \"Current age must be at least 18\").max(99),\n  retirementAge: z.coerce.number().int().min(19, \"Retirement age must be greater than current age\").max(100),\n  monthlyExpensesAtRetirement: z.coerce.number().min(1, \"Monthly expenses must be greater than 0\"),\n  lifeExpectancyPostRetirement: z.coerce.number().int().min(1, \"Life expectancy must be at least 1 year\").max(50),\n  expectedInflationRate: z.coerce.number().min(0).max(20),\n  expectedReturnRatePostRetirement: z.coerce.number().min(0).max(20),\n}).refine(data => data.retirementAge > data.currentAge, {\n  message: \"Retirement age must be greater than current age.\",\n  path: [\"retirementAge\"],\n});\n\ntype FormData = z.infer<typeof formSchema>;\n\ninterface BarChartDataPoint {\n  name: string;\n  value: number;\n  fill: string;\n}\n\ninterface CalculationResult {\n  requiredCorpus: number;\n  totalNominalExpenses: number;\n  barChartData: BarChartDataPoint[];\n  barChartConfig: ChartConfig;\n}\n\nexport function RetirementCorpusCalculator() { \n  const [result, setResult] = useState<CalculationResult | null>(null);\n  const [currency, setCurrency] = useState<Currency>(AVAILABLE_CURRENCIES.find(c => c.value === 'USD') || AVAILABLE_CURRENCIES[0]);\n\n  const form = useForm<FormData>({\n    resolver: zodResolver(formSchema),\n    defaultValues: { currentAge: 30, retirementAge: 60, monthlyExpensesAtRetirement: 5000, lifeExpectancyPostRetirement: 25, expectedInflationRate: 6, expectedReturnRatePostRetirement: 7 },\n  });\n\n  const onSubmit: SubmitHandler<FormData> = (data) => {\n    const annualExpensesAtRetirement = data.monthlyExpensesAtRetirement * 12;\n    const yearsInRetirement = data.lifeExpectancyPostRetirement;\n    \n    const realReturnRate = (data.expectedReturnRatePostRetirement - data.expectedInflationRate) / 100;\n    \n    let calculatedRequiredCorpus;\n    if (realReturnRate <= 0) {\n      calculatedRequiredCorpus = annualExpensesAtRetirement * yearsInRetirement;\n    } else {\n       calculatedRequiredCorpus = annualExpensesAtRetirement * (1 - Math.pow(1 + realReturnRate, -yearsInRetirement)) / realReturnRate;\n    }\n\n    const totalNominalExpenses = data.monthlyExpensesAtRetirement * 12 * data.lifeExpectancyPostRetirement;\n\n    const currentBarChartConfig: ChartConfig = {\n      requiredCorpus: { label: `Required Corpus (${currency.symbol})`, color: \"hsl(var(--chart-1))\" },\n      totalNominalExpenses: { label: `Total Nominal Expenses (${currency.symbol})`, color: \"hsl(var(--chart-2))\" },\n    };\n\n    const barChartData: BarChartDataPoint[] = [\n      { name: 'Required Corpus', value: parseFloat(calculatedRequiredCorpus.toFixed(2)), fill: currentBarChartConfig.requiredCorpus.color as string },\n      { name: 'Total Nominal Expenses', value: parseFloat(totalNominalExpenses.toFixed(2)), fill: currentBarChartConfig.totalNominalExpenses.color as string },\n    ];\n    \n    setResult({ \n        requiredCorpus: parseFloat(calculatedRequiredCorpus.toFixed(2)),\n        totalNominalExpenses: parseFloat(totalNominalExpenses.toFixed(2)),\n        barChartData,\n        barChartConfig: currentBarChartConfig,\n    });\n  };\n\n  const CustomTooltip = ({ active, payload, currency: currentCurrency }: TooltipProps<number, string> & { currency: Currency }) => {\n    if (active && payload && payload.length) {\n      const data = payload[0];\n      return (\n        <div className=\"p-2 text-sm bg-background/90 border border-border rounded-md shadow-lg\">\n          <p className=\"font-bold mb-1\" style={{ color: data.payload.fill }}>{data.name}</p>\n          <p>{`Value: ${currentCurrency.symbol}${data.value?.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}`}</p>\n        </div>\n      );\n    }\n    return null;\n  };\n\n  return (\n    <Card className=\"shadow-lg\">\n      <CardHeader>\n        <CardTitle className=\"font-headline text-2xl\">Retirement Corpus Calculator</CardTitle>\n        <CardDescription>Estimate the corpus needed for your retirement. (Simplified)</CardDescription>\n      </CardHeader>\n      <form onSubmit={form.handleSubmit(onSubmit)}>\n        <CardContent className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div>\n              <Label htmlFor=\"currentAge\">Current Age (Years)</Label>\n              <Input id=\"currentAge\" type=\"number\" {...form.register('currentAge')} />\n              {form.formState.errors.currentAge && <p className=\"text-sm text-destructive mt-1\">{form.formState.errors.currentAge.message}</p>}\n            </div>\n            <div>\n              <Label htmlFor=\"retirementAge\">Expected Retirement Age (Years)</Label>\n              <Input id=\"retirementAge\" type=\"number\" {...form.register('retirementAge')} />\n              {form.formState.errors.retirementAge && <p className=\"text-sm text-destructive mt-1\">{form.formState.errors.retirementAge.message}</p>}\n            </div>\n          </div>\n           <div>\n            <Label htmlFor=\"monthlyExpensesAtRetirement\">Expected Monthly Expenses at Retirement ({currency.symbol})</Label>\n            <Input id=\"monthlyExpensesAtRetirement\" type=\"number\" step=\"any\" {...form.register('monthlyExpensesAtRetirement')} />\n            {form.formState.errors.monthlyExpensesAtRetirement && <p className=\"text-sm text-destructive mt-1\">{form.formState.errors.monthlyExpensesAtRetirement.message}</p>}\n          </div>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            <div>\n              <Label htmlFor=\"lifeExpectancyPostRetirement\">Life Expectancy Post-Retirement (Years)</Label>\n              <Input id=\"lifeExpectancyPostRetirement\" type=\"number\" {...form.register('lifeExpectancyPostRetirement')} />\n              {form.formState.errors.lifeExpectancyPostRetirement && <p className=\"text-sm text-destructive mt-1\">{form.formState.errors.lifeExpectancyPostRetirement.message}</p>}\n            </div>\n            <div>\n              <Label htmlFor=\"expectedInflationRate\">Expected Annual Inflation Rate (%)</Label>\n              <Input id=\"expectedInflationRate\" type=\"number\" step=\"any\" {...form.register('expectedInflationRate')} />\n              {form.formState.errors.expectedInflationRate && <p className=\"text-sm text-destructive mt-1\">{form.formState.errors.expectedInflationRate.message}</p>}\n            </div>\n             <div>\n              <Label htmlFor=\"expectedReturnRatePostRetirement\">Expected Post-Retirement Annual Return Rate (%)</Label>\n              <Input id=\"expectedReturnRatePostRetirement\" type=\"number\" step=\"any\" {...form.register('expectedReturnRatePostRetirement')} />\n              {form.formState.errors.expectedReturnRatePostRetirement && <p className=\"text-sm text-destructive mt-1\">{form.formState.errors.expectedReturnRatePostRetirement.message}</p>}\n            </div>\n          </div>\n          <div>\n            <Label htmlFor=\"currency-toggle\">Currency</Label>\n            <CurrencyToggle\n              id=\"currency-toggle\"\n              selectedCurrency={currency}\n              onCurrencyChange={(newCurrency) => {\n                setCurrency(newCurrency);\n                if (form.formState.isSubmitted && result) {\n                  onSubmit(form.getValues()); // Recalculate with new currency for chart labels\n                }\n              }}\n            />\n          </div>\n        </CardContent>\n        <CardFooter>\n          <Button type=\"submit\" className=\"w-full md:w-auto\">Calculate Corpus</Button>\n        </CardFooter>\n      </form>\n\n      {result && result.barChartData && (\n        <div className=\"p-6 border-t\">\n          <h3 className=\"text-xl font-semibold mb-4 font-headline\">Results (Simplified Estimate)</h3>\n          <p><strong>Estimated Retirement Corpus Required:</strong> {currency.symbol}{result.requiredCorpus.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}</p>\n          <p className=\"mb-4\"><strong>Total Nominal Expenses During Retirement (for comparison):</strong> {currency.symbol}{result.totalNominalExpenses.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}</p>\n          \n          {result.barChartData.length > 0 && result.barChartConfig && (\n            <div className=\"my-8\">\n              <h4 className=\"text-lg font-semibold mb-2 text-center font-headline\">Corpus vs. Nominal Expenses</h4>\n              <div className=\"h-80 md:h-96\">\n                <ChartContainer config={result.barChartConfig} className=\"w-full h-full\">\n                  <BarChart accessibilityLayer data={result.barChartData} margin={{ top: 5, right: 20, left: 20, bottom: 5 }}>\n                    <CartesianGrid vertical={false} strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"name\" tickLine={false} axisLine={false} tickMargin={8} />\n                    <YAxis \n                      tickLine={false} \n                      axisLine={false} \n                      tickMargin={8}\n                      tickFormatter={(value) => `${currency.symbol}${value.toLocaleString()}`}\n                    />\n                    <ChartTooltip \n                      content={<CustomTooltip currency={currency} />} \n                      cursorStyle={{ fill: \"hsl(var(--muted))\", opacity: 0.5 }}\n                    />\n                    <Bar dataKey=\"value\" radius={4} barSize={50}>\n                      {result.barChartData.map((entry) => (\n                        <Cell key={`cell-${entry.name}`} fill={entry.fill} />\n                      ))}\n                    </Bar>\n                  </BarChart>\n                </ChartContainer>\n              </div>\n            </div>\n          )}\n          <p className=\"text-xs mt-2 text-muted-foreground\">Note: This is a simplified calculation. Consider consulting a financial advisor for comprehensive retirement planning. Nominal expenses do not account for inflation during retirement or investment growth.</p>\n        </div>\n      )}\n    </Card>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 12402, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/calculators/_components/AnnuityCalculator.tsx"],"sourcesContent":["\n'use client';\n\nimport { useState } from 'react';\nimport { useForm, type SubmitHandler } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport * as z from 'zod';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';\nimport { CurrencyToggle, AVAILABLE_CURRENCIES, type Currency } from '@/components/shared/CurrencyToggle';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, TooltipProps } from 'recharts';\nimport { ChartConfig, ChartContainer, ChartTooltip, ChartTooltipContent, ChartLegend, ChartLegendContent } from \"@/components/ui/chart\"\nimport type { TooltipPayload } from 'recharts';\n\nconst formSchema = z.object({\n  principal: z.coerce.number().min(1, \"Principal amount must be greater than 0\"),\n  interestRate: z.coerce.number().min(0, \"Interest rate must be non-negative\").max(100),\n  years: z.coerce.number().int().min(1, \"Number of years must be at least 1\").max(50),\n  paymentFrequency: z.enum(['monthly', 'quarterly', 'annually']),\n});\ntype FormData = z.infer<typeof formSchema>;\n\ninterface AnnualAnnuityDataPoint {\n  year: number;\n  openingBalance: number;\n  interestEarned: number; // Interest earned on balance during the year\n  paymentsMade: number; // Total payments made during the year\n  closingBalance: number;\n}\n\ninterface CalculationResult {\n  periodicPayment: number;\n  totalPayments: number;\n  totalInterestPaidOrEarned: number; // From perspective of principal decreasing, it's interest paid by the fund\n  annualBreakdown: AnnualAnnuityDataPoint[];\n  corpusDepletionYear?: number;\n}\n\nexport function AnnuityCalculator() { \n  const [result, setResult] = useState<CalculationResult | null>(null);\n  const [currency, setCurrency] = useState<Currency>(AVAILABLE_CURRENCIES.find(c => c.value === 'USD') || AVAILABLE_CURRENCIES[0]);\n\n  const form = useForm<FormData>({\n    resolver: zodResolver(formSchema),\n    defaultValues: { principal: 100000, interestRate: 5, years: 10, paymentFrequency: 'annually' }, // Default to annually\n  });\n\n  const onSubmit: SubmitHandler<FormData> = (data) => {\n    const P = data.principal;\n    const annualRate = data.interestRate / 100;\n    const totalPayoutYears = data.years;\n    \n    let periodsPerYear = 12;\n    if (data.paymentFrequency === 'quarterly') periodsPerYear = 4;\n    if (data.paymentFrequency === 'annually') periodsPerYear = 1;\n\n    const n_total_periods = totalPayoutYears * periodsPerYear;\n    const r_periodic = annualRate / periodsPerYear;\n    \n    let pmt; // Periodic Payment\n    if (r_periodic === 0) {\n        pmt = P / n_total_periods;\n    } else {\n        pmt = (P * r_periodic * Math.pow(1 + r_periodic, n_total_periods)) / (Math.pow(1 + r_periodic, n_total_periods) - 1);\n    }\n    \n    const annualBreakdown: AnnualAnnuityDataPoint[] = [];\n    let currentBalance = P;\n    let cumulativePayments = 0;\n    let cumulativeInterest = 0;\n    let corpusDepletionYear: number | undefined = undefined;\n\n    for (let year = 1; year <= totalPayoutYears; year++) {\n       if (currentBalance <= 0 && !corpusDepletionYear) {\n        corpusDepletionYear = year - 1;\n      }\n      if (currentBalance <=0 && year > 1) { // Stop if balance depleted unless it's year 1 and pmt > principal\n         annualBreakdown.push({\n          year,\n          openingBalance: 0,\n          interestEarned: 0,\n          paymentsMade: 0,\n          closingBalance: 0,\n        });\n        continue;\n      }\n\n      const openingBalanceForYear = currentBalance;\n      let interestThisYear = 0;\n      let paymentsThisYear = 0;\n\n      for (let period = 1; period <= periodsPerYear; period++) {\n        if (currentBalance <= 0) break;\n        \n        const interestForPeriod = currentBalance * r_periodic;\n        interestThisYear += interestForPeriod;\n        currentBalance += interestForPeriod; // Interest accrues\n        \n        const actualPaymentThisPeriod = Math.min(pmt, currentBalance); // Cannot pay more than available\n        paymentsThisYear += actualPaymentThisPeriod;\n        currentBalance -= actualPaymentThisPeriod; // Payment reduces balance\n        \n        if (currentBalance <= 0 && !corpusDepletionYear) {\n            corpusDepletionYear = year;\n        }\n      }\n      cumulativePayments += paymentsThisYear;\n      cumulativeInterest += interestThisYear;\n\n      annualBreakdown.push({\n        year,\n        openingBalance: parseFloat(openingBalanceForYear.toFixed(2)),\n        interestEarned: parseFloat(interestThisYear.toFixed(2)),\n        paymentsMade: parseFloat(paymentsThisYear.toFixed(2)),\n        closingBalance: parseFloat(currentBalance.toFixed(2)),\n      });\n      if (currentBalance <= 0 && !corpusDepletionYear) corpusDepletionYear = year;\n    }\n\n    const totalPaymentsFinal = cumulativePayments; \n    // Total interest is complex here. If annuity is from an insurer, this is 'interest portion of payments'.\n    // If it's your own fund paying out, it's 'growth that supported payments'.\n    // For simplicity, let's take total payments - original principal.\n    const totalInterestPaidOrEarned = totalPaymentsFinal - P;\n\n    setResult({ \n        periodicPayment: parseFloat(pmt.toFixed(2)),\n        totalPayments: parseFloat(totalPaymentsFinal.toFixed(2)),\n        totalInterestPaidOrEarned: parseFloat(totalInterestPaidOrEarned.toFixed(2)),\n        annualBreakdown,\n        corpusDepletionYear,\n    });\n  };\n\n  const chartConfig = {\n    closingBalance: {\n      label: `Remaining Balance (${currency.symbol})`,\n      color: \"hsl(var(--chart-1))\",\n    },\n  } satisfies ChartConfig;\n\n  const CustomTooltip = ({ active, payload, label }: TooltipProps<number, string>) => {\n    if (active && payload && payload.length) {\n      const yearData = result?.annualBreakdown.find(d => d.year.toString() === label);\n      return (\n        <div className=\"p-2 text-sm bg-background/90 border border-border rounded-md shadow-lg\">\n          <p className=\"font-bold mb-1\">{`Year: ${label}`}</p>\n          {payload.map((pld: TooltipPayload<number, string>) => (\n            <p key={pld.dataKey} style={{ color: pld.color }}>\n              {`${pld.name}: ${currency.symbol}${pld.value?.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}`}\n            </p>\n          ))}\n           {yearData && (\n            <>\n              <p style={{color: \"hsl(var(--chart-2))\"}}>{`Interest Earned: ${currency.symbol}${yearData.interestEarned.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}`}</p>\n              <p style={{color: \"hsl(var(--chart-3))\"}}>{`Payments Made: ${currency.symbol}${yearData.paymentsMade.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}`}</p>\n            </>\n          )}\n        </div>\n      );\n    }\n    return null;\n  };\n\n  return (\n    <Card className=\"shadow-lg\">\n      <CardHeader>\n        <CardTitle className=\"font-headline text-2xl\">Annuity Payout Calculator</CardTitle>\n        <CardDescription>Calculate periodic payments from an annuity principal and see balance projection.</CardDescription>\n      </CardHeader>\n      <form onSubmit={form.handleSubmit(onSubmit)}>\n        <CardContent className=\"space-y-6\">\n          <div>\n            <Label htmlFor=\"principal\">Principal Amount (Annuity Value) ({currency.symbol})</Label>\n            <Input id=\"principal\" type=\"number\" step=\"any\" {...form.register('principal')} />\n            {form.formState.errors.principal && <p className=\"text-sm text-destructive mt-1\">{form.formState.errors.principal.message}</p>}\n          </div>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div>\n              <Label htmlFor=\"interestRate\">Annual Interest Rate / Growth Rate (%)</Label>\n              <Input id=\"interestRate\" type=\"number\" step=\"any\" {...form.register('interestRate')} />\n              {form.formState.errors.interestRate && <p className=\"text-sm text-destructive mt-1\">{form.formState.errors.interestRate.message}</p>}\n            </div>\n             <div>\n              <Label htmlFor=\"years\">Number of Years for Payout</Label>\n              <Input id=\"years\" type=\"number\" {...form.register('years')} />\n              {form.formState.errors.years && <p className=\"text-sm text-destructive mt-1\">{form.formState.errors.years.message}</p>}\n            </div>\n          </div>\n          <div>\n            <Label htmlFor=\"paymentFrequency\">Payment Frequency</Label>\n            <Select onValueChange={(value) => form.setValue('paymentFrequency', value as FormData['paymentFrequency'])} defaultValue={form.getValues('paymentFrequency')}>\n                <SelectTrigger id=\"paymentFrequency\"><SelectValue /></SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"annually\">Annually</SelectItem>\n                  <SelectItem value=\"quarterly\">Quarterly</SelectItem>\n                  <SelectItem value=\"monthly\">Monthly</SelectItem>\n                </SelectContent>\n            </Select>\n          </div>\n          <div>\n            <Label htmlFor=\"currency-toggle\">Currency</Label>\n            <CurrencyToggle\n              id=\"currency-toggle\"\n              selectedCurrency={currency}\n              onCurrencyChange={setCurrency}\n            />\n          </div>\n        </CardContent>\n        <CardFooter>\n          <Button type=\"submit\" className=\"w-full md:w-auto\">Calculate Annuity Payment</Button>\n        </CardFooter>\n      </form>\n\n      {result && result.annualBreakdown.length > 0 && (\n        <div className=\"p-6 border-t\">\n          <h3 className=\"text-xl font-semibold mb-4 font-headline\">Results</h3>\n          <p><strong>Calculated Periodic Payment ({form.getValues('paymentFrequency')}):</strong> {currency.symbol}{result.periodicPayment.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}</p>\n          <p><strong>Total Payments Received:</strong> {currency.symbol}{result.totalPayments.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}</p>\n          <p className=\"mb-6\"><strong>Total Interest/Growth Supporting Payments:</strong> {currency.symbol}{result.totalInterestPaidOrEarned.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}</p>\n          {result.corpusDepletionYear && result.annualBreakdown[result.annualBreakdown.length -1].closingBalance <= 0 && (\n             <p className=\"text-sm text-destructive mb-4\">Note: The principal is projected to deplete in year {result.corpusDepletionYear}.</p>\n          )}\n\n          <div className=\"my-8 h-80 md:h-96\">\n             <ChartContainer config={chartConfig} className=\"w-full h-full\">\n                <LineChart accessibilityLayer data={result.annualBreakdown} margin={{ top: 5, right: 20, left: 20, bottom: 5 }}>\n                    <CartesianGrid vertical={false} strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"year\" unit=\"yr\" tickLine={false} axisLine={false} tickMargin={8} />\n                    <YAxis \n                        tickLine={false} \n                        axisLine={false} \n                        tickMargin={8}\n                        tickFormatter={(val) => `${currency.symbol}${val.toLocaleString()}`} \n                    />\n                    <ChartTooltip content={<CustomTooltip />} cursorStyle={{strokeDasharray: '3 3', strokeWidth: 1.5, fillOpacity: 0.1}}/>\n                    <ChartLegend content={<ChartLegendContent />} />\n                    <Line dataKey=\"closingBalance\" type=\"monotone\" name={chartConfig.closingBalance.label} stroke={chartConfig.closingBalance.color} strokeWidth={2.5} dot={false} activeDot={{ r: 6 }} />\n                </LineChart>\n            </ChartContainer>\n          </div>\n\n          <h4 className=\"text-lg font-semibold mb-2 font-headline\">Annual Payout Breakdown</h4>\n          <div className=\"max-h-96 overflow-y-auto\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Year</TableHead>\n                  <TableHead>Opening Balance</TableHead>\n                  <TableHead>Interest/Growth Earned</TableHead>\n                  <TableHead>Payments Made</TableHead>\n                  <TableHead className=\"text-right\">Closing Balance</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {result.annualBreakdown.map((item) => (\n                  <TableRow key={item.year}>\n                    <TableCell>{item.year}</TableCell>\n                    <TableCell>{currency.symbol}{item.openingBalance.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}</TableCell>\n                    <TableCell>{currency.symbol}{item.interestEarned.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}</TableCell>\n                    <TableCell>{currency.symbol}{item.paymentsMade.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}</TableCell>\n                    <TableCell className=\"text-right\">{currency.symbol}{item.closingBalance.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}</TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </div>\n        </div>\n      )}\n    </Card>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 13232, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/calculators/_components/BearMarketSurvivalCalculator.tsx"],"sourcesContent":["\n'use client';\n\nimport { useState } from 'react';\nimport { useForm, type SubmitHandler } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport * as z from 'zod';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';\nimport { CurrencyToggle, AVAILABLE_CURRENCIES, type Currency } from '@/components/shared/CurrencyToggle';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, TooltipProps, Cell } from 'recharts';\nimport { ChartConfig, ChartContainer, ChartTooltip, ChartTooltipContent } from \"@/components/ui/chart\";\nimport type { TooltipPayload } from 'recharts';\n\nconst formSchema = z.object({\n  portfolioValue: z.coerce.number().min(1, \"Portfolio value must be greater than 0\"),\n  potentialDrawdown: z.coerce.number().min(1, \"Potential drawdown must be at least 1%\").max(100, \"Drawdown cannot exceed 100%\"),\n  recoveryRate: z.coerce.number().min(0.1, \"Recovery rate must be positive\").max(100, \"Recovery rate unrealistic if too high\").optional(),\n});\ntype FormData = z.infer<typeof formSchema>;\n\ninterface ChartDataPoint {\n  name: string;\n  value: number;\n  fill: string;\n}\n\ninterface CalculationResult {\n  portfolioValue: number;\n  valueAfterDrawdown: number;\n  percentageNeededToRecover: number;\n  chartData: ChartDataPoint[];\n}\n\nexport function BearMarketSurvivalCalculator() { \n  const [result, setResult] = useState<CalculationResult | null>(null);\n  const [currency, setCurrency] = useState<Currency>(AVAILABLE_CURRENCIES.find(c => c.value === 'USD') || AVAILABLE_CURRENCIES[0]);\n\n  const form = useForm<FormData>({\n    resolver: zodResolver(formSchema),\n    defaultValues: { portfolioValue: 100000, potentialDrawdown: 30, recoveryRate: 7 },\n  });\n\n  const chartConfig = {\n    portfolioValue: { label: `Initial Value (${currency.symbol})`, color: \"hsl(var(--chart-1))\" },\n    valueAfterDrawdown: { label: `Value After Drawdown (${currency.symbol})`, color: \"hsl(var(--destructive))\" },\n  } satisfies ChartConfig;\n\n  const onSubmit: SubmitHandler<FormData> = (data) => {\n    const drawdownDecimal = data.potentialDrawdown / 100;\n    const valueAfterDrawdown = data.portfolioValue * (1 - drawdownDecimal);\n    const percentageNeededToRecover = valueAfterDrawdown > 0 ? (data.portfolioValue / valueAfterDrawdown - 1) * 100 : (data.portfolioValue > 0 ? Infinity : 0);\n    \n    const chartData: ChartDataPoint[] = [\n      { name: 'Initial Value', value: parseFloat(data.portfolioValue.toFixed(2)), fill: chartConfig.portfolioValue.color },\n      { name: 'Value After Drawdown', value: parseFloat(valueAfterDrawdown.toFixed(2)), fill: chartConfig.valueAfterDrawdown.color },\n    ];\n\n    setResult({ \n        portfolioValue: data.portfolioValue,\n        valueAfterDrawdown: parseFloat(valueAfterDrawdown.toFixed(2)),\n        percentageNeededToRecover: parseFloat(percentageNeededToRecover.toFixed(2)),\n        chartData,\n    });\n  };\n\n  const CustomTooltip = ({ active, payload }: TooltipProps<number, string>) => {\n    if (active && payload && payload.length) {\n      const data = payload[0];\n      return (\n        <div className=\"p-2 text-sm bg-background/90 border border-border rounded-md shadow-lg\">\n          <p className=\"font-bold mb-1\" style={{ color: data.payload.fill }}>{data.name}</p>\n          <p>{`Value: ${currency.symbol}${data.value?.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}`}</p>\n        </div>\n      );\n    }\n    return null;\n  };\n\n  return (\n    <Card className=\"shadow-lg\">\n      <CardHeader>\n        <CardTitle className=\"font-headline text-2xl\">Bear Market Survival Calculator</CardTitle>\n        <CardDescription>Assess portfolio resilience and recovery in bear markets.</CardDescription>\n      </CardHeader>\n      <form onSubmit={form.handleSubmit(onSubmit)}>\n        <CardContent className=\"space-y-6\">\n          <div>\n            <Label htmlFor=\"portfolioValue\">Current Portfolio Value ({currency.symbol})</Label>\n            <Input id=\"portfolioValue\" type=\"number\" step=\"any\" {...form.register('portfolioValue')} />\n            {form.formState.errors.portfolioValue && <p className=\"text-sm text-destructive mt-1\">{form.formState.errors.portfolioValue.message}</p>}\n          </div>\n          <div>\n            <Label htmlFor=\"potentialDrawdown\">Potential Market Drawdown (%)</Label>\n            <Input id=\"potentialDrawdown\" type=\"number\" step=\"any\" {...form.register('potentialDrawdown')} />\n            {form.formState.errors.potentialDrawdown && <p className=\"text-sm text-destructive mt-1\">{form.formState.errors.potentialDrawdown.message}</p>}\n          </div>\n          <div>\n            <Label htmlFor=\"currency-toggle\">Currency</Label>\n            <CurrencyToggle\n              id=\"currency-toggle\"\n              selectedCurrency={currency}\n              onCurrencyChange={(newCurrency) => {\n                setCurrency(newCurrency);\n                if (form.formState.isSubmitted && result) {\n                   onSubmit(form.getValues());\n                }\n              }}\n            />\n          </div>\n        </CardContent>\n        <CardFooter>\n          <Button type=\"submit\" className=\"w-full md:w-auto\">Calculate</Button>\n        </CardFooter>\n      </form>\n\n      {result && (\n        <div className=\"p-6 border-t\">\n          <h3 className=\"text-xl font-semibold mb-4 font-headline\">Results</h3>\n          <p><strong>Portfolio Value After {form.getValues(\"potentialDrawdown\")}% Drawdown:</strong> {currency.symbol}{result.valueAfterDrawdown.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</p>\n          <p className=\"mb-6\"><strong>Percentage Gain Needed to Recover to Original Value:</strong> {isFinite(result.percentageNeededToRecover) ? result.percentageNeededToRecover.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }) + '%' : 'N/A (Value is zero)'}</p>\n       \n          {result.chartData && result.chartData.length > 0 && (\n            <div className=\"my-8\">\n              <h4 className=\"text-lg font-semibold mb-2 text-center font-headline\">Portfolio Value Comparison</h4>\n              <div className=\"h-80 md:h-96\">\n                <ChartContainer config={chartConfig} className=\"w-full h-full\">\n                  <BarChart accessibilityLayer data={result.chartData} margin={{ top: 5, right: 20, left: 20, bottom: 5 }}>\n                    <CartesianGrid vertical={false} strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"name\" tickLine={false} axisLine={false} tickMargin={8} />\n                    <YAxis \n                      tickLine={false} \n                      axisLine={false} \n                      tickMargin={8}\n                      tickFormatter={(value) => `${currency.symbol}${value.toLocaleString()}`}\n                    />\n                    <ChartTooltip \n                      content={<CustomTooltip />} \n                      cursorStyle={{ fill: \"hsl(var(--muted))\", opacity: 0.5 }}\n                    />\n                    <Bar dataKey=\"value\" radius={4} barSize={40}>\n                      {result.chartData.map((entry) => (\n                        <Cell key={`cell-${entry.name}`} fill={entry.fill} />\n                      ))}\n                    </Bar>\n                  </BarChart>\n                </ChartContainer>\n              </div>\n            </div>\n          )}\n        </div>\n      )}\n    </Card>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 13694, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/calculators/_components/GlobalAllocationCalculator.tsx"],"sourcesContent":["\n'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { useForm, type SubmitHandler } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport * as z from 'zod';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';\nimport { CurrencyToggle, AVAILABLE_CURRENCIES, type Currency } from '@/components/shared/CurrencyToggle';\nimport { PieChart, Pie, Cell, TooltipProps } from 'recharts';\nimport { ChartConfig, ChartContainer, ChartTooltip, ChartTooltipContent, ChartLegend, ChartLegendContent } from \"@/components/ui/chart\";\nimport type { TooltipPayload } from 'recharts';\n\nconst formSchema = z.object({\n  northAmerica: z.coerce.number().min(0, \"Allocation must be non-negative.\").max(100).optional().default(0),\n  europe: z.coerce.number().min(0, \"Allocation must be non-negative.\").max(100).optional().default(0),\n  asiaPacific: z.coerce.number().min(0, \"Allocation must be non-negative.\").max(100).optional().default(0),\n  emergingMarkets: z.coerce.number().min(0, \"Allocation must be non-negative.\").max(100).optional().default(0),\n  otherRegions: z.coerce.number().min(0, \"Allocation must be non-negative.\").max(100).optional().default(0),\n}).refine(data => {\n  const total = (data.northAmerica || 0) + (data.europe || 0) + (data.asiaPacific || 0) + (data.emergingMarkets || 0) + (data.otherRegions || 0);\n  return total <= 100; \n}, {\n  message: \"Total allocation cannot exceed 100%.\",\n  path: [\"northAmerica\"], \n});\n\ntype FormData = z.infer<typeof formSchema>;\n\ninterface AllocationItem {\n    name: string;\n    percentage: number;\n    fill: string; // Added for chart\n}\n\nconst REGION_COLORS: Record<string, string> = {\n    \"North America\": \"hsl(var(--chart-1))\",\n    \"Europe\": \"hsl(var(--chart-2))\",\n    \"Asia-Pacific\": \"hsl(var(--chart-3))\",\n    \"Emerging Markets\": \"hsl(var(--chart-4))\",\n    \"Other Regions\": \"hsl(var(--chart-5))\",\n};\n\nexport function GlobalAllocationCalculator() { \n  const [result, setResult] = useState<AllocationItem[] | null>(null);\n  const [totalPercentage, setTotalPercentage] = useState<number>(0);\n  const [currency, setCurrency] = useState<Currency>(AVAILABLE_CURRENCIES.find(c => c.value === 'USD') || AVAILABLE_CURRENCIES[0]);\n  const [chartConfig, setChartConfig] = useState<ChartConfig | null>(null);\n\n  const form = useForm<FormData>({\n    resolver: zodResolver(formSchema),\n    defaultValues: { northAmerica: 60, europe: 20, asiaPacific: 10, emergingMarkets: 10, otherRegions: 0 },\n  });\n  \n  const { watch, getValues, formState: { errors } } = form;\n\n  useEffect(() => {\n    const calculateAndSetTotalPercentage = (values: Partial<FormData>) => {\n      const currentTotal = \n        (values.northAmerica || 0) + \n        (values.europe || 0) + \n        (values.asiaPacific || 0) + \n        (values.emergingMarkets || 0) + \n        (values.otherRegions || 0);\n      setTotalPercentage(currentTotal);\n    };\n    \n    const subscription = watch((values) => {\n      calculateAndSetTotalPercentage(values as FormData);\n    });\n    \n    calculateAndSetTotalPercentage(getValues());\n    \n    return () => subscription.unsubscribe();\n  }, [watch, getValues, setTotalPercentage]);\n\n\n  const onSubmit: SubmitHandler<FormData> = (data) => {\n    const allocationsRaw = [\n        { name: \"North America\", percentage: data.northAmerica || 0},\n        { name: \"Europe\", percentage: data.europe || 0 },\n        { name: \"Asia-Pacific\", percentage: data.asiaPacific || 0 },\n        { name: \"Emerging Markets\", percentage: data.emergingMarkets || 0 },\n        { name: \"Other Regions\", percentage: data.otherRegions || 0 },\n    ];\n\n    const currentTotal = allocationsRaw.reduce((sum, item) => sum + item.percentage, 0);\n    setTotalPercentage(currentTotal); \n\n    const allocationsWithColors: AllocationItem[] = allocationsRaw\n        .filter(item => item.percentage > 0)\n        .map(item => ({\n            ...item,\n            fill: REGION_COLORS[item.name] || \"hsl(var(--muted))\",\n        }));\n    \n    setResult(allocationsWithColors);\n\n    const newChartConfig = allocationsWithColors.reduce((acc, item) => {\n      acc[item.name] = { \n        label: item.name,\n        color: item.fill,\n      };\n      return acc;\n    }, {} as ChartConfig);\n    setChartConfig(newChartConfig);\n  };\n  \n  const renderAllocationField = (name: keyof FormData, label: string) => (\n    <div>\n      <Label htmlFor={name}>{label} (%)</Label>\n      <Input id={name} type=\"number\" {...form.register(name)} className=\"mt-1\" />\n      {errors[name] && <p className=\"text-sm text-destructive mt-1\">{errors[name]?.message}</p>}\n    </div>\n  );\n\n  interface CustomPieTooltipProps extends TooltipProps<number, string> {}\n\n  const CustomPieTooltip = ({ active, payload }: CustomPieTooltipProps) => {\n    if (active && payload && payload.length) {\n      const data = payload[0].payload as AllocationItem; \n      return (\n        <div className=\"p-2 text-sm bg-background/90 border border-border rounded-md shadow-lg\">\n          <p className=\"font-bold mb-1\" style={{ color: data.fill }}>{data.name}</p>\n          <p>{`Percentage: ${data.percentage.toFixed(2)}%`}</p>\n        </div>\n      );\n    }\n    return null;\n  };\n\n  return (\n    <Card className=\"shadow-lg\">\n      <CardHeader>\n        <CardTitle className=\"font-headline text-2xl\">Global Allocation Calculator</CardTitle>\n        <CardDescription>Plan your international investment allocation by percentage. Current total: {totalPercentage.toFixed(0)}%</CardDescription>\n      </CardHeader>\n      <form onSubmit={form.handleSubmit(onSubmit)}>\n        <CardContent className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-x-6 gap-y-4\">\n            {renderAllocationField(\"northAmerica\", \"North America\")}\n            {renderAllocationField(\"europe\", \"Europe\")}\n            {renderAllocationField(\"asiaPacific\", \"Asia-Pacific\")}\n            {renderAllocationField(\"emergingMarkets\", \"Emerging Markets\")}\n            {renderAllocationField(\"otherRegions\", \"Other Regions\")}\n          </div>\n            {errors.northAmerica && errors.northAmerica.message?.includes(\"Total allocation\") && <p className=\"text-sm text-destructive mt-1\">{errors.northAmerica.message}</p>}\n          <div>\n            <Label htmlFor=\"currency-toggle\">Reference Currency (for context)</Label>\n            <CurrencyToggle\n              id=\"currency-toggle\"\n              selectedCurrency={currency}\n              onCurrencyChange={setCurrency}\n            />\n          </div>\n        </CardContent>\n        <CardFooter>\n          <Button type=\"submit\" className=\"w-full md:w-auto\">View Allocation</Button>\n        </CardFooter>\n      </form>\n\n      {result && result.length > 0 && totalPercentage <= 100 && chartConfig && (\n        <div className=\"p-6 border-t\">\n          <h3 className=\"text-xl font-semibold mb-4 font-headline\">Global Allocation Breakdown</h3>\n          <p className=\"mb-2\"><strong>Total Allocated:</strong> {totalPercentage.toLocaleString()}%</p>\n          {totalPercentage < 100 && <p className=\"text-sm text-amber-600 mb-2\">Note: Total allocation is less than 100%. {(100-totalPercentage).toLocaleString()}% is unallocated.</p>}\n          \n          <div className=\"my-8 h-80 md:h-96 flex justify-center\">\n            <ChartContainer config={chartConfig} className=\"aspect-square max-h-[300px] sm:max-h-[350px]\">\n              <PieChart>\n                <ChartTooltip \n                  content={<CustomPieTooltip />}\n                  cursor={{ fill: \"hsl(var(--muted))\", opacity: 0.3 }}\n                />\n                <Pie\n                  data={result}\n                  dataKey=\"percentage\"\n                  nameKey=\"name\"\n                  cx=\"50%\"\n                  cy=\"50%\"\n                  outerRadius={100}\n                  labelLine={false}\n                  label={({ name, percentage }) => `${name} (${percentage.toFixed(0)}%)`}\n                >\n                  {result.map((entry, index) => (\n                    <Cell key={`cell-pie-${index}`} fill={entry.fill} />\n                  ))}\n                </Pie>\n                <ChartLegend \n                    content={<ChartLegendContent nameKey=\"name\" />} \n                    verticalAlign=\"bottom\"\n                    align=\"center\"\n                    wrapperStyle={{paddingTop: \"20px\"}}\n                />\n              </PieChart>\n            </ChartContainer>\n          </div>\n\n          <ul className=\"space-y-1 mt-6\">\n            {result.map(item => (\n              <li key={item.name} className=\"flex justify-between\">\n                <span className=\"flex items-center\">\n                   <span className=\"inline-block w-3 h-3 rounded-sm mr-2\" style={{ backgroundColor: item.fill }}></span>\n                   {item.name}:\n                </span>\n                <span>{item.percentage.toLocaleString()}%</span>\n              </li>\n            ))}\n          </ul>\n        </div>\n      )}\n    </Card>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 14181, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/calculators/_components/MarketTimingCostCalculator.tsx"],"sourcesContent":["'use client';\n\nimport { useState } from 'react';\nimport { useForm, type SubmitHandler } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport * as z from 'zod';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';\nimport { CurrencyToggle, AVAILABLE_CURRENCIES, type Currency } from '@/components/shared/CurrencyToggle';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, TooltipProps } from 'recharts';\nimport { ChartConfig, ChartContainer, ChartTooltip, ChartTooltipContent, ChartLegend, ChartLegendContent } from \"@/components/ui/chart\"\nimport type { TooltipPayload } from 'recharts';\n\nconst formSchema = z.object({\n  initialInvestment: z.coerce.number().min(1, \"Initial investment must be greater than 0\"),\n  averageMarketReturn: z.coerce.number().min(-100).max(100),\n  returnIfBestDaysMissed: z.coerce.number().min(-100).max(100),\n  periodYears: z.coerce.number().int().min(1, \"Period must be at least 1 year\").max(50),\n});\ntype FormData = z.infer<typeof formSchema>;\n\ninterface AnnualDataPoint {\n  year: number;\n  valueIfInvested: number;\n  valueIfBestDaysMissed: number;\n  opportunityCostThisYear: number; // Difference for that specific year's end value\n}\n\ninterface CalculationResult {\n  finalValueIfInvested: number;\n  finalValueIfBestDaysMissed: number;\n  finalOpportunityCost: number;\n  annualBreakdown: AnnualDataPoint[];\n}\n\nexport function MarketTimingCostCalculator() { \n  const [result, setResult] = useState<CalculationResult | null>(null);\n  const [currency, setCurrency] = useState<Currency>(AVAILABLE_CURRENCIES.find(c => c.value === 'USD') || AVAILABLE_CURRENCIES[0]);\n\n  const form = useForm<FormData>({\n    resolver: zodResolver(formSchema),\n    defaultValues: { initialInvestment: 10000, averageMarketReturn: 7, returnIfBestDaysMissed: 3, periodYears: 10 },\n  });\n\n  const onSubmit: SubmitHandler<FormData> = (data) => {\n    const P = data.initialInvestment;\n    const rMarket_annual = data.averageMarketReturn / 100;\n    const rMissed_annual = data.returnIfBestDaysMissed / 100;\n    const t_years = data.periodYears;\n\n    const annualBreakdown: AnnualDataPoint[] = [];\n    let currentInvestedValue = P;\n    let currentMissedValue = P;\n\n    for (let year = 1; year <= t_years; year++) {\n      currentInvestedValue = P * Math.pow(1 + rMarket_annual, year);\n      currentMissedValue = P * Math.pow(1 + rMissed_annual, year);\n      const opportunityCostThisYear = currentInvestedValue - currentMissedValue;\n      \n      annualBreakdown.push({\n        year,\n        valueIfInvested: parseFloat(currentInvestedValue.toFixed(2)),\n        valueIfBestDaysMissed: parseFloat(currentMissedValue.toFixed(2)),\n        opportunityCostThisYear: parseFloat(opportunityCostThisYear.toFixed(2)),\n      });\n    }\n    \n    const finalValueIfInvested = annualBreakdown[annualBreakdown.length-1].valueIfInvested;\n    const finalValueIfBestDaysMissed = annualBreakdown[annualBreakdown.length-1].valueIfBestDaysMissed;\n    const finalOpportunityCost = finalValueIfInvested - finalValueIfBestDaysMissed;\n    \n    setResult({ \n        finalValueIfInvested,\n        finalValueIfBestDaysMissed,\n        finalOpportunityCost: parseFloat(finalOpportunityCost.toFixed(2)),\n        annualBreakdown,\n    });\n  };\n\n  const chartConfig = {\n    valueIfInvested: {\n      label: `Value (Fully Invested) (${currency.symbol})`,\n      color: \"hsl(var(--chart-1))\",\n    },\n    valueIfBestDaysMissed: {\n      label: `Value (Best Days Missed) (${currency.symbol})`,\n      color: \"hsl(var(--chart-2))\",\n    },\n  } satisfies ChartConfig;\n\n  const CustomTooltip = ({ active, payload, label }: TooltipProps<number, string>) => {\n    if (active && payload && payload.length) {\n      const yearData = result?.annualBreakdown.find(d => d.year.toString() === label);\n      return (\n        <div className=\"p-2 text-sm bg-background/90 border border-border rounded-md shadow-lg\">\n          <p className=\"font-bold mb-1\">{`Year: ${label}`}</p>\n          {payload.map((pld: TooltipPayload<number, string>) => (\n            <p key={pld.dataKey} style={{ color: pld.color }}>\n              {`${pld.name}: ${currency.symbol}${pld.value?.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}`}\n            </p>\n          ))}\n           {yearData && (\n             <p style={{ color: \"hsl(var(--chart-3))\" }}>\n                {`Opportunity Cost: ${currency.symbol}${yearData.opportunityCostThisYear.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}`}\n             </p>\n          )}\n        </div>\n      );\n    }\n    return null;\n  };\n\n  return (\n    <Card className=\"shadow-lg\">\n      <CardHeader>\n        <CardTitle className=\"font-headline text-2xl\">Market Timing Cost Calculator</CardTitle>\n        <CardDescription>Understand the potential cost of missing the market's best days with annual comparison.</CardDescription>\n      </CardHeader>\n      <form onSubmit={form.handleSubmit(onSubmit)}>\n        <CardContent className=\"space-y-6\">\n          <div>\n            <Label htmlFor=\"initialInvestment\">Initial Investment ({currency.symbol})</Label>\n            <Input id=\"initialInvestment\" type=\"number\" step=\"any\" {...form.register('initialInvestment')} />\n            {form.formState.errors.initialInvestment && <p className=\"text-sm text-destructive mt-1\">{form.formState.errors.initialInvestment.message}</p>}\n          </div>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div>\n              <Label htmlFor=\"averageMarketReturn\">Average Annual Market Return (%) (If fully invested)</Label>\n              <Input id=\"averageMarketReturn\" type=\"number\" step=\"any\" {...form.register('averageMarketReturn')} />\n              {form.formState.errors.averageMarketReturn && <p className=\"text-sm text-destructive mt-1\">{form.formState.errors.averageMarketReturn.message}</p>}\n            </div>\n            <div>\n              <Label htmlFor=\"returnIfBestDaysMissed\">Annual Return (%) (If best days are missed)</Label>\n              <Input id=\"returnIfBestDaysMissed\" type=\"number\" step=\"any\" {...form.register('returnIfBestDaysMissed')} />\n              {form.formState.errors.returnIfBestDaysMissed && <p className=\"text-sm text-destructive mt-1\">{form.formState.errors.returnIfBestDaysMissed.message}</p>}\n            </div>\n          </div>\n          <div>\n            <Label htmlFor=\"periodYears\">Investment Period (Years)</Label>\n            <Input id=\"periodYears\" type=\"number\" {...form.register('periodYears')} />\n            {form.formState.errors.periodYears && <p className=\"text-sm text-destructive mt-1\">{form.formState.errors.periodYears.message}</p>}\n          </div>\n          <div>\n            <Label htmlFor=\"currency-toggle\">Currency</Label>\n            <CurrencyToggle\n              id=\"currency-toggle\"\n              selectedCurrency={currency}\n              onCurrencyChange={setCurrency}\n            />\n          </div>\n        </CardContent>\n        <CardFooter>\n          <Button type=\"submit\" className=\"w-full md:w-auto\">Calculate Cost</Button>\n        </CardFooter>\n      </form>\n\n      {result && result.annualBreakdown.length > 0 && (\n        <div className=\"p-6 border-t\">\n          <h3 className=\"text-xl font-semibold mb-4 font-headline\">Results</h3>\n          <p className=\"mb-2\"><strong>Final Portfolio Value (If Fully Invested):</strong> {currency.symbol}{result.finalValueIfInvested.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}</p>\n          <p className=\"mb-2\"><strong>Final Portfolio Value (If Best Days Missed):</strong> {currency.symbol}{result.finalValueIfBestDaysMissed.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}</p>\n          <p className=\"mb-6\"><strong>Total Opportunity Cost of Market Timing:</strong> {currency.symbol}{result.finalOpportunityCost.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}</p>\n        \n          <div className=\"my-8 h-80 md:h-96\">\n             <ChartContainer config={chartConfig} className=\"w-full h-full\">\n                <LineChart accessibilityLayer data={result.annualBreakdown} margin={{ top: 5, right: 20, left: 20, bottom: 5 }}>\n                    <CartesianGrid vertical={false} strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"year\" unit=\"yr\" tickLine={false} axisLine={false} tickMargin={8} />\n                    <YAxis \n                        tickLine={false} \n                        axisLine={false} \n                        tickMargin={8}\n                        tickFormatter={(value) => `${currency.symbol}${value.toLocaleString()}`} \n                    />\n                    <ChartTooltip content={<CustomTooltip />} cursorStyle={{strokeDasharray: '3 3', strokeWidth: 1.5, fillOpacity: 0.1}}/>\n                    <ChartLegend content={<ChartLegendContent />} />\n                    <Line dataKey=\"valueIfInvested\" type=\"monotone\" name={chartConfig.valueIfInvested.label} stroke={chartConfig.valueIfInvested.color} strokeWidth={2.5} dot={false} activeDot={{ r: 6 }} />\n                    <Line dataKey=\"valueIfBestDaysMissed\" type=\"monotone\" name={chartConfig.valueIfBestDaysMissed.label} stroke={chartConfig.valueIfBestDaysMissed.color} strokeWidth={2.5} dot={false} activeDot={{ r: 6 }} />\n                </LineChart>\n            </ChartContainer>\n          </div>\n\n          <h4 className=\"text-lg font-semibold mb-2 font-headline\">Annual Breakdown</h4>\n          <div className=\"max-h-96 overflow-y-auto\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Year</TableHead>\n                  <TableHead>Value (Fully Invested)</TableHead>\n                  <TableHead>Value (Best Days Missed)</TableHead>\n                  <TableHead className=\"text-right\">Opportunity Cost</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {result.annualBreakdown.map((item) => (\n                  <TableRow key={item.year}>\n                    <TableCell>{item.year}</TableCell>\n                    <TableCell>{currency.symbol}{item.valueIfInvested.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}</TableCell>\n                    <TableCell>{currency.symbol}{item.valueIfBestDaysMissed.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}</TableCell>\n                    <TableCell className=\"text-right\">{currency.symbol}{item.opportunityCostThisYear.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}</TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </div>\n        </div>\n      )}\n    </Card>\n  );\n}\n\n    \n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 14893, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/calculators/_components/CurrencyConverterCalculator.tsx"],"sourcesContent":["\n'use client';\n\nimport { useState, useEffect } from 'react';\nimport { useForm, type SubmitHandler } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport * as z from 'zod';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';\nimport { AVAILABLE_CURRENCIES, type Currency } from '@/components/shared/CurrencyToggle'; // Reusing currency definitions\n\nconst formSchema = z.object({\n  amount: z.coerce.number().min(0, \"Amount must be non-negative\"),\n  fromCurrencyValue: z.string().min(1, \"Please select a source currency\"),\n  toCurrencyValue: z.string().min(1, \"Please select a target currency\"),\n});\ntype FormData = z.infer<typeof formSchema>;\n\ninterface CalculationResult {\n  originalAmount: number;\n  convertedAmount: number;\n  fromCurrency: Currency;\n  toCurrency: Currency;\n  rateUsed: number | null;\n}\n\n// Static placeholder rates. In a real app, these would come from an API.\nconst PLACEHOLDER_RATES: Record<string, Record<string, number>> = {\n  USD: { EUR: 0.93, GBP: 0.79, INR: 83.50, JPY: 157.00, AUD: 1.50, CAD: 1.37, CHF: 0.90, CNY: 7.25, USD: 1.00 },\n  EUR: { USD: 1.08, GBP: 0.85, INR: 90.20, JPY: 169.50, AUD: 1.62, CAD: 1.48, CHF: 0.97, CNY: 7.83, EUR: 1.00 },\n  GBP: { USD: 1.27, EUR: 1.18, INR: 106.00, JPY: 199.80, AUD: 1.91, CAD: 1.74, CHF: 1.14, CNY: 9.21, GBP: 1.00 },\n  INR: { USD: 0.012, EUR: 0.011, GBP: 0.0095, JPY: 1.88, AUD: 0.018, CAD: 0.016, CHF: 0.0108, CNY: 0.087, INR: 1.00 },\n  JPY: { USD: 0.0064, EUR: 0.0059, GBP: 0.0050, INR: 0.53, AUD: 0.0096, CAD: 0.0087, CHF: 0.0057, CNY: 0.046, JPY: 1.00 },\n  AUD: { USD: 0.66, EUR: 0.62, GBP: 0.52, INR: 55.40, JPY: 104.10, CAD: 0.91, CHF: 0.60, CNY: 4.81, AUD: 1.00 },\n  CAD: { USD: 0.73, EUR: 0.68, GBP: 0.57, INR: 60.80, JPY: 114.40, AUD: 1.10, CHF: 0.66, CNY: 5.29, CAD: 1.00 },\n  CHF: { USD: 1.11, EUR: 1.03, GBP: 0.88, INR: 92.80, JPY: 174.80, AUD: 1.67, CAD: 1.51, CNY: 8.08, CHF: 1.00 },\n  CNY: { USD: 0.138, EUR: 0.128, GBP: 0.109, INR: 11.50, JPY: 21.65, AUD: 0.208, CAD: 0.189, CHF: 0.124, CNY: 1.00 },\n};\n\nexport function CurrencyConverterCalculator() { \n  const [result, setResult] = useState<CalculationResult | null>(null);\n\n  const form = useForm<FormData>({\n    resolver: zodResolver(formSchema),\n    defaultValues: { amount: 100, fromCurrencyValue: 'USD', toCurrencyValue: 'EUR' },\n  });\n\n  const watchedFromCurrencyValue = form.watch('fromCurrencyValue');\n  const [currentFromSymbol, setCurrentFromSymbol] = useState('$');\n\n  useEffect(() => {\n    const currencyObj = AVAILABLE_CURRENCIES.find(c => c.value === watchedFromCurrencyValue);\n    setCurrentFromSymbol(currencyObj?.symbol || '$');\n  }, [watchedFromCurrencyValue]);\n\n  const onSubmit: SubmitHandler<FormData> = (data) => {\n    const fromCurrency = AVAILABLE_CURRENCIES.find(c => c.value === data.fromCurrencyValue);\n    const toCurrency = AVAILABLE_CURRENCIES.find(c => c.value === data.toCurrencyValue);\n\n    if (!fromCurrency || !toCurrency) {\n      // Should not happen if form validation is correct\n      console.error(\"Selected currency not found\");\n      setResult(null);\n      return;\n    }\n\n    let convertedAmount;\n    let rateUsed = null;\n\n    if (data.fromCurrencyValue === data.toCurrencyValue) {\n      convertedAmount = data.amount;\n      rateUsed = 1.0;\n    } else {\n      rateUsed = PLACEHOLDER_RATES[data.fromCurrencyValue]?.[data.toCurrencyValue] || null;\n      if (rateUsed !== null) {\n        convertedAmount = data.amount * rateUsed;\n      } else {\n        // Handle case where rate is not available (e.g., show an error or a message)\n        console.warn(`Placeholder rate for ${data.fromCurrencyValue} to ${data.toCurrencyValue} not found.`);\n        form.setError(\"root.serverError\", { type: \"manual\", message: `Conversion rate from ${fromCurrency.label} to ${toCurrency.label} is not available with placeholder data.` });\n        setResult(null);\n        return;\n      }\n    }\n    \n    setResult({ \n      originalAmount: data.amount,\n      convertedAmount: parseFloat(convertedAmount.toFixed(2)), // Typically to 2 decimal places for currency\n      fromCurrency,\n      toCurrency,\n      rateUsed\n    });\n  };\n\n  return (\n    <Card className=\"shadow-lg\">\n      <CardHeader>\n        <CardTitle className=\"font-headline text-2xl\">Currency Converter</CardTitle>\n        <CardDescription>Convert amounts between different currencies. Uses placeholder exchange rates.</CardDescription>\n      </CardHeader>\n      <form onSubmit={form.handleSubmit(onSubmit)}>\n        <CardContent className=\"space-y-6\">\n          <div>\n            <Label htmlFor=\"amount\">Amount ({currentFromSymbol})</Label>\n            <Input id=\"amount\" type=\"number\" step=\"any\" {...form.register('amount')} />\n            {form.formState.errors.amount && <p className=\"text-sm text-destructive mt-1\">{form.formState.errors.amount.message}</p>}\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div>\n              <Label htmlFor=\"fromCurrencyValue\">From Currency</Label>\n              <Select onValueChange={(value) => form.setValue('fromCurrencyValue', value)} defaultValue={form.getValues('fromCurrencyValue')}>\n                <SelectTrigger id=\"fromCurrencyValue\"><SelectValue /></SelectTrigger>\n                <SelectContent>\n                  {AVAILABLE_CURRENCIES.map(c => (\n                    <SelectItem key={c.value} value={c.value}>{c.label}</SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              {form.formState.errors.fromCurrencyValue && <p className=\"text-sm text-destructive mt-1\">{form.formState.errors.fromCurrencyValue.message}</p>}\n            </div>\n\n            <div>\n              <Label htmlFor=\"toCurrencyValue\">To Currency</Label>\n              <Select onValueChange={(value) => form.setValue('toCurrencyValue', value)} defaultValue={form.getValues('toCurrencyValue')}>\n                <SelectTrigger id=\"toCurrencyValue\"><SelectValue /></SelectTrigger>\n                <SelectContent>\n                  {AVAILABLE_CURRENCIES.map(c => (\n                    <SelectItem key={c.value} value={c.value}>{c.label}</SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              {form.formState.errors.toCurrencyValue && <p className=\"text-sm text-destructive mt-1\">{form.formState.errors.toCurrencyValue.message}</p>}\n            </div>\n          </div>\n           {form.formState.errors.root?.serverError && (\n            <p className=\"text-sm text-destructive mt-1\">{form.formState.errors.root.serverError.message}</p>\n          )}\n        </CardContent>\n        <CardFooter>\n          <Button type=\"submit\" className=\"w-full md:w-auto\">Convert</Button>\n        </CardFooter>\n      </form>\n\n      {result && (\n        <div className=\"p-6 border-t\">\n          <h3 className=\"text-xl font-semibold mb-4 font-headline\">Conversion Result</h3>\n          <p className=\"text-lg\">\n            {result.fromCurrency.symbol}{result.originalAmount.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})} ({result.fromCurrency.value})\n            <span className=\"mx-2\">is approximately</span>\n            <strong className=\"text-primary\">\n              {result.toCurrency.symbol}{result.convertedAmount.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})} ({result.toCurrency.value})\n            </strong>\n          </p>\n          {result.rateUsed !== null && (\n            <p className=\"text-sm text-muted-foreground mt-1\">\n              (Using placeholder exchange rate: 1 {result.fromCurrency.value} = {result.rateUsed.toFixed(4)} {result.toCurrency.value})\n            </p>\n          )}\n          <p className=\"text-xs text-muted-foreground mt-4\">\n            <strong>Disclaimer:</strong> This calculator uses static, placeholder exchange rates for demonstration purposes only. It does not reflect real-time market values.\n          </p>\n        </div>\n      )}\n    </Card>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}